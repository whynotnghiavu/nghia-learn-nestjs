1
00:00:01,200 --> 00:00:16,450
Nats là một nhà môi giới tin nhắn phổ biến thường được sử dụng trong các ứng dụng dựa trên microservice.  Tuy nhiên, như chúng tôi đã đề cập trong bài học trước, đây không phải là nhà môi giới tin nhắn duy nhất hiện có và tùy thuộc vào nhóm trường hợp sử dụng hoặc yêu cầu của bạn, bạn có thể muốn sử dụng một nhà môi giới tin nhắn khác.

2
00:00:17,430 --> 00:00:24,510
Nhờ lớp trừu tượng Nest, chúng ta có thể dễ dàng chuyển đổi giữa các nhà môi giới tin nhắn khác nhau mà không cần phải thực hiện những thay đổi đáng kể đối với cơ sở mã của mình.

3
00:00:25,110 --> 00:00:35,710
Lớp proxy máy khách mà chúng ta đang sử dụng cho đến nay thực sự là một lớp trừu tượng, tùy thuộc vào chiến lược truyền tải đã chọn sẽ sử dụng một cách triển khai khác.

4
00:00:36,300 --> 00:00:47,170
Tương tự, chúng ta có thể cung cấp một đối tượng cấu hình khác cho phương thức connect microservice.  Việc chỉ định rằng chúng tôi muốn sử dụng một chiến lược vận chuyển khác trong khung sẽ đảm nhiệm phần còn lại.

5
00:00:47,250 --> 00:00:53,460
Tất nhiên, sẽ có kịch bản nâng cao hơn nếu bạn dựa vào một số tính năng dành riêng cho một chiến lược vận tải cụ thể.

6
00:00:53,910 --> 00:01:04,330
Người ghi nhận tin nhắn là Matt.  Các đối tượng bối cảnh, v.v. Bạn có thể cần thực hiện một số thay đổi bổ sung đối với cơ sở mã của mình nhưng đó không phải là trường hợp đối với chúng tôi ở đây trong codex tuyệt vời của chúng tôi.

7
00:01:05,040 --> 00:01:19,090
Vì vậy, trong bài học này nhằm mục đích trình diễn sẽ chuyển từ nats sang rabbit em que.  Làm cho mọi việc trở nên đơn giản hơn nữa đối với chúng tôi sẽ chỉ cập nhật cơ sở ảo và các ứng dụng dịch vụ quy trình công việc và giữ nguyên các dịch vụ khác.

8
00:01:19,860 --> 00:01:26,890
Nếu không, chúng tôi sẽ phải thực hiện nhiều thay đổi không liên quan hơn đối với cơ sở mã của mình, khiến mọi thứ trở nên quá phức tạp và khó theo dõi một cách không cần thiết.

9
00:01:27,360 --> 00:01:33,780
Hãy bắt đầu bằng cách cập nhật tệp yaml soạn thảo docker và thêm dịch vụ rabbit mq.  Hoặc đơn giản vì lợi ích.

10
00:01:34,170 --> 00:01:47,140
Sẽ giữ lại dịch vụ mạng cũng như chỉ để tham khảo.  Ngoài ra, hãy đảm bảo rằng chúng tôi hiện đang tạo cả hai dịch vụ cơ sở ảo và dịch vụ quy trình công việc phụ thuộc vào dịch vụ docker dễ thương của thỏ.

11
00:01:59,970 --> 00:02:16,950
Tiếp theo, hãy khai báo thỏ mq gạch dưới biến môi trường đường sắt của bạn.  Tuyệt vời.  Vì vậy, trước khi chúng tôi bắt đầu thực hiện bất kỳ thay đổi nào đối với cơ sở mã của mình.

12
00:02:17,280 --> 00:02:23,640
Hãy đảm bảo rằng chúng tôi đã cài đặt các phần phụ thuộc cần thiết cho rabbit m q.  Vì vậy, trong thiết bị đầu cuối của chúng ta hãy chạy và p m i.

13
00:02:23,970 --> 00:02:39,400
A m kewpie lib và am kewpie quản lý kết nối.  Sau khi cài đặt hoàn tất.  Hãy mở tệp ts chính trong ứng dụng dịch vụ quy trình làm việc của chúng tôi và cập nhật phương thức kết nối vi dịch vụ để sử dụng chiến lược truyền tải mq của thỏ.

14
00:02:39,870 --> 00:02:51,600
Tiếp theo, hãy điều hướng đến ứng dụng cơ sở ảo và mở tệp t mô-đun tòa nhà.  Bạn cũng sẽ cập nhật cấu hình mô-đun máy khách để sử dụng chiến lược vận chuyển thỏ mq.

15
00:02:52,170 --> 00:02:59,560
Hoàn hảo.  Và một lần nữa, như một lời nhắc nhở nhanh, chúng tôi chỉ cập nhật các ứng dụng dịch vụ quy trình công việc và cơ sở ảo.

16
00:02:59,790 --> 00:03:04,240
Nếu không, chúng tôi sẽ phải thực hiện nhiều thay đổi đối với cơ sở mã của mình và đó không phải là mục đích của việc này.

17
00:03:04,590 --> 00:03:10,260
Được rồi, tiếp theo, chúng ta hãy tạm thời vô hiệu hóa dịch vụ tạo báo động vì hiện tại chúng ta không cần đến nó.

18
00:03:10,800 --> 00:03:20,910
Hãy điều hướng đến dịch vụ tạo cảnh báo tệ hại và nhận xét trình trang trí khoảng thời gian.  Với thay đổi này, trình tạo cảnh báo của chúng tôi sẽ không còn tạo ra cảnh báo nào nữa.

19
00:03:21,270 --> 00:03:28,770
Làm cho nhật ký của chúng tôi dễ theo dõi và đọc hơn.  Hãy lưu các thay đổi của chúng tôi và đi tới thiết bị đầu cuối và chạy lệnh sau để bắt đầu mọi thứ.

20
00:03:29,250 --> 00:03:50,440
Docker soạn thảo.  Khi mọi thứ đã sẵn sàng và chạy, hãy tạo một tòa nhà mới bằng cách sử dụng Curl.  Như mọi khi, bạn có thể tìm thấy lệnh quạ này bên dưới video khóa học.

21
00:03:51,090 --> 00:03:58,120
Và như chúng tôi có thể thấy từ nhật ký, yêu cầu của chúng tôi đã được xử lý thành công và tòa nhà mới cũng như quy trình làm việc của nó đã được tạo ra một cách tuyệt vời.

22
00:03:58,620 --> 00:04:05,190
Ồ và bài học này chúng tôi đã chỉ ra việc chuyển đổi giữa các nhà môi giới tin nhắn khác nhau dễ dàng như thế nào bằng cách sử dụng lớp trừu tượng Nest Yes.

23
00:04:05,790 --> 00:04:12,040
Chúng tôi cũng đã học cách sử dụng rabbit em que rất phổ biến làm trình chuyển tin nhắn trong các ứng dụng microservice Nest của mình.

24
00:04:13,260 --> 00:04:18,840
Chỉ cần nhớ rằng Nest làm cho việc chuyển đổi tổng thể trở nên đơn giản hơn nhiều.  Đặc biệt là trong trường hợp của chúng tôi.

25
00:04:19,192 --> 00:04:26,110
Chúng tôi đã sử dụng các phương pháp siêu cụ thể, v.v. từ lần vận chuyển đầu tiên mà chúng tôi sắp chuyển khỏi lưới.

26
00:04:26,310 --> 00:04:40,650
Điều này làm cho toàn bộ quá trình trở nên suôn sẻ hơn đối với chúng tôi.  Trong trường hợp bạn có thể đã làm điều gì đó cụ thể, chẳng hạn như thao tác với các tiêu đề, v.v., bạn chỉ cần dành thêm một chút thời gian để chuyển những thứ đó sang sử dụng phương tiện di chuyển mới của mình, nhưng ngược lại.

