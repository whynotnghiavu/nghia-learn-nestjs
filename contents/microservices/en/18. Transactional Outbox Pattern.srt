1
00:00:01,083 --> 00:00:05,430
The transactional outbox pattern is a design
pattern that can be used to ensure data

2
00:00:05,430 --> 00:00:08,020
consistency among
different services.

3
00:00:08,250 --> 00:00:11,940
In this pattern instead
of directly calling other

4
00:00:11,940 --> 00:00:12,990
services are sending
messages to the message broker

5
00:00:13,290 --> 00:00:15,250
as part of the
local transaction.

6
00:00:15,420 --> 00:00:18,300
We first and sir a new
message into the database table

7
00:00:18,570 --> 00:00:20,460
called outbox and then.

8
00:00:20,790 --> 00:00:25,930
Send it to the other services using a
separate process called outbox processor.

9
00:00:27,330 --> 00:00:30,690
For example when we create a
new building in our current system

10
00:00:30,810 --> 00:00:34,770
we first and sir a new building into the
database and then create a new workflow for

11
00:00:34,770 --> 00:00:37,570
this building by calling
the workflows service.

12
00:00:37,890 --> 00:00:39,990
With the transactional
outbox pattern.

13
00:00:40,350 --> 00:00:42,210
Instead of calling
the workflows service

14
00:00:42,510 --> 00:00:45,150
we were the insert a new
record to the outbox table

15
00:00:45,450 --> 00:00:49,050
as part of the local database to
transaction that represents a task.

16
00:00:49,440 --> 00:00:51,874
Which eventually
we'll call this service.

17
00:00:52,830 --> 00:00:57,809
Lastly we would need a background job or
process called outbox processor that would

18
00:00:57,809 --> 00:01:02,010
periodically check the
outbox table for new

19
00:01:02,040 --> 00:01:03,040
messages and send them
to the message broker.

20
00:01:04,230 --> 00:01:07,770
Don't worry if all of this sounds a bit
confusing at this point things will become

21
00:01:07,770 --> 00:01:12,100
much clearer once we implement this pattern
in our application in just a moment.

22
00:01:12,540 --> 00:01:15,900
Okay so let's start things off
by creating a new outbox module

23
00:01:16,080 --> 00:01:18,340
in the virtual facility project.

24
00:01:19,500 --> 00:01:22,920
Know that instead of generating this
module in the virtual facility we could

25
00:01:22,920 --> 00:01:24,930
technically generated
in the libs folder

26
00:01:25,140 --> 00:01:28,350
making it available to all other
applications in our motto repo.

27
00:01:28,710 --> 00:01:32,430
It is very likely that we
may end up needing this

28
00:01:32,430 --> 00:01:32,970
functionality in other
applications after all

29
00:01:33,150 --> 00:01:37,230
as an exercise try to
generate a new library

30
00:01:37,230 --> 00:01:38,230
yourself and move
the outbox module their.

31
00:01:38,550 --> 00:01:38,970
Next

32
00:01:39,240 --> 00:01:43,780
let create a new outbox entity with
a few columns in the outbox module.

33
00:01:48,870 --> 00:01:49,560
And next

34
00:01:49,800 --> 00:01:54,250
let's generate a new outbox service
file in the outbox module as well.

35
00:01:55,230 --> 00:01:56,490
Once the file as generated

36
00:01:56,640 --> 00:02:01,750
let's inject the outbox repository provider
using the inject repository decorate.

37
00:02:06,240 --> 00:02:06,690
Next

38
00:02:06,990 --> 00:02:10,050
let's declare a new get
unprocessed messages method

39
00:02:10,200 --> 00:02:13,030
that will return all
unprocessed messages.

40
00:02:13,350 --> 00:02:17,340
This method here takes
and options parameter that

41
00:02:17,340 --> 00:02:18,420
lets us filter messages
by the target service.

42
00:02:18,750 --> 00:02:19,290
Also

43
00:02:19,560 --> 00:02:22,290
all messages are sorted
by the created at column in a

44
00:02:22,560 --> 00:02:23,860
ending order.

45
00:02:24,060 --> 00:02:27,670
Let's save our changes and
open up the outbox module file.

46
00:02:29,370 --> 00:02:32,160
Let's import the type or a
module for feature method

47
00:02:32,580 --> 00:02:35,560
and pass the
outbox entity to it.

48
00:02:36,270 --> 00:02:41,190
Also will need the workflows service client
available in the context of this module

49
00:02:41,280 --> 00:02:46,330
slots import the clients module and supply
the workflows service configuration there.

50
00:02:49,950 --> 00:02:50,950
Great.

51
00:02:51,150 --> 00:02:54,930
Note that registering this provider
here effectively means that will have two

52
00:02:54,930 --> 00:02:57,835
different client instances
for the workflow service.

53
00:02:57,930 --> 00:03:00,150
One provided in the
buildings module file

54
00:03:00,570 --> 00:03:02,940
and one provided in
the outbox module file.

55
00:03:03,540 --> 00:03:04,540
Ideally.

56
00:03:04,590 --> 00:03:08,280
We create a new module
that will be responsible

57
00:03:08,280 --> 00:03:08,760
for providing the
workflow service client

58
00:03:08,940 --> 00:03:10,410
but for simplicity's sake.

59
00:03:10,740 --> 00:03:12,760
Will leave it as is for now.

60
00:03:13,230 --> 00:03:15,480
Now that we have the
outbox module in place

61
00:03:15,630 --> 00:03:20,130
let's open up the building
service file and inject

62
00:03:20,133 --> 00:03:21,610
the data source provider
using the standard approach.

63
00:03:26,670 --> 00:03:27,150
Next

64
00:03:27,420 --> 00:03:29,190
let's scroll down to
the create method

65
00:03:29,310 --> 00:03:32,320
and update the code to
initialize the transaction.

66
00:03:34,230 --> 00:03:36,000
With the transaction initialized

67
00:03:36,150 --> 00:03:40,090
let's retrieve the buildings repository
from the query runner object.

68
00:03:40,560 --> 00:03:41,160
Also.

69
00:03:41,550 --> 00:03:46,050
Lets retrieve the outbox
repository so we can

70
00:03:46,080 --> 00:03:47,080
insert a new message
into the outbox table.

71
00:03:47,430 --> 00:03:51,900
Let's wrap everything up
in a try catch block and roll

72
00:03:51,900 --> 00:03:53,280
back the transaction if
an error occurs otherwise.

73
00:03:53,640 --> 00:03:55,150
Let's commit the transaction.

74
00:04:07,290 --> 00:04:10,050
Now using our local
buildings repository

75
00:04:10,350 --> 00:04:12,910
let's insert a new
building into the database.

76
00:04:14,040 --> 00:04:14,700
Afterwards

77
00:04:14,940 --> 00:04:15,268
but since

78
00:04:15,463 --> 00:04:18,250
a new message
into the outbox table.

79
00:04:20,370 --> 00:04:21,370
Perfect.

80
00:04:21,810 --> 00:04:22,290
Now

81
00:04:22,560 --> 00:04:26,610
whenever we create
a new building will also

82
00:04:26,610 --> 00:04:27,030
and sir a new message
into that outbox table.

83
00:04:27,480 --> 00:04:28,770
If the transaction fails.

84
00:04:29,161 --> 00:04:30,660
The message won't be inserted

85
00:04:31,020 --> 00:04:34,494
and so it will be never sent
to the workflows service.

86
00:04:35,040 --> 00:04:39,180
The last remaining step
we have is to create a new

87
00:04:39,180 --> 00:04:40,870
background job or process
called the outbox processor.

88
00:04:41,340 --> 00:04:45,330
As processor will periodically checked
the outbox table for new messages and send

89
00:04:45,330 --> 00:04:48,040
them to the message
broker if any are found.

90
00:04:48,330 --> 00:04:52,620
We could also listened
to the postgres events to

91
00:04:52,620 --> 00:04:53,670
trigger the senate process
but for simplicity's sake.

92
00:04:54,030 --> 00:04:56,820
Will use a simple crown
based approach in this course.

93
00:04:57,180 --> 00:04:59,580
Just know that you have
multiple choices for api since here

94
00:04:59,730 --> 00:05:01,420
on how to handle this.

95
00:05:01,650 --> 00:05:02,910
So let's create a new

96
00:05:03,120 --> 00:05:06,060
outbox processor t s
file in the outbox module

97
00:05:06,180 --> 00:05:07,870
with the following content.

98
00:05:13,470 --> 00:05:15,570
With all of our needed
dependencies injected

99
00:05:15,810 --> 00:05:20,250
let's declare a new dispatch
workflow event method

100
00:05:20,250 --> 00:05:21,808
that will send a new event
to art workflows service.

101
00:05:28,440 --> 00:05:30,870
Inside this process
outbox messages method

102
00:05:31,170 --> 00:05:35,560
let's retrieve all unprocessed
messages from our outbox table.

103
00:05:39,000 --> 00:05:39,510
Next

104
00:05:39,750 --> 00:05:43,570
let's iterate over the messages and
send them to our message broker.

105
00:05:44,250 --> 00:05:45,540
And last but not least

106
00:05:45,750 --> 00:05:48,510
let's register the outbox
processor provider

107
00:05:48,630 --> 00:05:50,710
in the outbox module file.

108
00:05:54,090 --> 00:05:58,290
Also let's not forget to import the schedule
module in the app module file so that

109
00:05:58,290 --> 00:06:01,750
our background job or process
can be executed properly.

110
00:06:03,120 --> 00:06:05,760
Let's save our changes and
before we test everything else

111
00:06:05,940 --> 00:06:10,350
let's make sure we also update the workflows
create message handler to use the event

112
00:06:10,350 --> 00:06:13,170
pattern decorator instead of
the message pattern decorator

113
00:06:13,470 --> 00:06:15,270
since we're now
using the emit method

114
00:06:15,510 --> 00:06:18,050
to send event to
the workflow service.

115
00:06:21,270 --> 00:06:25,350
Let's save our changes
here and head over to the

116
00:06:25,350 --> 00:06:26,620
terminal and make sure
everything is up and running.

117
00:06:28,050 --> 00:06:31,980
If you're seeing any
errors just double check

118
00:06:31,980 --> 00:06:32,340
that you followed all
the steps we just covered

119
00:06:32,640 --> 00:06:35,050
if the application is up
and running smoothly.

120
00:06:35,190 --> 00:06:38,980
Let's create a new building
using curl to test everything out.

121
00:06:40,740 --> 00:06:43,300
Now let's wait a little bit.

122
00:06:48,210 --> 00:06:49,260
And as we can see

123
00:06:49,470 --> 00:06:53,609
there's that created workflow log message
which means that our workflow service

124
00:06:53,644 --> 00:06:58,630
successfully received the workflows create
event fantastic everything's working great.

125
00:07:00,180 --> 00:07:02,010
Before we wrap up in this lesson

126
00:07:02,310 --> 00:07:06,555
let speed things up a little bit by
leveraging type of rams entity subscribers.

127
00:07:06,840 --> 00:07:08,790
As we mentioned at the
beginning of this lesson.

128
00:07:09,180 --> 00:07:13,200
We could listen to the post gress
events to trigger this sending process

129
00:07:13,500 --> 00:07:14,160
basically

130
00:07:14,400 --> 00:07:16,500
whenever a new
outbox record is inserted.

131
00:07:16,920 --> 00:07:17,190
Post

132
00:07:17,423 --> 00:07:21,390
would emit an event
instructing or applique

133
00:07:21,420 --> 00:07:22,420
location to send a message
to the message broker.

134
00:07:23,280 --> 00:07:24,300
With type r m

135
00:07:24,450 --> 00:07:28,634
we could achieve a somewhat similar
functionality by using entity subscribers

136
00:07:28,830 --> 00:07:29,340
however

137
00:07:29,580 --> 00:07:33,180
please note that this approach
might not be suitable for all use cases.

138
00:07:33,660 --> 00:07:35,910
If you'd rather process
messages in batches

139
00:07:36,210 --> 00:07:38,890
you should stick to the
cron based approach.

140
00:07:39,090 --> 00:07:43,200
Will just showcase this
option as it might be suitable

141
00:07:43,260 --> 00:07:45,070
for some use cases and
applications out there.

142
00:07:45,120 --> 00:07:48,460
Okay so to begin with the
enemy subscriber approach.

143
00:07:48,690 --> 00:07:53,520
Let's create a new outbox
entity subscriber ts file

144
00:07:53,520 --> 00:07:54,940
in the outbox module
with the following content.

145
00:07:57,720 --> 00:08:01,180
Let's break this class down so
everything makes much more sense.

146
00:08:01,530 --> 00:08:05,640
First were adding this
class to the data source

147
00:08:05,640 --> 00:08:07,660
subscribers array so that
it can listen to entity events.

148
00:08:08,220 --> 00:08:09,840
The listen to method

149
00:08:10,080 --> 00:08:13,691
indicates which entities
the subscriber is interested it.

150
00:08:13,740 --> 00:08:14,740
Lastly.

151
00:08:14,790 --> 00:08:16,230
The after insert method

152
00:08:16,410 --> 00:08:17,010
is called

153
00:08:17,130 --> 00:08:19,960
after the entity is
inserted into the database.

154
00:08:20,340 --> 00:08:21,060
In this method.

155
00:08:21,480 --> 00:08:25,020
You may have noticed
that we also immediately

156
00:08:25,020 --> 00:08:26,020
dispatched the message
to the message broker.

157
00:08:26,520 --> 00:08:31,290
Now with this class and place it's open up
the outbox module file and registered the

158
00:08:31,290 --> 00:08:34,120
outbox entity subscriber
class as a provider.

159
00:08:34,680 --> 00:08:37,140
Let's save our changes as
an head over to the terminal

160
00:08:37,260 --> 00:08:39,820
and make sure everything
is still up and running.

161
00:08:40,530 --> 00:08:41,100
If so

162
00:08:41,370 --> 00:08:44,260
let's again create a
new building using curl.

163
00:08:44,640 --> 00:08:45,120
Now

164
00:08:45,240 --> 00:08:49,270
let's switch back to our terminal
and look at the logs once more.

165
00:08:49,740 --> 00:08:50,610
As we can see

166
00:08:50,730 --> 00:08:54,330
a new workflow was created almost immediately
after the building was created now

167
00:08:54,450 --> 00:08:55,600
it worked.

168
00:08:56,190 --> 00:08:57,580
So to summarize.

169
00:08:57,690 --> 00:09:01,830
In this lesson we learned how to use the
transactional outbox pattern to ensure data

170
00:09:01,830 --> 00:09:04,390
consistency among
different services.

171
00:09:04,740 --> 00:09:08,940
This pattern is particularly useful when we
can't afford to lose messages and we need

172
00:09:08,940 --> 00:09:12,300
to make sure that they
are eventually delivered

173
00:09:12,330 --> 00:09:12,900
to the consumer
service hence achieving

174
00:09:13,110 --> 00:09:16,300
these so called at least
once delivery guaranteed.

175
00:09:16,650 --> 00:09:17,640
Before we finish

176
00:09:17,850 --> 00:09:21,610
let's focus on one little caveat you
might have thought about already.

177
00:09:21,720 --> 00:09:24,360
What if after sending a
message to the workflows service.

178
00:09:24,690 --> 00:09:27,060
The outbox processor
process crashes

179
00:09:27,300 --> 00:09:29,710
before removing the
message from the database.

180
00:09:29,940 --> 00:09:30,660
In this case

181
00:09:30,900 --> 00:09:32,340
when the application recovers

182
00:09:32,580 --> 00:09:35,700
the message will be sent again
and obviously we wouldn't want that.

183
00:09:36,030 --> 00:09:40,230
This is why the outbox pattern lets us
achieve at least once delivery guarantee

184
00:09:40,470 --> 00:09:42,910
not exactly once delivery.

185
00:09:43,050 --> 00:09:43,710
In other words

186
00:09:43,980 --> 00:09:46,950
we can't guarantee that the
message will be delivered exactly once

187
00:09:47,370 --> 00:09:48,660
but we can guarantee

188
00:09:48,900 --> 00:09:51,420
that it will reach the
destination at least once.

189
00:09:51,900 --> 00:09:53,520
We'll talk more
about this predicament

190
00:09:53,640 --> 00:09:55,120
in the next lesson.

