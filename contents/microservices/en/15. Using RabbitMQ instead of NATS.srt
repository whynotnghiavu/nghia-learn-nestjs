1
00:00:01,200 --> 00:00:04,980
Nats is a popular
message broker that is often

2
00:00:04,980 --> 00:00:05,980
used in microservices
based applications.

3
00:00:06,180 --> 00:00:06,690
However

4
00:00:06,870 --> 00:00:08,490
as we mentioned
in a previous lesson

5
00:00:08,670 --> 00:00:10,560
it's not the only
message broker out there

6
00:00:11,010 --> 00:00:13,680
and depending on your use
case team or requirements

7
00:00:13,920 --> 00:00:16,450
you might want to use a
different message broker.

8
00:00:17,430 --> 00:00:18,328
Thanks to the nest

9
00:00:18,570 --> 00:00:22,170
abstraction layer we can easily switch
between different message brokers without

10
00:00:22,170 --> 00:00:24,510
having to make significant
changes to our code base.

11
00:00:25,110 --> 00:00:27,840
The client proxy class
that we've been using so far

12
00:00:28,110 --> 00:00:29,970
is actually an abstract class

13
00:00:30,240 --> 00:00:32,490
that depending on the
selected transport strategy

14
00:00:32,730 --> 00:00:35,710
will use a different
implementation under the hood.

15
00:00:36,300 --> 00:00:40,710
Similarly we can supply
a different configuration

16
00:00:40,710 --> 00:00:41,070
object to the connect
microservice method.

17
00:00:41,430 --> 00:00:44,460
Specifying that we want to
use a different transport strategy

18
00:00:44,610 --> 00:00:47,170
in the framework will
take care of the rest.

19
00:00:47,250 --> 00:00:47,850
Of course

20
00:00:48,090 --> 00:00:51,750
a more advanced scenarios if
you rely on some the features

21
00:00:51,750 --> 00:00:53,460
that are specific to a
particular transport strategy.

22
00:00:53,910 --> 00:00:54,990
Message acknowledgment

23
00:00:55,230 --> 00:00:56,160
hatters form Matt.

24
00:00:56,520 --> 00:00:58,270
Contexts objects etc.

25
00:00:58,320 --> 00:01:00,600
You might need to make some
extra changes to your code base

26
00:01:00,930 --> 00:01:04,330
but that's not the case for
us here in our codex great.

27
00:01:05,040 --> 00:01:09,750
So in this lesson for
demonstration purposes

28
00:01:09,750 --> 00:01:10,750
will switch from the
nats to rabbit em que.

29
00:01:10,830 --> 00:01:12,510
Make things even simpler for us

30
00:01:12,780 --> 00:01:17,100
will only update virtual
facility and the workflows

31
00:01:17,100 --> 00:01:19,090
service applications and
leave other services as they are.

32
00:01:19,860 --> 00:01:23,460
Otherwise we'd have to make even more
irrelevant changes to our code base making

33
00:01:23,460 --> 00:01:26,890
things unnecessarily
overcomplicated and hard to follow.

34
00:01:27,360 --> 00:01:29,910
Let's start by updating the
docker compose yaml file

35
00:01:30,060 --> 00:01:32,440
and adding the
rabbit mq service.

36
00:01:32,670 --> 00:01:33,780
Or simplicity sake.

37
00:01:34,170 --> 00:01:37,751
Will keep the net service
as well just as a reference.

38
00:01:38,970 --> 00:01:39,510
Also

39
00:01:39,660 --> 00:01:44,190
let's make sure we make both services
virtual facility and workflows service depend

40
00:01:44,190 --> 00:01:47,140
on the rabbit 'em cute
docker service right now.

41
00:01:59,970 --> 00:02:04,840
Next up let's declare the rabbit mq
underscore your rail environment variable.

42
00:02:12,780 --> 00:02:13,780
Great.

43
00:02:14,340 --> 00:02:16,950
So before we start making
any changes to our code base.

44
00:02:17,280 --> 00:02:20,610
Let's make sure we installed the
necessary dependencies for rabbit m q.

45
00:02:21,120 --> 00:02:23,640
So in our terminals
let's run and p m i.

46
00:02:23,970 --> 00:02:25,050
A m kewpie lib

47
00:02:25,470 --> 00:02:26,730
and am kewpie

48
00:02:26,880 --> 00:02:28,420
connection manager.

49
00:02:28,740 --> 00:02:30,210
Once the installation
is complete.

50
00:02:30,630 --> 00:02:32,400
Let's open up the main ts file

51
00:02:32,550 --> 00:02:34,320
in our workflows
service application and

52
00:02:34,430 --> 00:02:36,240
update the connect
microservice method

53
00:02:36,510 --> 00:02:39,400
to use the rabbit mq
transport strategy.

54
00:02:39,870 --> 00:02:40,320
Next

55
00:02:40,560 --> 00:02:44,640
let's navigate to the virtual facility
application and open up the buildings module t

56
00:02:44,769 --> 00:02:45,769
file.

57
00:02:45,990 --> 00:02:46,320
Your

58
00:02:46,590 --> 00:02:51,180
will update the clients
module configuration to

59
00:02:51,180 --> 00:02:51,600
use the rabbit mq
transport strategy as well.

60
00:02:52,170 --> 00:02:53,170
Perfect.

61
00:02:53,400 --> 00:02:57,810
And once again just as a quick
reminder were only updating

62
00:02:57,810 --> 00:02:59,560
the virtual facility and
workflows service applications.

63
00:02:59,790 --> 00:03:02,880
Otherwise we would have
to make a lot of changes to

64
00:03:02,880 --> 00:03:04,240
our code base and that's
not the point of this less.

65
00:03:04,590 --> 00:03:05,580
Okay so next

66
00:03:05,730 --> 00:03:09,780
let's also temporarily
disable the alarms generator

67
00:03:09,780 --> 00:03:10,260
service since we won't
be needing it for now.

68
00:03:10,800 --> 00:03:13,200
Let's navigate to the
alarms generator service vile

69
00:03:13,500 --> 00:03:16,030
and comment out
the interval decorator.

70
00:03:16,680 --> 00:03:17,670
With this change

71
00:03:17,970 --> 00:03:20,910
our alarms generator won't be
generating no alarms any more.

72
00:03:21,270 --> 00:03:24,160
Making our logs easier
to follow and read.

73
00:03:24,600 --> 00:03:27,930
Let's save our changes
and head over to the terminal

74
00:03:27,930 --> 00:03:28,770
and run the following
command to start everything up.

75
00:03:29,250 --> 00:03:31,300
Docker compose up.

76
00:03:42,570 --> 00:03:43,950
Once everything
is up and running

77
00:03:44,220 --> 00:03:46,663
let's create a new
building using curl.

78
00:03:46,980 --> 00:03:50,440
As always you can find this crow
command below the course video.

79
00:03:51,090 --> 00:03:55,140
And as we can see from our logs our request
was successfully processed and a new

80
00:03:55,140 --> 00:03:58,120
building and its workflow
were created great.

81
00:03:58,620 --> 00:03:59,580
Oh and this lesson

82
00:03:59,850 --> 00:04:03,660
we showed just how easy it
is the switch between different

83
00:04:03,660 --> 00:04:05,190
message brokers using the
nest yes abstraction layer.

84
00:04:05,790 --> 00:04:09,720
We also learned how to use the very
popular rabbit em que as a message broker

85
00:04:09,930 --> 00:04:12,040
in our nest microservice
applications.

86
00:04:13,260 --> 00:04:17,250
Just remember that nest the does make
switching transports much simpler overall.

87
00:04:17,580 --> 00:04:18,840
Especially in our case.

88
00:04:19,192 --> 00:04:23,550
We were already using hyper specific
methods etc from our first transport

89
00:04:23,820 --> 00:04:26,110
that we are moving
away from which was nets.

90
00:04:26,310 --> 00:04:29,680
This made the entire
process even smoother for us.

91
00:04:30,270 --> 00:04:34,410
In cases where you
might have done something

92
00:04:34,410 --> 00:04:35,040
specific such as
manipulating headers etc

93
00:04:35,280 --> 00:04:38,940
you just need to spend
a little bit of extra time

94
00:04:38,940 --> 00:04:39,940
transitioning those to
use your new transport

95
00:04:40,050 --> 00:04:40,650
but otherwise.

96
00:04:41,010 --> 00:04:44,140
Everything else we did here
would stay exactly the same.

