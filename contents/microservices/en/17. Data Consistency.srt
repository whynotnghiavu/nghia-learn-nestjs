1
00:00:00,990 --> 00:00:02,520
In monolithic applications

2
00:00:02,670 --> 00:00:05,190
we might use acid for
our database transactions

3
00:00:05,310 --> 00:00:06,900
which stands for atomicity

4
00:00:07,050 --> 00:00:09,690
consistency
isolation and durability

5
00:00:09,870 --> 00:00:11,740
to ensure data consistency.

6
00:00:12,900 --> 00:00:13,470
However

7
00:00:13,620 --> 00:00:16,980
with microservices architectures
we don't have this luxury anymore.

8
00:00:17,400 --> 00:00:21,900
Instead we need to come
up with a different approach to

9
00:00:21,960 --> 00:00:23,710
ensure data consistency
among all of our different services.

10
00:00:24,060 --> 00:00:24,810
For example

11
00:00:24,960 --> 00:00:26,890
in our current system.

12
00:00:26,940 --> 00:00:31,110
When we create a new building we first and
sir a new building into the database and

13
00:00:31,110 --> 00:00:33,630
then create a new
workflow for this building

14
00:00:33,900 --> 00:00:35,890
i calling the workflows service.

15
00:00:37,080 --> 00:00:37,650
However

16
00:00:38,070 --> 00:00:42,000
what if the workflows
services down and our

17
00:00:42,000 --> 00:00:42,780
message broker fails to
deliver the message later.

18
00:00:43,290 --> 00:00:45,180
What if for some
non obvious reason.

19
00:00:45,540 --> 00:00:49,090
The workflow service fails to create
a new workflow for this building.

20
00:00:49,170 --> 00:00:50,010
While in this case

21
00:00:50,220 --> 00:00:53,310
will end up with an inconsistent
state in our system and also

22
00:00:53,550 --> 00:00:57,070
we won't have a mechanism
in place to recover from this day.

23
00:00:58,050 --> 00:01:02,190
We could of course wrap both calls in a
database transaction and rollback data

24
00:01:02,190 --> 00:01:04,140
changes if the
workflow creation fails

25
00:01:04,440 --> 00:01:05,910
but this isn't
always that simple.

26
00:01:06,480 --> 00:01:08,490
If we had multiple
services involved

27
00:01:08,790 --> 00:01:11,730
let's say services that must
be called and a specific order.

28
00:01:12,120 --> 00:01:14,820
Some changes might be
already committed to the database

29
00:01:15,120 --> 00:01:18,520
in rolling back local changes
wouldn't help us that much.

30
00:01:19,230 --> 00:01:23,790
It might even put us in
an even worse situation

31
00:01:23,850 --> 00:01:24,850
if some of those
rollbacks failed etc.

32
00:01:25,320 --> 00:01:27,700
So how can we
solve this problem.

33
00:01:28,020 --> 00:01:30,300
Well there are several
different approaches out there

34
00:01:30,420 --> 00:01:32,280
but in this course will
focus on two of them.

35
00:01:32,670 --> 00:01:33,780
The inbox pattern

36
00:01:33,960 --> 00:01:35,800
and the outbox better.

37
00:01:36,690 --> 00:01:39,360
There's also a third
technique called sagas

38
00:01:39,480 --> 00:01:42,640
which is useful for designing
long running business transactions.

39
00:01:42,960 --> 00:01:43,860
But unfortunately

40
00:01:44,040 --> 00:01:45,930
we won't have time to
cover that in this course

41
00:01:46,230 --> 00:01:50,680
but we dive into it in the architecture
and advanced patterns course extension.

42
00:01:50,730 --> 00:01:53,590
As it's a much larger
and broader topic.

43
00:01:54,720 --> 00:01:58,680
With these inbox and
outbox patterns we can

44
00:01:58,680 --> 00:01:59,730
achieve these so-called
eventual consistency model

45
00:01:59,940 --> 00:02:03,060
which means of the system state
will eventually become consistent

46
00:02:03,450 --> 00:02:04,830
but as the name implies

47
00:02:05,010 --> 00:02:06,790
it might take some time.

48
00:02:07,680 --> 00:02:08,520
In other words

49
00:02:08,670 --> 00:02:12,510
we can't guarantee that
the system will immediately

50
00:02:12,510 --> 00:02:14,110
become consistent and we
need to take this into account.

51
00:02:14,370 --> 00:02:18,270
Whether we could use eventual consistency
in our system or not depends on specific

52
00:02:18,270 --> 00:02:21,390
use cases application
requirements and business needs

53
00:02:21,810 --> 00:02:25,500
to always make sure to carefully
evaluate the pros and cons of each approach

54
00:02:25,650 --> 00:02:27,370
before making a decision.

