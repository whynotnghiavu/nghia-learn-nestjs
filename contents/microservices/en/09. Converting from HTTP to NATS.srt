1
00:00:00,780 --> 00:00:05,280
Nats is a lightweight
high performance open

2
00:00:05,280 --> 00:00:05,910
source message broker
for distributed systems

3
00:00:06,180 --> 00:00:09,340
loud native applications and
microservices architectures.

4
00:00:09,630 --> 00:00:11,969
It provides a simple
yet powerful a p i.

5
00:00:12,330 --> 00:00:15,340
At allows us to easily
build distributed systems.

6
00:00:15,720 --> 00:00:17,160
The nats server

7
00:00:17,280 --> 00:00:19,500
is written in the go
programming language

8
00:00:19,800 --> 00:00:22,110
but Clay client libraries
to interact with the server

9
00:00:22,410 --> 00:00:25,600
are available for dozens of
major programming languages.

10
00:00:26,370 --> 00:00:31,360
Nats supports both at most
once and at least once delivery.

11
00:00:31,530 --> 00:00:34,650
It can run anywhere from large
servers and cloud instances.

12
00:00:34,980 --> 00:00:37,590
Through edge gateways
and even Internet of things

13
00:00:37,830 --> 00:00:39,280
i o t devices.

14
00:00:39,960 --> 00:00:44,490
Ness gs provides several built-in
message broker integrations including nets.

15
00:00:45,000 --> 00:00:46,890
We decided to
use it in this course.

16
00:00:47,220 --> 00:00:48,420
Because it's easy to set up

17
00:00:48,750 --> 00:00:52,080
and natively supports request
response communication style

18
00:00:52,320 --> 00:00:54,220
making it simple to migrate.

19
00:00:54,270 --> 00:00:58,480
Given that we're currently using http
for communication between our services.

20
00:00:59,460 --> 00:01:03,450
Note that almost every
transport strategy supported

21
00:01:03,450 --> 00:01:04,770
by nastiest js can be used
for both request response

22
00:01:05,040 --> 00:01:07,110
and event based
communication styles

23
00:01:07,500 --> 00:01:10,140
but some of them are better
suited for one or the other.

24
00:01:10,560 --> 00:01:13,570
Will dive deeper into
this topic in future lessons.

25
00:01:14,310 --> 00:01:18,600
All right so let's get started by
installing the nes js microservices package

26
00:01:18,840 --> 00:01:23,290
that will use to add support for
microservices to our nest chest application.

27
00:01:23,730 --> 00:01:24,300
So far

28
00:01:24,480 --> 00:01:27,900
we didn't need this package as we
were using http for communication

29
00:01:28,020 --> 00:01:29,160
between our services

30
00:01:29,370 --> 00:01:30,930
which is supported
out of the box

31
00:01:31,080 --> 00:01:32,740
by ness Jess court.

32
00:01:33,480 --> 00:01:38,290
Let's also install the nats driver that
will use to connect to the nats server.

33
00:01:38,881 --> 00:01:41,290
Once the installation
process is complete.

34
00:01:41,460 --> 00:01:43,800
Let's open up the
docker compose yaml file

35
00:01:44,130 --> 00:01:47,257
and add a new service
called nets that will run beaten

36
00:01:47,550 --> 00:01:48,550
server.

37
00:01:50,010 --> 00:01:54,870
Let's also add a new environment variable
called natsu rl to the workflow service and

38
00:01:54,870 --> 00:01:57,690
virtual facilities services
that will contain the u r l

39
00:01:57,900 --> 00:01:59,650
of the nats server.

40
00:02:00,900 --> 00:02:03,210
Instead of using
local host as a hosts

41
00:02:03,480 --> 00:02:07,150
we used nats which is the name
of the service we defined above.

42
00:02:07,200 --> 00:02:11,190
This is because docker compose automatically
creates a network for our services

43
00:02:11,460 --> 00:02:14,610
and adds a dns server to it
that resolves service names

44
00:02:14,850 --> 00:02:17,020
the corresponding ip addresses.

45
00:02:17,850 --> 00:02:21,630
This means that we can
use service names instead

46
00:02:21,630 --> 00:02:22,630
of ip addresses to
connect to other services.

47
00:02:22,740 --> 00:02:23,740
Also.

48
00:02:23,790 --> 00:02:28,450
Or two to two is the default port
that the nats server lessons of.

49
00:02:28,710 --> 00:02:29,400
And lastly.

50
00:02:29,730 --> 00:02:33,520
Let's make sure both services
depend on the nats service.

51
00:02:36,690 --> 00:02:37,770
Let's save our changes.

52
00:02:38,100 --> 00:02:42,840
Open up the main ts file in the workflows
service application and update the

53
00:02:42,870 --> 00:02:45,840
bootstrap function to
convert our http application

54
00:02:46,110 --> 00:02:49,510
we hybrid application
that supports both http

55
00:02:49,620 --> 00:02:51,700
and nats entry points.

56
00:02:53,160 --> 00:02:57,540
We'll use connect
microservice to connect to

57
00:02:57,540 --> 00:02:58,540
the nats server and
start all microservices

58
00:02:58,770 --> 00:03:00,191
restart the microservice.

59
00:03:00,570 --> 00:03:03,000
Will also need to import
the transport enum

60
00:03:03,360 --> 00:03:08,110
and microservice options interfaces
from the nastiest microservices package.

61
00:03:08,700 --> 00:03:10,770
Note that instead
of using nest factory

62
00:03:10,950 --> 00:03:12,250
create microservice.

63
00:03:12,480 --> 00:03:14,580
We're using the nes
factory create method

64
00:03:14,850 --> 00:03:20,650
to carry a hybrid application that
supports both http and nats entry points.

65
00:03:21,150 --> 00:03:24,900
This is because we want
to keep the http health

66
00:03:24,909 --> 00:03:25,909
check and points
available in or application.

67
00:03:26,520 --> 00:03:27,480
Great so next up

68
00:03:27,750 --> 00:03:30,150
let's navigate to the
workflows controller file

69
00:03:30,450 --> 00:03:32,430
and up the the create
method to use the

70
00:03:32,610 --> 00:03:33,600
message pattern

71
00:03:33,810 --> 00:03:34,440
decorator.

72
00:03:34,770 --> 00:03:36,490
Instead of the post decorate.

73
00:03:38,790 --> 00:03:42,570
Workflows create
will be the name of the

74
00:03:42,570 --> 00:03:43,170
message pattern that
will use to send messages

75
00:03:43,320 --> 00:03:45,295
to the workflow service.

76
00:03:45,480 --> 00:03:49,410
Will use the same message
pattern in the virtual facility

77
00:03:49,410 --> 00:03:51,160
service to send messages
to the workflows service.

78
00:03:52,440 --> 00:03:57,250
Let's also use the payload decorator
instead of the body decorator now.

79
00:03:57,810 --> 00:03:58,110
Great

80
00:03:58,350 --> 00:04:02,320
let's save our changes and head over
to the virtual facility application now.

81
00:04:02,490 --> 00:04:02,880
Here.

82
00:04:03,210 --> 00:04:07,020
Let's create a new constance
ts file in the source directory

83
00:04:07,200 --> 00:04:08,890
and at the fallen code.

84
00:04:10,710 --> 00:04:12,240
Workflows service constant.

85
00:04:12,690 --> 00:04:16,530
Will represent our
injection token that will used

86
00:04:16,530 --> 00:04:18,160
to inject the workflows
service client to providers.

87
00:04:19,500 --> 00:04:19,950
Next.

88
00:04:20,310 --> 00:04:22,440
Let's open up the
buildings module file

89
00:04:22,710 --> 00:04:25,063
and import the clients module.

90
00:04:26,820 --> 00:04:31,332
Let's pass the client configuration to
the clients module dot register method.

91
00:04:31,770 --> 00:04:33,670
And last but not least.

92
00:04:33,840 --> 00:04:37,797
Let's open up the buildings
service file in eject the

93
00:04:37,797 --> 00:04:39,790
workflow service client into
the buildings service class.

94
00:04:42,090 --> 00:04:42,960
Why a proxy

95
00:04:43,260 --> 00:04:47,280
is a client instance abstraction the
hides the internal implementation of the

96
00:04:47,280 --> 00:04:49,720
currently selected
transport strategy.

97
00:04:49,770 --> 00:04:52,300
In our case it will
be the nats client.

98
00:04:52,440 --> 00:04:53,760
Thanks to this abstraction

99
00:04:53,970 --> 00:04:57,300
we can easily switch
between different transport

100
00:04:57,300 --> 00:04:59,590
strategies without having
to significantly modifier coat.

101
00:05:00,300 --> 00:05:01,830
With this provider injected

102
00:05:02,130 --> 00:05:04,290
what scroll down to the
create workflow method

103
00:05:04,620 --> 00:05:08,890
and updated to use the workflows service
client instead of the fetch function.

104
00:05:13,680 --> 00:05:16,890
Since send returns and
rx Jess observable stream

105
00:05:17,040 --> 00:05:19,440
which is useful when
streaming data between services

106
00:05:19,740 --> 00:05:20,580
we need to use the.

107
00:05:21,030 --> 00:05:22,110
Let's save our changes.

108
00:05:22,440 --> 00:05:25,740
Open up the terminal in run the
following command to start everything up.

109
00:05:26,550 --> 00:05:28,600
Docker compose up.

110
00:05:30,120 --> 00:05:32,100
The test of everything's
working as expected

111
00:05:32,400 --> 00:05:35,080
let's use curl to
create a new building.

112
00:05:36,360 --> 00:05:36,780
Great.

113
00:05:37,260 --> 00:05:39,330
As we can see the
request was successful

114
00:05:39,502 --> 00:05:42,190
we can see the response
body back in the console.

115
00:05:42,840 --> 00:05:43,380
Also

116
00:05:43,530 --> 00:05:47,250
if we switched to the other
terminal window we can

117
00:05:47,250 --> 00:05:49,120
see that a new workflow
was created as well perfect.

118
00:05:49,950 --> 00:05:51,270
So as we can see.

119
00:05:51,630 --> 00:05:56,350
This is how simple it can be to
convert from http to nats Ines Jess.

120
00:05:56,670 --> 00:05:58,620
Now just before we
wrap up this lesson.

121
00:05:59,070 --> 00:06:01,770
Let's also turned the
validation on in both services.

122
00:06:02,100 --> 00:06:05,580
Recovered validation
in the fundamentals

123
00:06:05,580 --> 00:06:05,670
course in case you want
to learn more about it.

124
00:06:06,570 --> 00:06:06,930
So

125
00:06:07,230 --> 00:06:11,430
let's open up the main
t s file in the workflows

126
00:06:11,430 --> 00:06:12,300
service application and
update the bootstrap function

127
00:06:12,480 --> 00:06:14,140
to enable validation.

128
00:06:14,820 --> 00:06:15,420
Also

129
00:06:15,660 --> 00:06:19,740
we need to update the connect
microservice method to instructed

130
00:06:19,740 --> 00:06:22,210
to inherit the global pipes
from the http application.

131
00:06:24,120 --> 00:06:24,810
And lastly

132
00:06:25,110 --> 00:06:26,100
us to the same thing

133
00:06:26,280 --> 00:06:28,210
in the virtual
facility application.

134
00:06:33,870 --> 00:06:34,500
And that's it

135
00:06:34,680 --> 00:06:36,280
we're all set for now.

