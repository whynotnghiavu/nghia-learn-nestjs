1
00:00:00,990 --> 00:00:01,680
In this lesson

2
00:00:01,920 --> 00:00:06,090
will configure docker
compose to run our virtual

3
00:00:06,090 --> 00:00:07,090
facility and workflows
service applications.

4
00:00:07,260 --> 00:00:10,110
As was provision a dedicated
postgres sql database

5
00:00:10,380 --> 00:00:11,770
or each application.

6
00:00:12,570 --> 00:00:14,280
If you're not familiar
with docker compose.

7
00:00:14,670 --> 00:00:18,400
It's a tool for defining and running
multi container docker applications.

8
00:00:19,110 --> 00:00:23,850
With docker compose we can use a yaml
file to configure our application services

9
00:00:24,060 --> 00:00:24,450
then.

10
00:00:24,810 --> 00:00:25,980
With a single command

11
00:00:26,220 --> 00:00:29,530
we can create and start all the
services from our configuration.

12
00:00:30,150 --> 00:00:33,960
Let's start by creating a
new docker dash compose

13
00:00:33,960 --> 00:00:34,960
yeah html file in the
root of our project.

14
00:00:35,070 --> 00:00:36,690
This file will contain
the configuration

15
00:00:36,930 --> 00:00:39,010
for our docker compose setup.

16
00:00:40,140 --> 00:00:43,840
Again you can find the content
for this file below the course video.

17
00:00:44,130 --> 00:00:45,130
Also.

18
00:00:45,180 --> 00:00:49,050
We will need a dockerfile
that will be used to

19
00:00:49,050 --> 00:00:50,050
build the docker image
for our applications.

20
00:00:50,130 --> 00:00:51,780
Let's create a new dockerfile

21
00:00:52,020 --> 00:00:54,790
in the root of our project
and add the following code.

22
00:00:58,650 --> 00:00:59,730
With this violent place

23
00:00:59,850 --> 00:01:02,830
as head over to our terminal
and run the following commands.

24
00:01:03,420 --> 00:01:04,680
Docker compose

25
00:01:04,860 --> 00:01:05,860
up.

26
00:01:12,244 --> 00:01:14,070
Test that everything
is working as expected.

27
00:01:14,400 --> 00:01:17,350
Let's use curl to create
a new building again.

28
00:01:20,130 --> 00:01:20,940
As we can see

29
00:01:21,120 --> 00:01:23,560
the request was
not yet successful.

30
00:01:23,910 --> 00:01:27,510
This is because we
need to update the virtual

31
00:01:27,510 --> 00:01:28,890
facility application to use
the workflow service host.

32
00:01:29,310 --> 00:01:30,870
Instead of using local host.

33
00:01:31,380 --> 00:01:34,780
Since now or applications are
running inside of docker containers.

34
00:01:35,220 --> 00:01:36,000
To fix this

35
00:01:36,240 --> 00:01:40,230
let's open up the buildings service ts
file an update the create workflow method.

36
00:01:40,646 --> 00:01:44,740
Use the workflows dash
service host instead of local host.

37
00:01:48,360 --> 00:01:50,560
Let's try that curl
command again.

38
00:01:51,840 --> 00:01:52,710
And as we can see

39
00:01:52,890 --> 00:01:55,630
the request was
now successful great.

40
00:01:56,520 --> 00:02:01,030
However our services don't connect
to their corresponding databases yet.

41
00:02:01,080 --> 00:02:03,900
As this is something we've already
covered in the fundamentals course

42
00:02:04,140 --> 00:02:07,420
will skip over the details and
just move right into the code.

43
00:02:08,160 --> 00:02:08,580
First

44
00:02:08,790 --> 00:02:11,110
when you to install some
required dependencies.

45
00:02:11,370 --> 00:02:16,079
Will be using type r m for
this courses or m needs but of

46
00:02:16,079 --> 00:02:17,070
course you may need to use
something completely different

47
00:02:17,340 --> 00:02:19,740
in your app or
organization but don't worry.

48
00:02:20,070 --> 00:02:22,027
Everything we're doing
in this course would all still

49
00:02:22,230 --> 00:02:22,650
the same.

50
00:02:23,280 --> 00:02:26,010
So let's go ahead and install
the nastiest slashed her or him.

51
00:02:26,520 --> 00:02:27,150
A bar him

52
00:02:27,480 --> 00:02:28,920
and pg a proposed gross.

53
00:02:29,430 --> 00:02:31,870
Once the installation
process is complete.

54
00:02:31,921 --> 00:02:33,760
Will create two entities.

55
00:02:33,900 --> 00:02:34,410
Building

56
00:02:34,620 --> 00:02:36,610
in the virtual
facility application.

57
00:02:36,990 --> 00:02:39,730
And workflow in the
workflows application.

58
00:02:40,350 --> 00:02:43,180
As these entities will live
in separate applications.

59
00:02:43,380 --> 00:02:46,740
We won't be able to declare a one
too many relationship between them.

60
00:02:47,460 --> 00:02:50,820
Instead we'll use a building
ID field in the workflow entity

61
00:02:51,120 --> 00:02:54,430
to store the idea of the building
to which the workflow belongs.

62
00:02:55,710 --> 00:02:56,250
Next

63
00:02:56,550 --> 00:03:00,750
let's make sure we update the virtual
facility application module to import the type

64
00:03:00,751 --> 00:03:05,650
r ram module and configure it to connect
to the virtual dash facility database.

65
00:03:11,700 --> 00:03:15,840
We'll also need to update the
workflows service application

66
00:03:15,870 --> 00:03:17,890
module to connect to the
workflows service database.

67
00:03:22,590 --> 00:03:24,070
With this and place.

68
00:03:24,180 --> 00:03:26,070
Let's open up the
building service file

69
00:03:26,310 --> 00:03:28,950
and use the type or
ram repository here

70
00:03:29,160 --> 00:03:31,630
replacing all of the
mocked methods.

71
00:03:36,930 --> 00:03:37,560
Next up

72
00:03:37,860 --> 00:03:43,080
let's update the buildings module t s file
to import type or a module dot for feature.

73
00:03:43,410 --> 00:03:46,210
Passing in the building
entity to the array.

74
00:03:46,260 --> 00:03:49,000
That the service could
inject the buildings repository.

75
00:03:49,590 --> 00:03:50,490
And likewise

76
00:03:50,670 --> 00:03:55,020
let's update the workflows
service he has file

77
00:03:55,020 --> 00:03:56,020
replacing all the mock
methods here as well.

78
00:03:59,910 --> 00:04:02,040
And let's not forget
the workflows module

79
00:04:02,370 --> 00:04:05,220
and let's make sure we import
the type or a module for feature

80
00:04:05,430 --> 00:04:08,350
passing in the workflow
entity here as well.

81
00:04:08,610 --> 00:04:09,610
Great.

82
00:04:11,190 --> 00:04:14,310
Once again we're moving fast here
since we've covered all of these basic

83
00:04:14,550 --> 00:04:16,260
m concepts and the
fundamentals course.

84
00:04:16,768 --> 00:04:19,980
You could find the code to copy
paste below the course video as always.

85
00:04:20,490 --> 00:04:21,930
Moving on to newer topics

86
00:04:22,200 --> 00:04:25,660
to reuse data transfer object
classes between applications.

87
00:04:25,770 --> 00:04:29,700
When need to generate a new
workflows library using the nastiest July.

88
00:04:30,090 --> 00:04:32,400
One head over to our terminal
and run the following command.

89
00:04:32,850 --> 00:04:34,110
Nest g lib

90
00:04:34,320 --> 00:04:35,320
workflows.

91
00:04:38,670 --> 00:04:42,270
Let's start by removing
the unnecessary auto

92
00:04:42,270 --> 00:04:43,270
generated files from
the workflows library.

93
00:04:48,660 --> 00:04:49,230
Next up.

94
00:04:49,620 --> 00:04:51,660
Will create a new
detail directory

95
00:04:51,990 --> 00:04:55,590
and create the create dash
workflow dot d t o duck ts file.

96
00:04:55,950 --> 00:04:59,920
Representing the data transfer
object for creating a new workflow.

97
00:05:00,300 --> 00:05:01,260
Before we proceed

98
00:05:01,470 --> 00:05:05,430
let's install the class
transformer and class val

99
00:05:05,460 --> 00:05:07,210
alligator packages that will
use for validation purposes.

100
00:05:07,530 --> 00:05:08,100
Finally.

101
00:05:08,430 --> 00:05:11,160
Has declared the create
workflow detail class

102
00:05:11,280 --> 00:05:14,050
and add the necessary
validation decorators.

103
00:05:14,820 --> 00:05:18,750
Next to this file let's create the
update dash workflow dot d t n t s file

104
00:05:18,780 --> 00:05:22,540
represented the data transfer
object for updating a workflow.

105
00:05:22,980 --> 00:05:23,610
Lastly

106
00:05:23,880 --> 00:05:27,700
let's update the index t s file
to export both of these classes.

107
00:05:27,870 --> 00:05:28,870
Great.

108
00:05:29,400 --> 00:05:30,690
Now with the someplace.

109
00:05:31,050 --> 00:05:34,830
Let's open up our workflows service
file an update the correct method their

110
00:05:35,220 --> 00:05:36,750
to use our newly created

111
00:05:37,020 --> 00:05:39,490
great work float
data transfer object.

112
00:05:39,900 --> 00:05:44,130
We can also remove the auto-generated
detail classes here which were previously

113
00:05:44,130 --> 00:05:46,900
generated by the nest
g resource schematic.

114
00:05:47,790 --> 00:05:48,720
Another thing to note.

115
00:05:49,050 --> 00:05:53,190
Let's not forget to update
the workflows controller file

116
00:05:53,190 --> 00:05:55,390
to use these new data
transfer object classes as well.

117
00:05:55,710 --> 00:05:57,810
Rate so let's save our changes

118
00:05:58,200 --> 00:06:00,150
and to achieve
maximum type safety.

119
00:06:00,480 --> 00:06:02,100
Let's update the
buildings service t

120
00:06:02,250 --> 00:06:02,670
file

121
00:06:02,880 --> 00:06:06,180
to use the workflows library
data transfer object class

122
00:06:06,360 --> 00:06:07,360
also.

123
00:06:09,870 --> 00:06:10,870
Excellent.

124
00:06:11,340 --> 00:06:14,550
Since now our service returns
Jason instead of plain text.

125
00:06:14,910 --> 00:06:16,890
Let's make sure to
change that rez dot

126
00:06:17,040 --> 00:06:19,690
text method to rest up Jason.

127
00:06:21,060 --> 00:06:23,070
And lastly for
debugging purposes.

128
00:06:23,400 --> 00:06:25,870
Let's logged a response
body to the console.

129
00:06:37,860 --> 00:06:38,820
With this in place.

130
00:06:39,180 --> 00:06:41,400
Let's save our changes
head over to our terminal

131
00:06:41,520 --> 00:06:43,570
i run the following
curl command.

132
00:06:44,550 --> 00:06:45,450
As we can see

133
00:06:45,750 --> 00:06:50,125
the request was successful and we can
see the response body in the console great.

134
00:06:50,940 --> 00:06:53,310
This means that we successfully
created a new building.

135
00:06:53,814 --> 00:06:57,180
Let's switch to the other
terminal window and

136
00:06:57,180 --> 00:06:58,660
check to see if the
workflow was created as well.

137
00:06:58,770 --> 00:06:59,280
Perfect.

138
00:06:59,700 --> 00:07:00,390
As we can see

139
00:07:00,630 --> 00:07:02,220
there's a new
workflow with the name

140
00:07:02,430 --> 00:07:03,390
my workflow

141
00:07:03,660 --> 00:07:05,370
and the building
ID is set to one

142
00:07:05,550 --> 00:07:07,380
just as we passed and
and are curl command

143
00:07:07,650 --> 00:07:08,070
rate.

144
00:07:08,520 --> 00:07:11,280
We now have to microservices
that communicate with each other

145
00:07:11,550 --> 00:07:13,410
all while using
separate databases.

146
00:07:13,740 --> 00:07:15,720
Were starting to make
some real progress already

147
00:07:15,930 --> 00:07:16,930
awesome.

