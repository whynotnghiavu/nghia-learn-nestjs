1
00:00:01,200 --> 00:00:01,950
In this lesson

2
00:00:02,160 --> 00:00:03,690
will create to new services.

3
00:00:04,050 --> 00:00:08,070
Alarms classifier service and notification
service that will be responsible for

4
00:00:08,070 --> 00:00:11,220
classifying alarms and
notifying other services or users

5
00:00:11,400 --> 00:00:12,760
about the alarm.

6
00:00:13,470 --> 00:00:14,910
In a real world application

7
00:00:15,060 --> 00:00:20,370
the alarm classifier
service would classify

8
00:00:20,400 --> 00:00:21,400
alarms or alarm groups
using ai or ml algorithms.

9
00:00:22,410 --> 00:00:27,000
This service would use a
pre-trained model to classify

10
00:00:27,000 --> 00:00:28,690
alarms is either critical
non critical or invalid.

11
00:00:28,830 --> 00:00:30,450
With the microservices
architecture

12
00:00:30,720 --> 00:00:34,110
were free to use any programming language
or framework to implement our services.

13
00:00:34,470 --> 00:00:36,930
So for example this service
could be implemented in python

14
00:00:37,350 --> 00:00:38,460
and simply expose

15
00:00:38,760 --> 00:00:39,960
http endpoints

16
00:00:40,200 --> 00:00:43,543
or connect to a nat server to
communicate with other our services.

17
00:00:44,160 --> 00:00:48,570
Similarly the notification
service will be responsible

18
00:00:48,570 --> 00:00:49,890
for notifying other services
or users about the alarm.

19
00:00:50,220 --> 00:00:50,970
For example

20
00:00:51,270 --> 00:00:54,540
it could send an email to the building
manager or department about the alarm.

21
00:00:54,900 --> 00:00:58,300
It could also send an sms
message to the maintenance team.

22
00:00:59,130 --> 00:01:02,640
Since all of these functionalities are
outside of the scope of this course will

23
00:01:02,640 --> 00:01:07,008
implement these services
as mock services that

24
00:01:07,008 --> 00:01:08,080
will simply log the received
alarms of the console.

25
00:01:08,280 --> 00:01:08,700
So.

26
00:01:09,030 --> 00:01:12,450
Let's start by generating a new
alarms classifier service application

27
00:01:12,750 --> 00:01:14,770
using the nes jsc alive.

28
00:01:15,390 --> 00:01:18,180
So let's head over to our terminal
and run the following command.

29
00:01:18,630 --> 00:01:22,270
Nest g app alarms dash
classifier dash service.

30
00:01:22,530 --> 00:01:23,040
Also.

31
00:01:23,370 --> 00:01:28,360
Must generate the notification service
with nest g app notifications dash service.

32
00:01:29,520 --> 00:01:34,180
Next up let's open up the docker
compose yaml file and add new services.

33
00:01:35,250 --> 00:01:38,380
Let's focus on the alarms
classifier service first.

34
00:01:38,580 --> 00:01:40,620
Before we can add a
new message handler.

35
00:01:40,980 --> 00:01:42,960
Let's head over
to the main t s file

36
00:01:43,320 --> 00:01:47,880
and follow the same steps we did in previous
lessons to convert our http application

37
00:01:48,150 --> 00:01:50,220
to a hybrid app
that supports both

38
00:01:50,400 --> 00:01:51,210
http

39
00:01:51,390 --> 00:01:53,380
and nats entry points.

40
00:01:58,590 --> 00:01:59,220
Next up

41
00:01:59,400 --> 00:02:03,900
let's open the alarms classifier service
controller file and replaced the contents of

42
00:02:03,900 --> 00:02:06,060
the alarms classifier
service controller class

43
00:02:06,270 --> 00:02:07,870
with the following code.

44
00:02:09,030 --> 00:02:14,280
The classify alarm method
shown here will randomly

45
00:02:14,280 --> 00:02:15,450
return critical non critical
or invalid categories

46
00:02:15,630 --> 00:02:16,770
as we've mentioned earlier

47
00:02:17,040 --> 00:02:21,060
in a real world application this service
would classify alarms or alarm groups using

48
00:02:21,210 --> 00:02:24,160
artificial intelligence or
machine learning algorithms.

49
00:02:24,510 --> 00:02:24,870
So.

50
00:02:25,200 --> 00:02:29,320
Let's save our changes and head over to the
notification service application though.

51
00:02:29,580 --> 00:02:33,240
Before we can add a new event handler let's
head over to the main t s file again and

52
00:02:33,240 --> 00:02:34,860
follow the same
steps we just did

53
00:02:35,100 --> 00:02:38,010
and convert our http
application to a hybrid one

54
00:02:38,310 --> 00:02:39,810
supporting both http

55
00:02:40,020 --> 00:02:41,860
and data entry points.

56
00:02:42,570 --> 00:02:46,830
By the way instead of manually updating
this main t s file every time we generate a

57
00:02:46,830 --> 00:02:51,360
new application we
could create a new custom

58
00:02:51,360 --> 00:02:52,930
schematic that will do all
of this and summed for us.

59
00:02:53,340 --> 00:02:57,210
Check out the advanced concepts course
extension link below the video in the lesson

60
00:02:57,211 --> 00:03:00,430
description if you're interested
in learning more about this topic.

61
00:03:01,470 --> 00:03:05,970
Next up let's open the notification service
controller file an replaced the contents

62
00:03:05,970 --> 00:03:09,610
of the notification service controller
class with the following code.

63
00:03:10,590 --> 00:03:14,370
Now that we are both
services and place let's

64
00:03:14,370 --> 00:03:15,090
navigate to the alarms
service application

65
00:03:15,300 --> 00:03:18,370
and create a constants t s file.

66
00:03:26,940 --> 00:03:29,980
And then add the fallen
constant inside of it.

67
00:03:30,390 --> 00:03:33,030
Will use this constant
to register a new client

68
00:03:33,180 --> 00:03:35,880
with the use of clients module
in the alarm service module t

69
00:03:36,030 --> 00:03:37,030
file.

70
00:03:38,670 --> 00:03:43,050
Next up let's open up the alarm service
controller file in inject message broker

71
00:03:43,050 --> 00:03:45,557
client using the
inject decorating.

72
00:03:53,760 --> 00:03:57,330
Now using the orchestrator approach
that we introduced in a previous lesson.

73
00:03:57,750 --> 00:04:01,170
Let's update the create method
here to first classify the alarm

74
00:04:01,410 --> 00:04:04,240
and then notify other
services about it.

75
00:04:15,540 --> 00:04:18,120
Let's save our changes
and head over to the terminal

76
00:04:18,300 --> 00:04:20,280
and run the following
command to start everything up.

77
00:04:20,580 --> 00:04:22,450
Docker compose up.

78
00:04:22,920 --> 00:04:26,200
Let's wait till everything is up
and running and check the logs.

79
00:04:36,120 --> 00:04:36,960
And there we have it

80
00:04:37,110 --> 00:04:41,550
as we can see the alarm
service is now receiving

81
00:04:41,550 --> 00:04:42,510
the new alarms from the
alarms generator service.

82
00:04:42,870 --> 00:04:45,420
Classifying them using
the alarms classifier service

83
00:04:45,870 --> 00:04:48,180
and notifying other
services about the alarm

84
00:04:48,360 --> 00:04:50,590
using the notification service.

85
00:04:50,790 --> 00:04:51,790
Fantastic.

86
00:04:53,310 --> 00:04:57,150
Recovered quite a lot in this lesson but
hopefully you can see the power of the

87
00:04:57,150 --> 00:04:59,290
orchestration approach
to microservices.

88
00:04:59,760 --> 00:05:04,020
We are now able to fairly
easily manage an coordinate

89
00:05:04,020 --> 00:05:05,470
the interactions between
multiple microservices

90
00:05:05,610 --> 00:05:08,290
to achieve any
specific business goal.

