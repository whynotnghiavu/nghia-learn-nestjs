1
00:00:00,840 --> 00:00:02,820
With the database
per service pattern

2
00:00:03,120 --> 00:00:07,560
each service has its own
dedicated database that

3
00:00:07,560 --> 00:00:08,740
cannot be directly access
by any other services.

4
00:00:08,940 --> 00:00:10,350
This pattern is usually used

5
00:00:10,650 --> 00:00:14,110
when we want to achieve a high
level of isolation between services.

6
00:00:15,060 --> 00:00:18,300
It's also very useful
for one is different

7
00:00:18,300 --> 00:00:19,300
database technologies
for different services.

8
00:00:19,860 --> 00:00:24,016
So there are a few different ways to keep
a services persistence they'd a private.

9
00:00:24,390 --> 00:00:26,290
Private tables per service.

10
00:00:26,490 --> 00:00:27,690
This means that each service.

11
00:00:28,020 --> 00:00:31,930
Owns a set of tables that must
only be accessed by that service.

12
00:00:32,580 --> 00:00:35,680
Other services cannot
access these tables director.

13
00:00:35,790 --> 00:00:38,400
If other services need to
query data in these tables.

14
00:00:38,730 --> 00:00:41,260
They must do it through
the owning service.

15
00:00:42,090 --> 00:00:43,780
Scheme up her service.

16
00:00:43,980 --> 00:00:47,830
Each service has a database
schema that's private to that service.

17
00:00:48,330 --> 00:00:50,980
And database server per service.

18
00:00:51,210 --> 00:00:53,820
Each service has its own
dedicated database server.

19
00:00:54,270 --> 00:00:58,470
This approach requires
much more resources but

20
00:00:58,470 --> 00:00:59,470
it also provides a
higher level of isolation.

21
00:01:00,450 --> 00:01:04,170
While having a separate
database server per service

22
00:01:04,170 --> 00:01:05,800
generally makes a lot of
sense for larger organizations.

23
00:01:06,030 --> 00:01:08,290
Where teams are working
on different services.

24
00:01:08,430 --> 00:01:11,410
It's not always the best
choice for smaller organizations.

25
00:01:11,784 --> 00:01:13,470
Of the drawbacks
of this approach are

26
00:01:13,770 --> 00:01:15,970
increased complexity and cost.

27
00:01:16,050 --> 00:01:20,400
Managing distributed
transactions is significantly

28
00:01:20,400 --> 00:01:21,400
more complex than
local transit actions.

29
00:01:21,510 --> 00:01:24,420
Some queries may require
data from multiple services.

30
00:01:24,780 --> 00:01:28,800
Which means we need
to implement joins across

31
00:01:28,800 --> 00:01:29,520
services which can
lead to increased latency

32
00:01:29,700 --> 00:01:30,810
increased complexity

33
00:01:31,050 --> 00:01:32,050
etc.

34
00:01:33,180 --> 00:01:33,960
On the other hand.

35
00:01:34,320 --> 00:01:38,640
Having a shared database server for all
services is also considered a bad practice.

36
00:01:39,000 --> 00:01:41,890
As a introduces tight
coupling between services.

37
00:01:42,150 --> 00:01:44,250
If one service changes
the database schema.

38
00:01:44,610 --> 00:01:46,770
All other services need
to be updated as well.

39
00:01:47,400 --> 00:01:50,610
Also if one service has a
bug that corrupts the database.

40
00:01:51,030 --> 00:01:53,310
All other services will
be affected by this as well.

41
00:01:53,940 --> 00:01:57,390
Coordinating schema changes
migrations etc between services

42
00:01:57,690 --> 00:01:59,100
can also be very challenging

43
00:01:59,400 --> 00:02:01,120
but not to say impossible.

44
00:02:02,460 --> 00:02:06,120
Therefore in this course will be using
the database per service approach.

45
00:02:06,450 --> 00:02:10,270
Although it may make things overly
complex for our small application.

46
00:02:10,440 --> 00:02:14,070
A may not be the best choice for our
own product or organizations use case.

47
00:02:14,550 --> 00:02:17,880
This remember to always make sure
to carefully consider the pros and cons

48
00:02:18,150 --> 00:02:20,400
before deciding on an
architect you for your system.

49
00:02:20,760 --> 00:02:23,350
As it's not a one size
for it's all solution.

