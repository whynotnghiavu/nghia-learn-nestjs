1
00:00:00,960 --> 00:00:01,770
In this lesson

2
00:00:02,010 --> 00:00:04,410
we're going to implement
the read side of the system.

3
00:00:04,930 --> 00:00:06,120
The sake of simplicity

4
00:00:06,420 --> 00:00:10,590
we will use the same application for both
the read and right sides to avoid the need

5
00:00:10,590 --> 00:00:14,320
for setting up a message broker
to communicate between services.

6
00:00:14,760 --> 00:00:18,990
In a real world scenario
we would want to have

7
00:00:18,990 --> 00:00:19,710
a separately deployed
service for the read side

8
00:00:19,830 --> 00:00:23,290
which would subscribe to the
events published by the right side.

9
00:00:23,580 --> 00:00:24,420
In this course

10
00:00:24,690 --> 00:00:25,890
will be keeping things simple

11
00:00:26,160 --> 00:00:30,160
will be wanted you to be aware that ideally
you would want to have that separation.

12
00:00:30,450 --> 00:00:32,500
All right so let's get started.

13
00:00:33,030 --> 00:00:34,080
Or the read side

14
00:00:34,260 --> 00:00:38,400
will use the mongo db database to
store the normalized views of the data.

15
00:00:38,940 --> 00:00:40,349
To integrate with mongo db.

16
00:00:40,710 --> 00:00:45,220
Will use the nes js mongers package
and install by running the fallen command.

17
00:00:45,840 --> 00:00:47,740
Once the installation
is complete.

18
00:00:47,910 --> 00:00:52,690
Us up the our docker compose yaml
file to include the mongo db service.

19
00:00:54,090 --> 00:00:58,500
Let's save our changes
head over to the terminal ants

20
00:00:58,500 --> 00:01:00,330
thirty mongo db service by
running the docker compose up

21
00:01:00,450 --> 00:01:01,290
dash d

22
00:01:01,500 --> 00:01:03,430
read dashti be command.

23
00:01:04,230 --> 00:01:07,140
Next let's navigate
to our core module file

24
00:01:07,260 --> 00:01:09,120
an import the mongoose module

25
00:01:09,360 --> 00:01:11,471
when the driver is set to aura.

26
00:01:13,110 --> 00:01:14,110
Great.

27
00:01:14,820 --> 00:01:20,550
So now if some one
selects o r m as the driver

28
00:01:20,640 --> 00:01:21,330
the system will use mongo
db for reads and posts.

29
00:01:21,750 --> 00:01:23,440
For rights databases.

30
00:01:23,820 --> 00:01:25,350
While with the in-memory driver

31
00:01:25,560 --> 00:01:30,040
it will use the in-memory collection for
both the read and right sides of our system.

32
00:01:30,180 --> 00:01:34,650
Now to better understand why having a
separate read only data source may be useful

33
00:01:34,830 --> 00:01:37,870
let's add a few more
attributes to the alarm entity.

34
00:01:43,230 --> 00:01:47,200
Okay so we added three new
attributes to our alarm entity here.

35
00:01:47,460 --> 00:01:48,300
Triggered at.

36
00:01:48,750 --> 00:01:51,670
Which is the date and time
when the alarm was trigger.

37
00:01:51,840 --> 00:01:56,590
Is acknowledged a boolean flag indicating
whether the alarm has been acknowledged.

38
00:01:57,300 --> 00:01:58,600
And items.

39
00:01:58,650 --> 00:02:03,400
Which as a list of alarm items or
alarm triggers that triggered the alarm.

40
00:02:03,720 --> 00:02:06,060
Since we don't have
the alarm item entity yet

41
00:02:06,270 --> 00:02:08,201
let's go ahead
and create it now.

42
00:02:13,620 --> 00:02:15,240
With this entity and place.

43
00:02:15,660 --> 00:02:18,420
Our right side database
schema will have to tables now.

44
00:02:18,721 --> 00:02:19,470
Alarms

45
00:02:19,680 --> 00:02:21,850
and alarm underscore items.

46
00:02:22,320 --> 00:02:26,370
The alarm underscore items table will
have a foreign key to the alarms table.

47
00:02:26,790 --> 00:02:30,760
Indicating which alarmed the
specific alarm item belongs to.

48
00:02:32,160 --> 00:02:37,210
Let's now create the the normalized alarm
schema for the read side of our system.

49
00:02:37,440 --> 00:02:38,970
Inside the new scheme as folder.

50
00:02:39,390 --> 00:02:43,620
Let's create a new file called
materialized alarm view schema dot t s

51
00:02:43,950 --> 00:02:45,911
and at the following
code inside.

52
00:02:56,220 --> 00:02:57,150
As we can see

53
00:02:57,390 --> 00:03:00,810
the materialized alarm view
schema embeds the items attribute.

54
00:03:01,140 --> 00:03:03,810
Which means that the
materialized alarm view document.

55
00:03:04,200 --> 00:03:06,450
Will contain all the
information right away.

56
00:03:06,930 --> 00:03:09,270
Without the need to
join the alarm items table

57
00:03:09,480 --> 00:03:12,760
which will help speed up
our read operations and.

58
00:03:12,810 --> 00:03:17,130
While this is still a very basic example
it's somewhat demonstrates the benefits of

59
00:03:17,130 --> 00:03:19,600
having a separate
read only model.

60
00:03:19,740 --> 00:03:21,550
In a real world scenario.

61
00:03:21,630 --> 00:03:23,850
Entities consists of
many more attributes

62
00:03:24,000 --> 00:03:26,680
and that is where
secure as really shines.

63
00:03:27,360 --> 00:03:28,170
For example

64
00:03:28,320 --> 00:03:32,250
in alarm entity could have
a meta data attribute which

65
00:03:32,250 --> 00:03:34,060
will contain a lot of
information about the alarm.

66
00:03:34,110 --> 00:03:35,880
Such as the
location of the alarm.

67
00:03:36,210 --> 00:03:38,190
The name of the device
that triggered the alarm

68
00:03:38,670 --> 00:03:42,040
and the name of the supervisor
who acknowledge the alarm etc.

69
00:03:42,180 --> 00:03:46,410
This information might be required by other
services the operate on reported alarms

70
00:03:46,440 --> 00:03:49,150
let's say to perform
there own business logic.

71
00:03:49,440 --> 00:03:51,930
But only a few attributes
are required to just

72
00:03:52,080 --> 00:03:53,190
the alarm on the you why.

73
00:03:53,820 --> 00:03:58,320
This is just an example
of how having require

74
00:03:58,320 --> 00:03:59,320
data baked in could really
help our performance.

75
00:04:00,540 --> 00:04:02,010
Okay so before we move on

76
00:04:02,220 --> 00:04:07,600
let's also update the in-memory
driver to contain a new alarm item entity.

77
00:04:11,880 --> 00:04:13,800
Let's also update
the alarm entity.

78
00:04:14,130 --> 00:04:15,970
Who contain some new attributes.

79
00:04:20,160 --> 00:04:21,160
Excellent.

80
00:04:21,390 --> 00:04:25,240
But this change in place our
infrastructure layer is all set.

81
00:04:25,650 --> 00:04:29,580
There are a few more repetitive tasks we
need to do before we can start implementing

82
00:04:29,640 --> 00:04:31,990
be read side of
our system though.

83
00:04:32,430 --> 00:04:34,500
Let's start by heading
over to our domain layer

84
00:04:34,740 --> 00:04:37,830
unless create a new domain
class called alarm item

85
00:04:38,190 --> 00:04:40,150
and add the
following code inside.

86
00:04:42,090 --> 00:04:44,700
As you may have
already noticed with ddd

87
00:04:44,940 --> 00:04:46,800
everything is strictly organized

88
00:04:46,920 --> 00:04:48,810
and layers don't
leak into each other.

89
00:04:49,350 --> 00:04:53,710
Infrastructure related annotations
are only used in the infrastructure layer.

90
00:04:53,760 --> 00:04:57,660
Data transfer objects with validation
rules reside in the presentation layer

91
00:04:57,780 --> 00:04:58,920
etc etc.

92
00:04:59,460 --> 00:05:03,240
While this does make our code base
more verbose an easy to navigate.

93
00:05:03,600 --> 00:05:07,810
It also requires a lot of boilerplate
code in introduces a lot of redundancy.

94
00:05:08,136 --> 00:05:11,920
That's why it's always important to
make sure that the benefits of using ddd.

95
00:05:12,000 --> 00:05:15,400
Outweigh the drawbacks
for any specific use case.

96
00:05:16,350 --> 00:05:16,860
Alright

97
00:05:17,083 --> 00:05:19,170
let's head over
to the alarm t s file

98
00:05:19,350 --> 00:05:23,560
an update the alarm class to
contain the new attributes as well.

99
00:05:24,660 --> 00:05:27,480
We're also going to move the
name and severity attributes

100
00:05:27,630 --> 00:05:31,870
out of the constructor signature
and just keep the ID parameter there.

101
00:05:35,820 --> 00:05:38,130
With these properties
and place will declare

102
00:05:38,340 --> 00:05:39,750
to new public methods.

103
00:05:40,141 --> 00:05:43,300
Acknowledge and add alarm item.

104
00:05:44,610 --> 00:05:48,790
The acknowledge method was simply
set the is acknowledge flagged true.

105
00:05:48,870 --> 00:05:50,340
And the ad alarm item method

106
00:05:50,640 --> 00:05:53,845
will add a new alarm
item to the items or array.

107
00:05:55,260 --> 00:05:55,620
Great.

108
00:05:55,950 --> 00:05:59,100
Let's save our changes an
open up the alarm factory file now.

109
00:05:59,730 --> 00:06:00,300
In here.

110
00:06:00,780 --> 00:06:03,870
Atop up the the method signature
to accept to new arguments

111
00:06:04,140 --> 00:06:04,920
triggered at

112
00:06:05,220 --> 00:06:06,580
and items.

113
00:06:13,290 --> 00:06:13,860
Next up.

114
00:06:14,370 --> 00:06:15,810
Let's update the create method

115
00:06:16,140 --> 00:06:18,090
to assign the
triggered an attribute

116
00:06:18,210 --> 00:06:20,080
to the alarm instance.

117
00:06:25,560 --> 00:06:28,320
Also let's not forget to
iterate over the items array

118
00:06:28,680 --> 00:06:30,970
and at each item to the alarm.

119
00:06:31,020 --> 00:06:32,020
Excellent.

120
00:06:34,080 --> 00:06:35,910
Now onto the map or classes.

121
00:06:36,360 --> 00:06:36,780
First

122
00:06:36,990 --> 00:06:39,310
let's focus on the o r m driver.

123
00:06:42,390 --> 00:06:43,920
In the to domain method

124
00:06:44,130 --> 00:06:48,430
let's make sure we assign all
alarms attributes to the alarm object.

125
00:06:56,370 --> 00:06:57,480
And last but not least.

126
00:06:57,930 --> 00:07:00,970
At map alarm items
to the domain model.

127
00:07:04,440 --> 00:07:05,440
Great.

128
00:07:05,640 --> 00:07:06,150
Now

129
00:07:06,330 --> 00:07:07,320
let's scroll down to the

130
00:07:07,470 --> 00:07:08,850
to persistence method

131
00:07:09,030 --> 00:07:11,560
and update to map
all new attributes.

132
00:07:22,200 --> 00:07:27,070
Let's save our changes and real quick
do the same thing for the in-memory driver.

133
00:07:43,620 --> 00:07:44,620
Perfect.

134
00:07:45,300 --> 00:07:48,990
Please note that the reason we have to
update so many files as because we are

135
00:07:48,990 --> 00:07:51,220
supporting two
different drivers.

136
00:07:51,840 --> 00:07:53,760
If we were to use
only one driver.

137
00:07:54,210 --> 00:07:57,010
Which is the case in most
real world applications.

138
00:07:57,240 --> 00:08:00,370
We would spend a lot less
time on is repetitive tasks.

139
00:08:00,630 --> 00:08:04,830
Were showcasing the
power of all these advice

140
00:08:04,830 --> 00:08:05,370
Vance architectural
patterns in this course

141
00:08:05,520 --> 00:08:08,500
so that's why we have a
few of these additional steps.

142
00:08:08,670 --> 00:08:10,200
Alright so at that
out of the way

143
00:08:10,440 --> 00:08:13,360
let's now move onto
the application layer.

144
00:08:13,980 --> 00:08:14,610
Currently

145
00:08:14,850 --> 00:08:18,210
our crate alarm command
exposes only two attributes.

146
00:08:18,540 --> 00:08:19,140
Name

147
00:08:19,260 --> 00:08:20,500
and severity.

148
00:08:20,550 --> 00:08:23,650
That's updated to expose
the new attributes as well.

149
00:08:25,560 --> 00:08:26,010
Great.

150
00:08:26,430 --> 00:08:27,060
Now

151
00:08:27,180 --> 00:08:29,430
inside the create an
alarm handler class

152
00:08:29,640 --> 00:08:31,260
let's update the execute method

153
00:08:31,380 --> 00:08:35,470
to pass the new attributes to the
alarm factory create method as well.

154
00:08:39,510 --> 00:08:40,680
Last but not least.

155
00:08:41,190 --> 00:08:45,911
Let's update our create alarm d t oh
class to expose these new attributes.

156
00:08:48,240 --> 00:08:50,670
We could also add some
validation rules here.

157
00:08:51,390 --> 00:08:54,420
And and a real world application
you would surely want them.

158
00:08:55,080 --> 00:08:58,020
But since validation
isn't a focus of this course

159
00:08:58,170 --> 00:08:59,829
will skip this step.

160
00:08:59,910 --> 00:09:04,020
But please refer to the
nastiest fundamentals

161
00:09:04,020 --> 00:09:05,020
course if you need a
refresher on validation.

162
00:09:05,670 --> 00:09:07,030
Alright excellent.

163
00:09:07,440 --> 00:09:08,190
Lastly

164
00:09:08,460 --> 00:09:11,730
let's save our changes and head
over to the alarm controller file

165
00:09:11,880 --> 00:09:13,320
an update the create method

166
00:09:13,800 --> 00:09:17,560
to pass the new attributes to the
create alarm command constructor

167
00:09:17,700 --> 00:09:19,540
and we should be all set.

168
00:09:22,110 --> 00:09:23,850
There's just one
final step though

169
00:09:24,120 --> 00:09:26,640
we need to let type r m
know about this new entity.

170
00:09:27,180 --> 00:09:32,370
So let's go ahead and add the alarm
item entity to the type r m for feature re.

171
00:09:32,790 --> 00:09:35,472
In the or and
persistence module file.

172
00:09:38,550 --> 00:09:41,400
And finally our application
should be able to compile again.

173
00:09:42,030 --> 00:09:43,020
Just a double check

174
00:09:43,230 --> 00:09:47,820
let's open up our terminal
and first recreate our

175
00:09:47,820 --> 00:09:49,450
containers so we don't have
any old entries in the database.

176
00:09:49,890 --> 00:09:53,110
We can achieve this with docker
compose down remove orphans.

177
00:09:53,520 --> 00:09:56,680
And then do docker
compose up dashed d again.

178
00:09:57,060 --> 00:09:58,980
If we switched to the
other terminal window.

179
00:09:59,340 --> 00:10:01,480
Let's see if we haven't
missed anything.

180
00:10:02,447 --> 00:10:03,928
Far everything looks good to go.

181
00:10:04,498 --> 00:10:06,208
If you're seeing
any errors here.

182
00:10:06,628 --> 00:10:09,398
Make sure you follow
all the steps above.

183
00:10:09,448 --> 00:10:13,228
All of the code we've
manipulated and the

184
00:10:13,228 --> 00:10:13,648
file names can be found
below the course video

185
00:10:13,798 --> 00:10:14,978
as always.

186
00:10:15,058 --> 00:10:20,038
Since our application now
uses two different data stores

187
00:10:20,038 --> 00:10:22,268
will split our repository to to
individual abstract classes.

188
00:10:22,648 --> 00:10:24,178
Find alarms repository

189
00:10:24,298 --> 00:10:26,288
and create alarm repository.

190
00:10:27,328 --> 00:10:27,958
Also

191
00:10:28,258 --> 00:10:33,388
note that our find a
alarms repository or return

192
00:10:33,388 --> 00:10:34,778
objects that fulfill the
alarm breed model interface.

193
00:10:34,888 --> 00:10:35,668
So for this

194
00:10:35,938 --> 00:10:37,838
inside the domain folder.

195
00:10:37,978 --> 00:10:42,388
Let's create a new
folder called read dash

196
00:10:42,388 --> 00:10:42,868
models and inside of
it was create a new file.

197
00:10:43,198 --> 00:10:45,508
Called alarm dot Reed dash model

198
00:10:45,748 --> 00:10:47,051
dot to yes.

199
00:10:48,778 --> 00:10:49,498
This class

200
00:10:49,678 --> 00:10:54,518
will represent the read model which is
optimized for read intensive operations.

201
00:10:55,198 --> 00:10:56,218
Such as queries

202
00:10:56,338 --> 00:11:00,518
reporting and presenting data
to users or external systems.

203
00:11:01,348 --> 00:11:03,718
It is distinct from
the domain model.

204
00:11:04,048 --> 00:11:08,278
Which is optimized for right intensive
operations in a cab absolutes the core

205
00:11:08,278 --> 00:11:11,288
business logic and
behavior of the domain.

206
00:11:12,148 --> 00:11:13,888
The main purpose
of a read model.

207
00:11:14,218 --> 00:11:18,598
Is to improve query
performance and provide a more

208
00:11:18,598 --> 00:11:20,498
efficient way to access
data for specific use cases.

209
00:11:20,788 --> 00:11:20,968
By

210
00:11:21,154 --> 00:11:22,154
normalizing.

211
00:11:22,378 --> 00:11:26,308
Aggregating or
tailoring the data to fit the

212
00:11:26,308 --> 00:11:27,308
specific requirements
of a read operation.

213
00:11:27,868 --> 00:11:31,708
Read models can significantly
reduce the complexity and time required

214
00:11:31,918 --> 00:11:33,458
to her tree of information.

215
00:11:34,138 --> 00:11:36,718
While in the case of our
demonstration application

216
00:11:36,898 --> 00:11:39,958
the read model hairs almost
identical to our domain model.

217
00:11:40,528 --> 00:11:43,498
In real world applications
this would rarely be the case.

218
00:11:43,978 --> 00:11:47,698
So even though it may
seem as if we introduced a lot

219
00:11:47,698 --> 00:11:48,718
of unnecessary redundancy
in or application here.

220
00:11:49,138 --> 00:11:52,238
Is most likely won't be the
case in production apps.

221
00:11:52,318 --> 00:11:57,328
Where read models domain
models and even database

222
00:11:57,358 --> 00:11:58,748
schema are often very
different from one another.

223
00:11:59,308 --> 00:12:01,048
Alright so let's
get started here.

224
00:12:01,648 --> 00:12:04,018
Let's open up the
alarm repository file

225
00:12:04,288 --> 00:12:08,078
and update the classname
to create alarm repository.

226
00:12:08,968 --> 00:12:11,068
Let's also remove
the find all method

227
00:12:11,188 --> 00:12:13,208
since we don't need it anymore.

228
00:12:14,008 --> 00:12:14,638
Lastly.

229
00:12:14,938 --> 00:12:19,268
Let's rename the file itself to
create alarm repository it up to yes.

230
00:12:20,578 --> 00:12:21,628
Next to this file.

231
00:12:22,018 --> 00:12:23,398
Let's create a new port.

232
00:12:23,698 --> 00:12:26,368
Called find alarms
repository dot ts

233
00:12:26,488 --> 00:12:29,768
and defined the find
alarms repository interface.

234
00:12:31,588 --> 00:12:33,058
The difference between these two

235
00:12:33,238 --> 00:12:34,378
is simply that one

236
00:12:34,498 --> 00:12:36,328
is responsible for writing data

237
00:12:36,598 --> 00:12:38,458
and the other as
responsible for reading it.

238
00:12:39,298 --> 00:12:41,128
Also as we mentioned earlier.

239
00:12:41,488 --> 00:12:46,228
Bind alarms repository
will return objects

240
00:12:46,288 --> 00:12:47,288
that fulfilled the alarm
read model interface.

241
00:12:48,598 --> 00:12:53,758
We'll also need
another port for inserting

242
00:12:53,762 --> 00:12:55,058
materialized alarm views
into the read side database.

243
00:12:55,528 --> 00:13:00,038
So let's create a new file called
up sir materialized alarm repository.

244
00:13:00,358 --> 00:13:04,538
And define the upsurge
materialized alarm repository interface.

245
00:13:06,238 --> 00:13:10,078
Let's save our changes and head
over to the get alarms query handler file.

246
00:13:10,438 --> 00:13:15,295
An update its constructor to
inject the find alarms repository port.

247
00:13:17,188 --> 00:13:21,338
Let's also make it return
alarm read model now as well.

248
00:13:21,928 --> 00:13:22,468
Otherwise

249
00:13:22,588 --> 00:13:24,578
everything i should
remain the same.

250
00:13:28,168 --> 00:13:28,768
Now.

251
00:13:29,068 --> 00:13:31,508
Onto our infrastructure liar.

252
00:13:31,558 --> 00:13:35,368
Let's start with the in-memory driver
as it will be a lot easier to implement.

253
00:13:35,848 --> 00:13:36,268
Burst

254
00:13:36,478 --> 00:13:41,007
that's open up the in-memory
alarm repository class

255
00:13:41,022 --> 00:13:42,208
and make implement both
the find alarms repository

256
00:13:42,388 --> 00:13:46,328
an upsurge materialized
alarm repository porch it's.

257
00:13:47,188 --> 00:13:50,458
Since will be using the same
class for both reading and writing.

258
00:13:50,968 --> 00:13:55,401
Let's declare a new property that will
represent the materialized alarm views.

259
00:13:57,148 --> 00:13:57,598
Next.

260
00:13:57,988 --> 00:14:02,288
Let's update the find all method
signature to return alarm breed model.

261
00:14:04,048 --> 00:14:04,588
Also.

262
00:14:04,978 --> 00:14:09,808
Let's update the method
body to return an array

263
00:14:09,808 --> 00:14:10,648
of values from the
materialized alarm views map

264
00:14:10,978 --> 00:14:11,788
and lastly

265
00:14:11,998 --> 00:14:14,318
let's add the missing
upsurge method.

266
00:14:15,538 --> 00:14:16,538
Great.

267
00:14:16,798 --> 00:14:19,238
Now onto the module file.

268
00:14:19,288 --> 00:14:21,958
Let's open up the in-memory
persistence module file.

269
00:14:22,498 --> 00:14:27,178
An update the providers array to provide
the find alarms repository and absurd

270
00:14:27,178 --> 00:14:29,888
materialized alarm
repository ports.

271
00:14:30,688 --> 00:14:31,138
Beer

272
00:14:31,348 --> 00:14:35,698
we're using the use existing property
to tell nasty use the same instance of the

273
00:14:35,698 --> 00:14:39,368
in-memory alarm
repository class for all ports.

274
00:14:39,928 --> 00:14:42,728
Was also not forget
to export them to.

275
00:14:42,898 --> 00:14:43,348
Great.

276
00:14:43,798 --> 00:14:46,305
Now onto the or am driver.

277
00:14:46,588 --> 00:14:48,448
This one's going to
be more complicated

278
00:14:48,658 --> 00:14:51,758
as will be using mongo
db for real ring data.

279
00:14:51,928 --> 00:14:55,858
We've made a lot of
changes so far but don't worry

280
00:14:55,858 --> 00:14:57,248
we're making great
progress we're almost there.

281
00:14:57,838 --> 00:15:01,508
Let's start by first opening
the our him alarm repository

282
00:15:01,858 --> 00:15:04,059
and remove the find all method.

283
00:15:09,238 --> 00:15:09,688
Next

284
00:15:09,868 --> 00:15:13,718
let's rename the class two
or m create alarm repository.

285
00:15:17,518 --> 00:15:18,208
And lastly

286
00:15:18,478 --> 00:15:20,158
let's also update
the name of the file

287
00:15:20,338 --> 00:15:23,378
to be create alarm
repository t s.

288
00:15:26,428 --> 00:15:27,508
Next to this file

289
00:15:27,778 --> 00:15:29,098
let's create a new file

290
00:15:29,218 --> 00:15:31,498
called fine alarms
repository that ts

291
00:15:31,618 --> 00:15:35,558
and defined the or oram
find alarms repository class.

292
00:15:36,598 --> 00:15:37,438
In this file

293
00:15:37,738 --> 00:15:39,928
were using the
inject model decorator

294
00:15:40,168 --> 00:15:45,908
to inject the alarm mongoose model into
the or ram find alarms repository class.

295
00:15:46,648 --> 00:15:47,814
Inside the final method.

296
00:15:48,418 --> 00:15:52,988
Raising the find method to retrieve all
documents from the alarm collection.

297
00:15:53,218 --> 00:15:57,538
We don't need to perform
any mapping here as the alarm

298
00:15:57,628 --> 00:15:59,278
schema his idea cynical to
our alarm rate model class.

299
00:15:59,758 --> 00:16:00,238
Remember

300
00:16:00,478 --> 00:16:04,648
this was actually the goal of using a
separate data source with d normalized data.

301
00:16:05,008 --> 00:16:08,438
Were starting to see some of
the benefits of that already great.

302
00:16:09,118 --> 00:16:09,628
Now

303
00:16:09,928 --> 00:16:11,638
but this repository in place

304
00:16:11,818 --> 00:16:16,318
let's create a another poor
implementation for inserting

305
00:16:16,408 --> 00:16:18,338
materialized the alarm views
into the read side database.

306
00:16:19,048 --> 00:16:20,188
Let's create a new file

307
00:16:20,308 --> 00:16:23,948
called absurd materialized
alarm repository dot ts.

308
00:16:24,088 --> 00:16:28,538
Unless the find the or 'em up cert
materialized alarm repository class.

309
00:16:28,738 --> 00:16:30,818
Similar to the
previous repository.

310
00:16:30,958 --> 00:16:35,488
Were using the inject model decorator
again to inject the materialized alarm view

311
00:16:35,548 --> 00:16:38,168
mongoose model
entered this class.

312
00:16:38,398 --> 00:16:40,138
Inside the upsurge method here.

313
00:16:40,498 --> 00:16:44,668
You can see that we're
using the find one in update

314
00:16:44,698 --> 00:16:46,508
method to answer a new
document into the alarm collection.

315
00:16:46,648 --> 00:16:50,038
Unless there's one that already
exists with the same ID in the collection.

316
00:16:50,338 --> 00:16:50,788
Then

317
00:16:50,938 --> 00:16:52,148
we updated.

318
00:16:52,528 --> 00:16:56,368
We don't need to perform any mapping here
as the materialized the alarm view schema.

319
00:16:56,758 --> 00:16:59,888
Is identical to the
alarm read model class.

320
00:17:00,538 --> 00:17:05,422
Now let's open up the o r
m persistence module file an

321
00:17:05,458 --> 00:17:07,688
update the providers of rate
provide newly created ports.

322
00:17:08,248 --> 00:17:08,998
Like before.

323
00:17:09,506 --> 00:17:12,008
A again not forget
to export them.

324
00:17:20,818 --> 00:17:21,628
And lastly

325
00:17:21,778 --> 00:17:23,878
we need to import
the mongoose module

326
00:17:24,118 --> 00:17:26,968
or feature method and
pass the alarm schema to it

327
00:17:27,178 --> 00:17:30,248
as an argument to register
the model as a provider.

328
00:17:31,198 --> 00:17:31,708
Excellent.

329
00:17:32,158 --> 00:17:34,207
Were almost finished now.

330
00:17:34,348 --> 00:17:35,818
The only thing
we have left to do

331
00:17:36,028 --> 00:17:38,908
is to update the alarm
created event handler file

332
00:17:39,088 --> 00:17:43,348
to insert the the
normalized alarm document

333
00:17:43,348 --> 00:17:44,348
into the materialized
alarm view collection.

334
00:17:45,208 --> 00:17:45,688
So

335
00:17:45,898 --> 00:17:46,858
let's open this file

336
00:17:47,278 --> 00:17:52,318
and inject the absurd
materialized alarm repository

337
00:17:52,320 --> 00:17:53,845
report into the alarm
created a vet hammer class.

338
00:17:53,968 --> 00:17:54,628
Next up.

339
00:17:55,048 --> 00:17:56,788
Let's update the handle method

340
00:17:57,118 --> 00:18:01,418
to insert the d normalized alarm
model into the read side database.

341
00:18:02,638 --> 00:18:04,088
And that's it.

342
00:18:04,468 --> 00:18:05,938
As stated in the comment here

343
00:18:06,058 --> 00:18:10,378
in a real world application
we would have to ensure that

344
00:18:10,408 --> 00:18:12,368
this operation is atomic
with the creation of the alarm.

345
00:18:13,108 --> 00:18:17,128
Otherwise we could end up with an alarm
that is not reflected in the read model

346
00:18:17,278 --> 00:18:19,798
for example because the
database operation failed.

347
00:18:20,338 --> 00:18:22,779
Leading to an
inconsistent state.

348
00:18:22,828 --> 00:18:23,248
But.

349
00:18:23,728 --> 00:18:25,928
How can we even implement this.

350
00:18:26,518 --> 00:18:27,118
Well

351
00:18:27,358 --> 00:18:31,828
if we had a message broker and place to
communicate between the right in read side.

352
00:18:32,128 --> 00:18:37,078
We could use act and neck to inform
the broker about the success or failure

353
00:18:37,348 --> 00:18:39,038
of the database operation.

354
00:18:39,508 --> 00:18:41,308
If the database operation failed

355
00:18:41,578 --> 00:18:45,008
the message will be re
cute and retreived later.

356
00:18:45,238 --> 00:18:47,588
If the database
operation succeeded.

357
00:18:47,668 --> 00:18:50,138
The message will be
removed from the q.

358
00:18:50,458 --> 00:18:54,958
So to achieve this
we could also leverage

359
00:18:54,958 --> 00:18:55,958
the transactional outbox
and inbox patterns.

360
00:18:56,038 --> 00:18:58,828
They are both unfortunately
outside of the scope of this course

361
00:18:58,978 --> 00:19:00,758
as they are quite involved.

362
00:19:01,048 --> 00:19:02,878
But we wanted to make
sure we mentioned them

363
00:19:03,088 --> 00:19:07,048
and that it would be ideal to include some
of these patterns in your application here.

364
00:19:07,738 --> 00:19:09,928
If you're interested in learning
more about those patterns.

365
00:19:10,318 --> 00:19:13,198
Check out our other course
extension called microservices

366
00:19:13,498 --> 00:19:16,268
where we learn about
an implement them.

367
00:19:17,218 --> 00:19:20,018
Alright so back to
our task at hand.

368
00:19:20,158 --> 00:19:24,038
Let's run the application and see
if everything works as expected.

369
00:19:26,518 --> 00:19:28,228
Once the application
is up and running.

370
00:19:28,558 --> 00:19:33,088
Let's open up another
terminal window and send a post

371
00:19:33,088 --> 00:19:34,928
request to the alarms and
point to create a new alarm.

372
00:19:35,368 --> 00:19:39,008
You can find the curl command
below the course video as always.

373
00:19:40,708 --> 00:19:41,638
And there we have it

374
00:19:41,848 --> 00:19:42,808
as we can see

375
00:19:42,958 --> 00:19:45,338
our alarm was
successfully created.

376
00:19:45,538 --> 00:19:49,628
Now let's switch to the other terminal
window and take a look at the logs.

377
00:19:50,368 --> 00:19:50,728
Great

378
00:19:50,968 --> 00:19:52,178
no heirs.

379
00:19:53,188 --> 00:19:54,988
So going back to
our curled terminal

380
00:19:55,288 --> 00:19:59,849
let's said the get request
the alarms and point

381
00:19:59,879 --> 00:20:01,268
to retrieve all the
materialized alarm views.

382
00:20:01,738 --> 00:20:05,128
Were going to use the
Jason underscore p p tool here

383
00:20:05,278 --> 00:20:07,138
to auto format
the Jace an output

384
00:20:07,348 --> 00:20:09,188
making it easier to read.

385
00:20:10,301 --> 00:20:13,960
Your operating system
doesn't support this to feel

386
00:20:13,960 --> 00:20:15,130
free to admit that part of the
curl command shown here.

387
00:20:15,670 --> 00:20:19,480
But fantastic as we can see
we received one alarm item back

388
00:20:19,690 --> 00:20:21,310
with the embedded alarm items.

389
00:20:21,760 --> 00:20:25,910
We had to set up quite a bit of code
in this lesson but we did a great job.

390
00:20:26,440 --> 00:20:27,700
So to summarize

391
00:20:27,850 --> 00:20:31,570
in this lesson we've
learned how to implement

392
00:20:31,570 --> 00:20:32,020
the read side of the
seek your us patter.

393
00:20:32,380 --> 00:20:35,150
Using nest years and mongo db.

394
00:20:35,560 --> 00:20:36,820
Upon receiving an event

395
00:20:37,090 --> 00:20:40,510
our system automatically
creates a d normalized alarm view

396
00:20:40,810 --> 00:20:41,338
and stores

397
00:20:41,439 --> 00:20:43,250
in the read side database.

398
00:20:43,450 --> 00:20:47,480
While this approach works and is
commonly used in many applications.

399
00:20:47,560 --> 00:20:51,370
It introduces a lot of redundancy
and can lead to inconsistencies

400
00:20:51,610 --> 00:20:53,660
if not implemented correctly.

401
00:20:54,340 --> 00:20:54,940
Also

402
00:20:55,210 --> 00:20:57,370
we end up with
multiple sources of truth.

403
00:20:57,910 --> 00:20:59,920
Which can be hard to
maintain down the road.

404
00:21:00,250 --> 00:21:05,210
This is why the seek your as pattern usually
goes hand in hand with event sourcing.

405
00:21:05,920 --> 00:21:08,780
Where instead of having
the right side database.

406
00:21:08,890 --> 00:21:11,410
We store all events
in an event store

407
00:21:11,710 --> 00:21:15,230
and use these events to
build the read side database.

408
00:21:15,310 --> 00:21:17,950
This approach is of course
more complex to implement

409
00:21:18,310 --> 00:21:20,300
but it does have many benefits.

410
00:21:20,410 --> 00:21:20,560
Don't.

411
00:21:20,890 --> 00:21:22,090
We'll be covering this approach

412
00:21:22,240 --> 00:21:24,020
in the next few lessons.

