1
00:00:01,080 --> 00:00:02,430
Hexagonal architecture

2
00:00:02,550 --> 00:00:04,740
also known as ports
in adapters architecture

3
00:00:05,010 --> 00:00:09,270
is a software design
pattern that aims to create

4
00:00:09,270 --> 00:00:09,930
a highly decoupled
and testable application

5
00:00:10,170 --> 00:00:12,420
by emphasizing the
separation of concerns

6
00:00:12,660 --> 00:00:14,340
between the core business logic

7
00:00:14,610 --> 00:00:16,770
and external concerns
such as databases

8
00:00:17,040 --> 00:00:19,270
user interfaces and frameworks.

9
00:00:19,500 --> 00:00:20,160
The key concert

10
00:00:20,279 --> 00:00:21,660
in hexagonal architecture

11
00:00:21,900 --> 00:00:23,790
is the use of ports
and adapters.

12
00:00:24,120 --> 00:00:26,200
Hence the ports
in adapters name.

13
00:00:26,520 --> 00:00:31,150
Ports are interfaces that represent
the entry points into the core application.

14
00:00:31,260 --> 00:00:35,160
They defined the contract for interactions
with the external world and represent the

15
00:00:35,160 --> 00:00:37,840
applications use
cases and boundaries.

16
00:00:37,980 --> 00:00:40,230
The core domain
exposes these ports

17
00:00:40,440 --> 00:00:43,290
allowing external concerns
to interact the application

18
00:00:43,560 --> 00:00:45,464
in a standardized way.

19
00:00:45,900 --> 00:00:50,747
Adapters implement the interfaces
or ports defined by the core domain.

20
00:00:50,790 --> 00:00:55,420
They serve as the bridge between the
core application and the external concerns.

21
00:00:55,650 --> 00:00:59,160
Adapters are responsible for translating
the language of the core domain into

22
00:00:59,160 --> 00:01:01,200
something that external
systems can understand

23
00:01:01,500 --> 00:01:04,050
such as data persistence
mechanisms a p eyes

24
00:01:04,260 --> 00:01:05,800
or user interfaces.

25
00:01:06,600 --> 00:01:09,780
This architecture revolves around
the idea of dependency inversion

26
00:01:09,900 --> 00:01:12,810
which means that high-level
modules such as the core module

27
00:01:12,990 --> 00:01:17,200
should not depend on low level
modules such as those external concerns.

28
00:01:17,250 --> 00:01:21,190
Instead both should depend
on abstractions known as ports.

29
00:01:21,240 --> 00:01:25,470
This inversion of dependencies enables
the court to remain independent an isolated

30
00:01:25,620 --> 00:01:26,820
from externa systems.

31
00:01:27,150 --> 00:01:29,310
Making it easier
to test maintain

32
00:01:29,580 --> 00:01:31,270
and adapt the application.

33
00:01:31,980 --> 00:01:35,530
Some benefits of hexagonal
architecture are decoupling.

34
00:01:35,640 --> 00:01:39,570
This architecture
promotes loose coupling

35
00:01:39,570 --> 00:01:40,200
between the core domain
and external concerns.

36
00:01:40,590 --> 00:01:44,080
Allowing changes to occur in
one area without affecting others.

37
00:01:44,340 --> 00:01:45,643
Test ability.

38
00:01:45,720 --> 00:01:50,400
By defining clear interfaces
reports for interactions

39
00:01:50,400 --> 00:01:51,900
it becomes easier to test
the core domain in isolation

40
00:01:52,200 --> 00:01:54,400
without relying on
external systems.

41
00:01:54,630 --> 00:01:55,630
Flexibility.

42
00:01:56,010 --> 00:01:59,940
Hexagonal architecture
allows for the replacement

43
00:01:59,940 --> 00:02:01,720
or modification of external
concerns or adapters.

44
00:02:01,860 --> 00:02:03,660
Without impacting
the core domain.

45
00:02:03,990 --> 00:02:07,480
Making it more adaptable
to different technologies tax.

46
00:02:07,890 --> 00:02:09,600
Isolation of core domain.

47
00:02:10,050 --> 00:02:12,600
The quarter domain is the
focal point of the application

48
00:02:12,870 --> 00:02:17,070
enabling developers to
focus on expressing business

49
00:02:17,070 --> 00:02:18,490
logic without being
influenced by external factors.

50
00:02:18,870 --> 00:02:19,590
And lastly

51
00:02:19,830 --> 00:02:21,090
domain centric design.

52
00:02:21,630 --> 00:02:22,950
This architectural pattern

53
00:02:23,100 --> 00:02:26,940
encourages a strong focus on the
core domain and the business from else.

54
00:02:27,390 --> 00:02:28,890
Leading to a more expressive

55
00:02:29,010 --> 00:02:31,360
and maintainable domain model.

56
00:02:32,280 --> 00:02:33,990
If we look at the
following diagram.

57
00:02:34,320 --> 00:02:38,280
We can see that the
traditional three tier

58
00:02:38,280 --> 00:02:39,030
architecture with controller
services or business logic

59
00:02:39,360 --> 00:02:40,710
and data access layers

60
00:02:40,980 --> 00:02:42,690
of all the arrows
pointing to the right.

61
00:02:43,020 --> 00:02:45,600
Indicating that the flow
of control is from the left

62
00:02:45,720 --> 00:02:46,320
to the right.

63
00:02:46,980 --> 00:02:50,850
But what if we inverted
dependency between

64
00:02:50,850 --> 00:02:51,850
the business logic and
the data access layer.

65
00:02:52,140 --> 00:02:55,620
The business logic layer will still interact
with the data access layer but it will

66
00:02:55,620 --> 00:02:58,210
do so through an
interface or port.

67
00:02:58,650 --> 00:03:01,720
This is the core idea behind
hexagonal architecture.

68
00:03:02,040 --> 00:03:05,130
The business logic layer is
isolated from the data access layer

69
00:03:05,430 --> 00:03:06,850
and vice versa.

70
00:03:06,990 --> 00:03:09,660
Business logic laird
defines the interface or port.

71
00:03:09,990 --> 00:03:13,750
In the data access layer
implements it as it is our adapter.

72
00:03:14,340 --> 00:03:15,540
So to summarize

73
00:03:15,780 --> 00:03:19,990
hexagonal architecture focuses
on a strong separation of concerns.

74
00:03:20,040 --> 00:03:21,060
Dependency inversion

75
00:03:21,360 --> 00:03:24,490
and clear interfaces known
as ports for interactions.

76
00:03:24,870 --> 00:03:25,860
It promotes a

77
00:03:26,070 --> 00:03:30,130
domain centric does zine and provides
better test ability and flexibility.

78
00:03:30,450 --> 00:03:31,320
On the other hand.

79
00:03:31,650 --> 00:03:34,380
Three-tier architecture
relies on horizontal Larry

80
00:03:34,740 --> 00:03:37,770
but might not achieve the same
level of isolation and test ability

81
00:03:38,070 --> 00:03:39,700
as hexagonal architecture.

82
00:03:40,020 --> 00:03:43,710
The choice between the
two depends on the specific

83
00:03:43,710 --> 00:03:44,860
requirements and
complexity of your application.

84
00:03:45,360 --> 00:03:49,560
For smaller applications three two your
architecture might be entirely sufficient.

85
00:03:49,890 --> 00:03:54,690
While hexagonal architecture
is typically more suitable for

86
00:03:54,690 --> 00:03:56,430
complex applications that
require an even more decoupled

87
00:03:56,640 --> 00:03:58,693
and domain centric design.

