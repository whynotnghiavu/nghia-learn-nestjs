1
00:00:01,230 --> 00:00:01,980
In this lesson.

2
00:00:02,340 --> 00:00:06,180
Will take a look at how we can implement
command query responsibility segregation in

3
00:00:06,210 --> 00:00:08,401
our application with
the use of the nest

4
00:00:08,577 --> 00:00:10,420
as secure as package.

5
00:00:10,890 --> 00:00:13,510
First we need to install
the required library.

6
00:00:15,780 --> 00:00:19,410
Once the packages installed
let's navigate to the app module file

7
00:00:19,800 --> 00:00:22,770
and import secure s
module that for route.

8
00:00:23,340 --> 00:00:27,250
From the necessary as secure
as package into our imports array.

9
00:00:27,960 --> 00:00:29,460
With this module registered

10
00:00:29,580 --> 00:00:33,880
we can now start implementing the command
inquiry handlers in our application.

11
00:00:34,980 --> 00:00:36,970
Let's start with the
command handlers.

12
00:00:37,320 --> 00:00:39,971
Inside the existing
commands directory.

13
00:00:40,050 --> 00:00:44,280
Will create a new file called create
alarm command handler dot t s

14
00:00:44,460 --> 00:00:47,743
next to the existing create
alarm command cs file.

15
00:00:47,940 --> 00:00:52,180
This file will contain the command
handler for this correspondent commands.

16
00:00:52,920 --> 00:00:56,050
Let's break down this class so
everything makes more sense.

17
00:00:56,280 --> 00:00:56,700
First

18
00:00:56,940 --> 00:01:01,770
we defined the create
alarm command handler class

19
00:01:01,830 --> 00:01:02,830
in implement the i
command handler interface.

20
00:01:03,240 --> 00:01:03,870
The class

21
00:01:04,110 --> 00:01:06,900
needs to be decorated with
the command handler decorator

22
00:01:07,110 --> 00:01:10,930
with the corresponding command
class past and as an argument.

23
00:01:11,130 --> 00:01:11,940
This decorator

24
00:01:12,180 --> 00:01:17,560
cells and nest to register this class as a
command handler for the specified commands.

25
00:01:18,150 --> 00:01:23,410
The i command handler interface requires
us to implement the execute method.

26
00:01:23,491 --> 00:01:24,210
This method

27
00:01:24,450 --> 00:01:26,920
will be called when the
command is dispatched.

28
00:01:27,270 --> 00:01:31,570
The original command object will be
passed in as an argument to this method.

29
00:01:32,220 --> 00:01:33,840
Inside the execute method.

30
00:01:34,230 --> 00:01:38,110
We can perform any business logic
that is required to handle the command.

31
00:01:38,550 --> 00:01:41,790
So falling what we've done
already in the alarms service.

32
00:01:42,150 --> 00:01:43,980
Let's create a new alarm model

33
00:01:44,370 --> 00:01:46,090
and save it to the database.

34
00:01:47,400 --> 00:01:50,050
To achieve this will
need to dependencies.

35
00:01:50,250 --> 00:01:51,390
Alarm repository

36
00:01:51,600 --> 00:01:53,410
and alarm factory.

37
00:01:54,600 --> 00:01:56,560
With these
dependencies injected.

38
00:01:56,910 --> 00:01:59,980
We cannot update our
execute method as follows.

39
00:02:00,810 --> 00:02:01,810
Perfect.

40
00:02:02,130 --> 00:02:04,410
Now that we have the
command handler implemented

41
00:02:04,590 --> 00:02:07,722
let's register it in the
alarms module file.

42
00:02:11,850 --> 00:02:12,510
Next up.

43
00:02:12,930 --> 00:02:18,030
Let's inject the command
bus into the alarm service

44
00:02:18,030 --> 00:02:19,380
and use it to dispatch they
create alarm commands

45
00:02:19,560 --> 00:02:21,760
when the create
method is called.

46
00:02:23,640 --> 00:02:28,200
We can also remove the
alarm factory dependency

47
00:02:28,200 --> 00:02:29,200
here as we no longer
use it in this class.

48
00:02:29,910 --> 00:02:34,830
Note that we could rename
this class to use the facade

49
00:02:34,830 --> 00:02:36,640
suffix instead of service
to better reflect its purpose.

50
00:02:36,780 --> 00:02:39,971
But for the sake of
simplicity will keep it as is.

51
00:02:40,110 --> 00:02:41,460
With this change in place

52
00:02:41,580 --> 00:02:43,770
let's try to create a
a new alarm with curl

53
00:02:43,890 --> 00:02:45,370
and see if it works.

54
00:02:46,200 --> 00:02:50,430
As we can see the alarm
was successfully created and

55
00:02:50,430 --> 00:02:52,090
we could see the log
message in the consul great.

56
00:02:52,560 --> 00:02:54,970
Now that we have the
command handler implemented.

57
00:02:55,080 --> 00:02:58,270
Let's take a look at how we
can implement be query handler.

58
00:02:58,351 --> 00:03:02,610
First up will need to
create a new directory called

59
00:03:02,640 --> 00:03:04,392
queries and side of the
source slash alarms directory.

60
00:03:04,830 --> 00:03:05,940
Inside this directory.

61
00:03:06,300 --> 00:03:09,780
Let's create a new file called
get alarms dot query dot t s

62
00:03:09,960 --> 00:03:12,278
that will contain
the query class.

63
00:03:14,670 --> 00:03:19,230
We're going to keep this
query simple in this course

64
00:03:19,230 --> 00:03:20,250
but in real world application
we would typically pass

65
00:03:20,370 --> 00:03:21,930
some parameters to this query

66
00:03:22,080 --> 00:03:23,340
to filter the results.

67
00:03:23,700 --> 00:03:24,540
For example

68
00:03:24,840 --> 00:03:27,330
we could pass in the
limit or offset parameters

69
00:03:27,600 --> 00:03:29,140
to implement pagination.

70
00:03:29,550 --> 00:03:30,240
Similarly

71
00:03:30,510 --> 00:03:34,410
we could pass in the sort parameter
to specify the saw sorting order etc.

72
00:03:34,770 --> 00:03:38,290
Just know that you have these abilities
if you need them in your applications.

73
00:03:39,000 --> 00:03:39,990
With this and place

74
00:03:40,230 --> 00:03:41,430
let's create a new file

75
00:03:41,730 --> 00:03:43,470
of get alarms query handler

76
00:03:43,740 --> 00:03:45,880
that will contain
the query handler.

77
00:03:46,860 --> 00:03:49,980
A query handler is very
similar to the command handler.

78
00:03:50,340 --> 00:03:53,730
It needs to be decorated with the
query handler decorator in implemented

79
00:03:54,000 --> 00:03:56,530
with the i query
handler interface.

80
00:03:56,970 --> 00:03:58,350
The execute method here

81
00:03:58,500 --> 00:04:02,130
will be called when the query
is dispatched and like previously

82
00:04:02,280 --> 00:04:06,490
the original query object will be passed
and as an argument to this method.

83
00:04:06,990 --> 00:04:08,610
Inside the execute method.

84
00:04:08,940 --> 00:04:13,000
We can perform any business logic
that is required to handle the query.

85
00:04:14,160 --> 00:04:17,430
In our case I'll start by
injecting the alarm repository

86
00:04:17,550 --> 00:04:20,140
using the standard
constructor injection.

87
00:04:20,820 --> 00:04:25,180
With this dependency injected we can
now update our execute method as follows.

88
00:04:27,720 --> 00:04:28,170
Great.

89
00:04:28,680 --> 00:04:29,250
Now

90
00:04:29,520 --> 00:04:34,080
let's head of her to the
alarms module t s file an

91
00:04:34,080 --> 00:04:35,720
register the query handler
in the providers a wreck.

92
00:04:38,880 --> 00:04:44,110
Next let's navigate to the alarm service
file and eject the query bus provider here.

93
00:04:45,990 --> 00:04:47,160
Using this provider

94
00:04:47,280 --> 00:04:50,250
we can now dispatch
the get alarms query query

95
00:04:50,520 --> 00:04:52,270
in the find all method.

96
00:04:54,300 --> 00:04:55,680
And believe it or not that's it.

97
00:04:56,130 --> 00:04:57,270
Let's save our changes.

98
00:04:57,570 --> 00:05:00,760
Head over to the terminal
and let's test everything out.

99
00:05:03,660 --> 00:05:07,860
As we can see the query
handler was successfully executed

100
00:05:07,860 --> 00:05:09,420
and we could see the alarm
lessen the response great

101
00:05:09,720 --> 00:05:10,839
it works.

102
00:05:11,070 --> 00:05:15,060
So to summarize in this
lesson we've learned how we

103
00:05:15,060 --> 00:05:16,870
can implement command
query responsibility segregation.

104
00:05:17,010 --> 00:05:19,110
Aka secure s in or application

105
00:05:19,350 --> 00:05:22,713
with the use of the nes
js secure or as package.

106
00:05:23,040 --> 00:05:26,250
We're still just scratching
the surface as we

107
00:05:26,250 --> 00:05:27,150
don't have any event
handlers implemented yet.

108
00:05:27,510 --> 00:05:29,940
Nor separate read
and write models

109
00:05:30,189 --> 00:05:31,890
will learn more
about all of that

110
00:05:32,070 --> 00:05:33,760
in the upcoming lessons.

