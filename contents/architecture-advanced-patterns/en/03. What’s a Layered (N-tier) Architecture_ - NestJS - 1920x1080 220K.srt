1
00:00:00,990 --> 00:00:04,230
A layered architecture also
known as and tear architecture

2
00:00:04,530 --> 00:00:08,970
is a software design
pattern used to organize

3
00:00:08,970 --> 00:00:09,970
applications into
distinct layers or tears.

4
00:00:10,140 --> 00:00:10,860
Each layer

5
00:00:11,040 --> 00:00:12,390
has a specific role

6
00:00:12,540 --> 00:00:15,000
in communication between
layers as well defined

7
00:00:15,150 --> 00:00:16,360
and hierarchical.

8
00:00:17,310 --> 00:00:18,360
This design approach

9
00:00:18,600 --> 00:00:21,930
promotes modularity
scale ability maintainability

10
00:00:22,231 --> 00:00:24,610
and separation of
concerns and software.

11
00:00:24,690 --> 00:00:27,840
A typical entier architecture
consists of the following layers.

12
00:00:28,290 --> 00:00:31,660
A presentation layer
or user interface layer.

13
00:00:31,740 --> 00:00:36,730
This topmost layer interacts with users
presenting data in a user friendly format.

14
00:00:36,870 --> 00:00:41,520
It handles use or input displays information
and forwards request to lower layers

15
00:00:41,580 --> 00:00:45,405
examples include web browsers
mobile apps and desktop interfaces.

16
00:00:45,660 --> 00:00:47,400
Next up is the
application layer.

17
00:00:47,760 --> 00:00:49,320
Or business logic layer.

18
00:00:49,860 --> 00:00:52,990
And application layer
contains the core business logic.

19
00:00:53,040 --> 00:00:57,600
A processes requests from
the presentation layer performs

20
00:00:57,600 --> 00:00:59,430
business rules calcul nations
and managers data flow.

21
00:00:59,910 --> 00:01:03,070
Note that it does not handle
data storage or retrieval.

22
00:01:03,510 --> 00:01:05,340
Next up we have the domain layer

23
00:01:05,520 --> 00:01:06,870
or data model layer.

24
00:01:07,470 --> 00:01:11,890
The domain layer represents decor entities
in business objects of the application.

25
00:01:12,060 --> 00:01:15,660
And encapsulates business logic
independently of data storage technology

26
00:01:15,780 --> 00:01:19,240
defining the fundamental
rules of the applications domain.

27
00:01:19,800 --> 00:01:23,610
And lastly we have the data
access layer or persistence Claire.

28
00:01:24,150 --> 00:01:28,120
The data access layer handles
data storage and retrieval operations.

29
00:01:28,260 --> 00:01:32,820
It interacts with databases file systems or
external services to save and fetch data.

30
00:01:33,150 --> 00:01:36,400
Shielding the rest of the
application from data storage details.

31
00:01:37,230 --> 00:01:41,490
Note that entire architecture
can also be extended with

32
00:01:41,490 --> 00:01:43,140
additional layers such as
caching or messaging layers.

33
00:01:43,470 --> 00:01:45,910
Based on specific
application needs.

34
00:01:46,050 --> 00:01:48,510
Some benefits of and
entier architecture include.

35
00:01:48,900 --> 00:01:50,010
Maintainability.

36
00:01:50,460 --> 00:01:54,420
The separation of concerns in different
layers simplifies application maintenance and

37
00:01:54,420 --> 00:01:56,800
updates without
affecting other parts.

38
00:01:56,970 --> 00:01:57,870
Reuse ability.

39
00:01:58,231 --> 00:01:59,550
The modular nature

40
00:01:59,760 --> 00:02:02,490
allows component reuse
across multiple projects

41
00:02:02,760 --> 00:02:04,480
and lastly security.

42
00:02:04,800 --> 00:02:09,420
Clearly defined layer communication enhances
security by restricting direct access to

43
00:02:09,420 --> 00:02:11,507
sensitive data
and functionality.

44
00:02:12,150 --> 00:02:15,960
In ness jazz the three laird architecture
is the default architecture that is

45
00:02:15,960 --> 00:02:19,240
generated when you generate
a new new nestorius resource.

46
00:02:19,290 --> 00:02:21,760
We also call this the
traditional architecture.

47
00:02:21,810 --> 00:02:24,000
As it is the most
common architecture used

48
00:02:24,270 --> 00:02:25,900
in ness Jess applications.

49
00:02:26,310 --> 00:02:29,370
It has also the architecture that we
have been using in previous lessons

50
00:02:29,700 --> 00:02:31,150
and course extensions.

51
00:02:31,230 --> 00:02:35,830
As that's the essentially what ness
js documentation and examples use.

52
00:02:35,940 --> 00:02:36,930
The three layers are

53
00:02:37,230 --> 00:02:38,370
the country rollers layer

54
00:02:38,640 --> 00:02:41,790
which handles incoming requests
and returns responses to the client.

55
00:02:42,330 --> 00:02:43,560
The services layer

56
00:02:43,800 --> 00:02:46,750
which consists of the
business logic of the application

57
00:02:46,980 --> 00:02:51,580
and the data access or persistence layer
which handles data storage and retrieval.

58
00:02:52,350 --> 00:02:54,180
If we switch over to r i d e

59
00:02:54,330 --> 00:02:57,900
we can see that our application is
already structured and this exact way.

60
00:02:58,320 --> 00:03:02,400
We have a controller and a
service but we don't have a

61
00:03:02,409 --> 00:03:03,870
data access layer since the
nest g resource schematic

62
00:03:04,170 --> 00:03:06,400
doesn't generate one for us.

63
00:03:06,600 --> 00:03:10,860
We would usually fill this gap with a
type or and module or a prison module

64
00:03:11,010 --> 00:03:15,340
or really any other module that
handles data storage and retrieval for us.

65
00:03:15,450 --> 00:03:17,910
The three tier architectural
works really well

66
00:03:18,090 --> 00:03:20,760
for medium to large scale
applications that require

67
00:03:21,060 --> 00:03:22,950
a clear separation of concerns

68
00:03:23,160 --> 00:03:23,880
modularity

69
00:03:24,030 --> 00:03:25,390
and scale ability.

70
00:03:25,476 --> 00:03:29,250
Is a good choice when the
focuses on organizing the

71
00:03:29,250 --> 00:03:30,780
application into layers
with defined responsibilities.

72
00:03:31,860 --> 00:03:35,670
When you are team prioritizes a more
decoupled and domain centric design.

73
00:03:36,120 --> 00:03:38,970
You may want to consider a
different architecture such as the onion.

74
00:03:39,330 --> 00:03:41,710
Or hexagonal
architectural patterns.

75
00:03:42,000 --> 00:03:45,150
These architectures are well
suited for complex domain model and

76
00:03:45,330 --> 00:03:46,530
and domain driven design.

77
00:03:46,860 --> 00:03:50,830
Allowing the application to evolve
independently of external factors.

78
00:03:50,940 --> 00:03:51,420
Don't worry

79
00:03:51,570 --> 00:03:55,240
we'll be diving into both of these
architectures in the following lessons.

