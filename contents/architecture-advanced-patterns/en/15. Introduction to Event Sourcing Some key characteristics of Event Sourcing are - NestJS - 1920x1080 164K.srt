1
00:00:00,841 --> 00:00:01,740
Event sourcing

2
00:00:01,920 --> 00:00:06,730
is an architectural pattern utilized in
software development and distributed systems.

3
00:00:06,780 --> 00:00:10,710
Where this state of an application is
determined by a sequence of events.

4
00:00:11,100 --> 00:00:12,720
Rather than storing
the current state

5
00:00:12,930 --> 00:00:15,160
as a single record
in a database.

6
00:00:15,750 --> 00:00:16,740
In event sourcing

7
00:00:17,040 --> 00:00:21,000
each change to the application state
is captured as and of mutable event.

8
00:00:21,420 --> 00:00:25,140
These events represent
meaningful actions or

9
00:00:25,140 --> 00:00:26,140
facts that have occurred
within the system.

10
00:00:26,430 --> 00:00:28,630
Instead of updating
the state directly.

11
00:00:28,770 --> 00:00:31,350
New events are
appended to an event store

12
00:00:31,500 --> 00:00:33,520
in chronological order.

13
00:00:33,870 --> 00:00:36,870
This is fundamentally different
from the traditional approach.

14
00:00:37,200 --> 00:00:41,770
Where the current status stored in a database
and updated whenever a change occurs.

15
00:00:42,930 --> 00:00:45,540
Some key characteristics
of event sourcing are

16
00:00:45,810 --> 00:00:47,440
immutable events.

17
00:00:47,640 --> 00:00:48,060
Events

18
00:00:48,180 --> 00:00:50,640
cannot be altered
or deleted once store.

19
00:00:51,030 --> 00:00:56,590
Ensuring an audible record of all changes
made to the application state over time.

20
00:00:57,722 --> 00:00:59,142
Event store.

21
00:00:59,242 --> 00:01:01,380
Events are stored
in an event store.

22
00:01:01,770 --> 00:01:04,260
Which is an append
only log of events.

23
00:01:04,650 --> 00:01:09,133
The event store is the single
source of truth for the application state.

24
00:01:09,870 --> 00:01:11,740
And state reconstruction.

25
00:01:12,060 --> 00:01:16,800
The application state
can be reconstructed by

26
00:01:16,800 --> 00:01:17,800
replying all the events
from the event store.

27
00:01:17,910 --> 00:01:22,349
This allows for a comprehensive historical
view of the application stay and supports

28
00:01:22,380 --> 00:01:24,240
features like time
travel debugging

29
00:01:24,360 --> 00:01:25,600
and auditing.

30
00:01:26,880 --> 00:01:29,100
Some benefits of
event sourcing are

31
00:01:29,400 --> 00:01:30,400
auditability.

32
00:01:30,690 --> 00:01:34,710
Event sourcing provides
a complete history of all

33
00:01:34,711 --> 00:01:35,850
changes made to the
application state over time.

34
00:01:36,390 --> 00:01:40,590
This allows us to easily audit the system
and understand how the status of vault.

35
00:01:40,950 --> 00:01:42,330
Where aires might have occurred

36
00:01:42,450 --> 00:01:43,450
etc.

37
00:01:44,070 --> 00:01:45,330
Time travel debugging

38
00:01:45,510 --> 00:01:49,830
gives us the ability to replay events
and enables developers to time travel

39
00:01:50,010 --> 00:01:51,420
and debug the application

40
00:01:51,690 --> 00:01:53,160
at any point in the past.

41
00:01:53,490 --> 00:01:56,560
Simplifying issue
diagnosis and resolution.

42
00:01:57,390 --> 00:01:58,320
And lastly

43
00:01:58,440 --> 00:01:59,830
scale ability.

44
00:01:59,940 --> 00:02:03,630
Event sourcing allows
us to scale the read and

45
00:02:03,660 --> 00:02:04,660
right side of the
application independently.

46
00:02:05,790 --> 00:02:08,130
So while event sourcing
has many benefits

47
00:02:08,430 --> 00:02:11,620
as anything else it also
comes with some drawbacks.

48
00:02:12,240 --> 00:02:14,050
One being complexity.

49
00:02:14,340 --> 00:02:18,510
Event sourcing is a
complex pattern that

50
00:02:18,510 --> 00:02:19,510
requires a lot of boilerplate
code to implement.

51
00:02:19,560 --> 00:02:23,700
This can make the project difficult to
understand and maintain so always consider the

52
00:02:23,700 --> 00:02:26,140
tradeoffs before
using this pattern.

53
00:02:26,460 --> 00:02:27,120
And also

54
00:02:27,240 --> 00:02:28,810
eventual consistency.

55
00:02:29,340 --> 00:02:33,330
The read side of the application is
eventually consistent with the right side.

56
00:02:33,960 --> 00:02:37,260
This means that there
might be a delay between

57
00:02:37,260 --> 00:02:37,980
the time and event is
written to the event store

58
00:02:38,280 --> 00:02:41,471
in the time it is processed
by the read side.

59
00:02:41,670 --> 00:02:43,710
As we mentioned
in a previous lesson.

60
00:02:44,070 --> 00:02:48,360
Event sourcing is often used in can
injunction with the seek you are as pattern.

61
00:02:48,720 --> 00:02:51,760
Which we have of course
started implementing in this course.

62
00:02:52,110 --> 00:02:52,980
In this case

63
00:02:53,220 --> 00:02:57,090
the right side of the
application is responsible

64
00:02:57,090 --> 00:02:58,090
for storing events
in the event store.

65
00:02:58,380 --> 00:03:02,160
While the read side is responsible
for reading events from the event store

66
00:03:02,400 --> 00:03:04,780
and updating the
read model accordingly.

67
00:03:05,850 --> 00:03:06,870
In the next lesson

68
00:03:07,050 --> 00:03:10,650
we're going to move past
theory and the pros and cons

69
00:03:10,650 --> 00:03:11,790
and learn how to actually
implement event sourcing

70
00:03:11,910 --> 00:03:13,660
in our and sgs applications.

