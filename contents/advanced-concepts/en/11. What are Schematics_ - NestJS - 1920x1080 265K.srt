1
00:00:00,960 --> 00:00:05,040
A schematic is a template based code
generator that is a set of instructions for

2
00:00:05,040 --> 00:00:07,410
transforming a
software project by either

3
00:00:07,530 --> 00:00:09,910
generating or modifying coat.

4
00:00:10,200 --> 00:00:10,770
The angular

5
00:00:10,980 --> 00:00:14,070
kit schematics were introduced by
the angler team and twenty eighteen.

6
00:00:14,400 --> 00:00:14,880
However

7
00:00:15,210 --> 00:00:18,120
even though the schematics
were developed by the angler

8
00:00:18,210 --> 00:00:19,590
team and despite the word
angular being in the name.

9
00:00:19,950 --> 00:00:22,140
Any one could still
use them in any sense

10
00:00:22,470 --> 00:00:24,030
to generate any type of code.

11
00:00:24,420 --> 00:00:25,920
As they are platform
independent.

12
00:00:26,310 --> 00:00:29,220
The you could technically generate
anything whether it's ness jas

13
00:00:29,370 --> 00:00:29,970
react

14
00:00:30,120 --> 00:00:31,600
vue etc.

15
00:00:32,760 --> 00:00:37,230
He could utilize the schematics to enforce
architectural rules and conventions making

16
00:00:37,230 --> 00:00:40,092
our projects consistent
and injure operatives.

17
00:00:40,167 --> 00:00:43,320
Or we could create schematics to
help us generate commonly used coat

18
00:00:43,620 --> 00:00:45,180
shared services modules

19
00:00:45,450 --> 00:00:48,880
interfaces health
checks docker files etc.

20
00:00:49,200 --> 00:00:50,970
For a more real world example.

21
00:00:51,300 --> 00:00:54,570
With the help of schematics we could reduce
the amount of time we might need to set

22
00:00:54,570 --> 00:00:58,600
up all the boilerplate for creating a
new microservice within our organization

23
00:00:58,710 --> 00:01:00,600
by creating a
microservice schematic.

24
00:01:00,990 --> 00:01:04,260
A generates all the common
cold loggers tools etc.

25
00:01:04,590 --> 00:01:07,690
We might commonly used in
our organizations microservices.

26
00:01:09,000 --> 00:01:13,140
As you can hopefully see
the use cases and applications

27
00:01:13,155 --> 00:01:14,490
for creating our own custom
schematics can be endless.

28
00:01:14,970 --> 00:01:15,540
In fact.

29
00:01:15,900 --> 00:01:19,560
We've already used schematics multiple
times as a part of this course extension

30
00:01:19,830 --> 00:01:23,500
as that's exactly what the nastiest
seal i use us under the hood.

31
00:01:23,640 --> 00:01:26,250
All the generators we
executed in previous lessons.

32
00:01:26,610 --> 00:01:29,250
Weather we've been generating
modules controllers or pipes

33
00:01:29,520 --> 00:01:33,450
were just simple predefined
schematics coming

34
00:01:33,450 --> 00:01:34,450
from the nes j slash
schematics package.

35
00:01:34,830 --> 00:01:38,100
In the next lesson will implement
a custom schematic ourselves

36
00:01:38,340 --> 00:01:41,940
which internally will execute the
existing ness Jess module schematic

37
00:01:42,360 --> 00:01:43,080
and afterwards

38
00:01:43,320 --> 00:01:47,520
generate a module definition
file that uses the configurable

39
00:01:47,521 --> 00:01:49,630
module builder we
presented in a previous lesson.

40
00:01:49,830 --> 00:01:50,910
As an added bonus.

41
00:01:51,360 --> 00:01:54,750
Will set up the schematic to automatically
update the module class to extend the

42
00:01:54,750 --> 00:01:58,030
configurable class exported
from the module definition.

43
00:01:58,440 --> 00:02:00,540
Of all that sounds like a
lot right now don't worry.

44
00:02:00,930 --> 00:02:04,240
We'll be going through everything
step by step in the next lesson.

