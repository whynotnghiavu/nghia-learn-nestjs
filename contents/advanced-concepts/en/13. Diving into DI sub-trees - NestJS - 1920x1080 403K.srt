1
00:00:00,960 --> 00:00:03,840
Every nestorius js application
has at least one module

2
00:00:03,960 --> 00:00:04,740
a route module.

3
00:00:05,220 --> 00:00:05,940
The route module

4
00:00:06,150 --> 00:00:09,180
is the starting point nest users
to build the application graph.

5
00:00:09,540 --> 00:00:13,050
Which is the internal data structure
that nest users to resolve module

6
00:00:13,290 --> 00:00:15,610
and provider relationships
and dependencies.

7
00:00:15,750 --> 00:00:16,890
In this directed graph

8
00:00:17,190 --> 00:00:18,810
in which the edges
heavy direction.

9
00:00:19,230 --> 00:00:22,170
Every module is a effectively
represented as a single node

10
00:00:22,350 --> 00:00:24,180
importing another
module or node.

11
00:00:24,750 --> 00:00:29,080
Instructs the nest framework to create an
edge between these two points in the graph.

12
00:00:29,760 --> 00:00:31,620
Although this graph
is statically scoped

13
00:00:31,740 --> 00:00:35,760
and doesn't get recreated
over time meaning that only a

14
00:00:35,760 --> 00:00:37,260
single instance spends the
entire applications life cycle

15
00:00:37,560 --> 00:00:40,290
it is possible that it may
contain modules or nodes.

16
00:00:40,620 --> 00:00:42,900
The register non
statically scope providers

17
00:00:43,140 --> 00:00:43,740
specifically

18
00:00:43,950 --> 00:00:45,820
request scope providers.

19
00:00:46,380 --> 00:00:51,090
Requests scoped providers get instantiated
dynamically upon receiving a signal.

20
00:00:51,510 --> 00:00:53,490
In terms of for
example rest a p eyes.

21
00:00:53,850 --> 00:00:56,350
This signal would
be an http request.

22
00:00:56,640 --> 00:00:57,210
However

23
00:00:57,390 --> 00:01:01,170
for things like cron jobs this signal
will be the invocation of the job itself.

24
00:01:01,500 --> 00:01:04,950
You can see that when it comes to how
requests go providers are invoked it really

25
00:01:04,950 --> 00:01:07,720
depends on the context
of an individual application.

26
00:01:08,130 --> 00:01:09,540
In reaction to that signal.

27
00:01:09,900 --> 00:01:13,320
Know she has constructs a so
called dependency injection subtree

28
00:01:13,620 --> 00:01:15,240
that's associated
with a given signal.

29
00:01:15,840 --> 00:01:16,470
For instance

30
00:01:16,740 --> 00:01:18,540
where an incoming http request

31
00:01:18,720 --> 00:01:22,020
it instantiates a new controller
that declares a specific route.

32
00:01:22,620 --> 00:01:23,340
This instance

33
00:01:23,490 --> 00:01:25,860
is created exclusively
for that particular request

34
00:01:26,220 --> 00:01:29,620
and will be removed when the
request processing has completed.

35
00:01:29,880 --> 00:01:33,360
And this lesson will showcase
how you can manually

36
00:01:33,361 --> 00:01:34,830
construct and manager one
dependency injection subtrees

37
00:01:35,100 --> 00:01:37,200
using the power of
the module ref class.

38
00:01:37,560 --> 00:01:37,950
So

39
00:01:38,220 --> 00:01:39,383
let's switch to r ID

40
00:01:39,630 --> 00:01:43,900
and using the nes jsc ally let's
generate a new resource called tax.

41
00:01:46,440 --> 00:01:47,760
With this resource of place.

42
00:01:48,180 --> 00:01:50,730
As navigate to the auto
generated tax service class

43
00:01:51,000 --> 00:01:54,900
and make it request
scoped passing and scoped

44
00:01:54,900 --> 00:01:55,900
out request object to
the injectable decorator.

45
00:01:56,880 --> 00:01:59,040
As we already learned
in the fundamental scores.

46
00:01:59,460 --> 00:02:01,920
Scopes actually bubble
up the injection chain

47
00:02:02,070 --> 00:02:05,760
this means that if the
tags controller depends

48
00:02:05,760 --> 00:02:06,540
on the tax service which
is now request scope.

49
00:02:06,960 --> 00:02:09,880
It implicitly becomes
request scope as well.

50
00:02:10,110 --> 00:02:12,960
All right next up was
opened the tags module file

51
00:02:13,200 --> 00:02:16,870
and inject the module ref provider
using the standard approach.

52
00:02:19,860 --> 00:02:23,670
Let's also make the tags
module class implement

53
00:02:23,670 --> 00:02:24,970
the an application
bootstrap life cycle hook.

54
00:02:25,170 --> 00:02:25,787
Our ID

55
00:02:25,920 --> 00:02:29,830
should prompt us to implement
the interface lets go ahead and do it.

56
00:02:30,840 --> 00:02:32,910
Inside of this an application
bootstrap method.

57
00:02:33,270 --> 00:02:37,500
As dynamically resolve the
request scope tag service

58
00:02:37,560 --> 00:02:38,580
provider using the module
rough in it's resolve method

59
00:02:38,970 --> 00:02:41,410
and let's console
log that serve as out.

60
00:02:42,630 --> 00:02:46,380
Know that this resolve method may come in
handy when testing requests go providers in

61
00:02:46,380 --> 00:02:48,708
the future so always
try to keep it a mind.

62
00:02:49,110 --> 00:02:50,590
Let's save our changes.

63
00:02:50,640 --> 00:02:51,630
Open up our terminals

64
00:02:51,750 --> 00:02:52,950
and as we can see here

65
00:02:53,099 --> 00:02:56,920
are tag service was instantiate
properly just as we should expect.

66
00:02:57,150 --> 00:02:58,150
Great.

67
00:02:58,560 --> 00:02:59,820
Back to our task at hand.

68
00:03:00,300 --> 00:03:02,310
Let's talk about what
exactly happened here.

69
00:03:03,000 --> 00:03:06,300
So what the module ref dot
resolve method does under the hood

70
00:03:06,540 --> 00:03:09,840
is that it internally constructs a
dedicated dependency injection sub tree.

71
00:03:10,200 --> 00:03:13,570
Where our tax service is
the root note of that tree.

72
00:03:13,920 --> 00:03:18,000
This sub tree has its own unique contexts
identifier that represents that true.

73
00:03:18,570 --> 00:03:19,560
Who better understand that.

74
00:03:19,890 --> 00:03:23,699
Let's create two copies
of the tag service provider

75
00:03:23,699 --> 00:03:25,270
calling resolve twice and
comparing their references.

76
00:03:28,080 --> 00:03:31,660
And as we can see in our
terminals they are in fact not equal.

77
00:03:31,770 --> 00:03:35,070
To as we've mentioned
above the resolve method

78
00:03:35,070 --> 00:03:35,610
returns a unique
instance of the provider

79
00:03:35,730 --> 00:03:38,171
from its own diy
container subtree.

80
00:03:38,220 --> 00:03:39,900
These instances are not equal

81
00:03:40,080 --> 00:03:42,190
as they belong
to different trees.

82
00:03:42,840 --> 00:03:45,840
To generate a single instance
across multiple resolve calls

83
00:03:45,954 --> 00:03:48,840
in ensure are they share the same
generated DEA container subtree.

84
00:03:49,170 --> 00:03:52,672
We can pass a context
identifier to the resolve method.

85
00:03:52,831 --> 00:03:53,220
First.

86
00:03:53,550 --> 00:03:57,816
Let's use the context idea factory
class to generate a context identifier.

87
00:03:58,050 --> 00:03:59,850
This class provides
a create method.

88
00:04:00,190 --> 00:04:02,560
Returns inappropriate
unique identifier.

89
00:04:02,940 --> 00:04:04,770
And with this context
idea and place.

90
00:04:05,130 --> 00:04:08,500
Let's pass it in as the second for
diameter of the resolved invocations.

91
00:04:12,060 --> 00:04:13,380
And if we save our changes

92
00:04:13,740 --> 00:04:17,160
and take a look at our
terminals again we'll

93
00:04:17,250 --> 00:04:17,850
see that are instances
are now equal hence true.

94
00:04:18,360 --> 00:04:19,360
Great.

95
00:04:19,560 --> 00:04:20,100
All right

96
00:04:20,220 --> 00:04:22,740
so we already know how
to generate context ids

97
00:04:22,860 --> 00:04:27,000
ids that represent our subtrees and
the actual DEA subtrees using either a

98
00:04:27,210 --> 00:04:29,880
specific contexts ID or
the auto generate one.

99
00:04:30,450 --> 00:04:34,649
We also know that
request scope providers can

100
00:04:34,680 --> 00:04:35,130
inject a request object
acre a signal payload

101
00:04:35,412 --> 00:04:36,120
is associated

102
00:04:36,240 --> 00:04:37,800
with the host the i sub tree.

103
00:04:38,250 --> 00:04:39,810
So for demonstration purposes.

104
00:04:40,140 --> 00:04:44,142
As navigate to the tax service
class an eject the request there.

105
00:04:44,940 --> 00:04:47,860
It's also make sure to
console log the request out.

106
00:04:48,660 --> 00:04:50,970
Next let's switch back
to the tags module file

107
00:04:51,300 --> 00:04:52,500
and to make things simpler

108
00:04:52,800 --> 00:04:56,230
let's make sure we create only
one instance of the tax service.

109
00:04:59,640 --> 00:05:03,990
And now for demonstration purposes let's
register a request payload for our sub tree

110
00:05:04,290 --> 00:05:08,020
using the register request by
contacts ID method as follows.

111
00:05:08,970 --> 00:05:10,450
But save our changes.

112
00:05:10,500 --> 00:05:12,270
Open up our terminals and voila.

113
00:05:12,660 --> 00:05:16,440
There's our request object
acre a signal payload that

114
00:05:16,440 --> 00:05:17,820
successfully associated
with the host the i sub tree.

115
00:05:18,480 --> 00:05:19,050
Lastly

116
00:05:19,320 --> 00:05:22,020
just a few more important
notes about the context ids.

117
00:05:22,380 --> 00:05:26,500
In fact a context ID is just a
regular unique javascript object.

118
00:05:26,700 --> 00:05:30,270
Nest jazz associates sub to these
with their corresponding ID objects

119
00:05:30,570 --> 00:05:32,550
and if the context ID
gets garbage collected

120
00:05:32,850 --> 00:05:34,560
so does the entire dui sub tree.

121
00:05:35,220 --> 00:05:37,050
That meets the eye
subtrees are ephemeral

122
00:05:37,170 --> 00:05:41,110
meaning that they are removed as
soon as or context ideas garbage collected.

123
00:05:41,490 --> 00:05:45,360
Just keep in mind that if you keep track of
the contexts ID for example by storing it

124
00:05:45,360 --> 00:05:47,490
in the static array or
any other collection.

125
00:05:47,910 --> 00:05:48,379
The subtree

126
00:05:48,480 --> 00:05:51,550
associated with that context
object will never get removed.

127
00:05:52,021 --> 00:05:55,170
It so now that we have an understanding
of the basic mechanics of DEA subtrees.

128
00:05:55,530 --> 00:05:59,080
Let's dive into a bit more
practical example in the next lesson.

