1
00:00:01,020 --> 00:00:03,840
Along with traditional
object oriented hierarchies

2
00:00:04,020 --> 00:00:07,170
another popular way of building up
classes from reusable components

3
00:00:07,410 --> 00:00:10,170
is to build them by combining
simpler partial classes.

4
00:00:10,590 --> 00:00:12,910
This is known as
the mix and patter.

5
00:00:13,221 --> 00:00:17,730
May already be familiar with the concept of
mixins or traits from languages like scala

6
00:00:18,150 --> 00:00:21,960
but the mixon pattern
has also gained some pop

7
00:00:21,960 --> 00:00:22,290
clarity in the javascript
community as well.

8
00:00:22,950 --> 00:00:27,220
Mixins provide a form of code reuse
that is based on composing behavior.

9
00:00:27,510 --> 00:00:31,111
Flexibility gained
from using make sense

10
00:00:31,111 --> 00:00:31,260
becomes apparent once
you start composing room.

11
00:00:31,652 --> 00:00:32,190
The class.

12
00:00:32,610 --> 00:00:34,350
Hint include as many
mixins as you want

13
00:00:34,650 --> 00:00:35,880
as opposed to inheritance

14
00:00:36,090 --> 00:00:38,380
which can only
inherit from one class.

15
00:00:38,730 --> 00:00:40,620
Now that we understand
the basics of mix sense

16
00:00:40,800 --> 00:00:43,680
let's dive into some code to see
some practicals use cases for them

17
00:00:43,860 --> 00:00:46,120
that we might need in
our future applications.

18
00:00:47,070 --> 00:00:47,697
Using the next

19
00:00:47,912 --> 00:00:51,810
seal i let's generate a new mixing
class and call it with you you ID.

20
00:00:52,320 --> 00:00:55,450
Placing it within a
common slash mixins fallen.

21
00:00:55,650 --> 00:00:59,920
Know it will end the file with dot
mixon as well just for clarity's sake.

22
00:01:00,060 --> 00:01:01,770
Let's open up this
newly generated file

23
00:01:02,040 --> 00:01:05,260
and paste the following code which
can be found below the course video.

24
00:01:06,210 --> 00:01:07,140
As we can see here

25
00:01:07,380 --> 00:01:09,090
the with you you ID mixon.

26
00:01:09,450 --> 00:01:11,820
We created generate
a random you ID and a.

27
00:01:12,180 --> 00:01:14,200
It to the you you ID property.

28
00:01:14,580 --> 00:01:16,200
We could have also
declared methods

29
00:01:16,410 --> 00:01:18,300
and even a constructor
here if we wanted to

30
00:01:18,450 --> 00:01:20,230
more on that in a moment.

31
00:01:20,910 --> 00:01:25,290
The function here accepts a parameter
called base of the generic type tea bags.

32
00:01:25,740 --> 00:01:29,431
In strain to be compatible
with type from nastiest common.

33
00:01:29,550 --> 00:01:31,950
Type your represents
something that can be constructed

34
00:01:32,070 --> 00:01:33,430
meaning a class.

35
00:01:33,810 --> 00:01:35,560
Within the body of the function.

36
00:01:35,610 --> 00:01:40,080
We create in return a
new class that derives from

37
00:01:40,080 --> 00:01:41,170
the base class that has
passed into the function.

38
00:01:41,490 --> 00:01:45,420
Note that the class keyword is not
followed by a name although it could be

39
00:01:45,780 --> 00:01:49,050
but this name would only be
useful locally within the classes body.

40
00:01:49,470 --> 00:01:53,429
Just so the class could refer to itself if
let's say for example we wanted to access

41
00:01:53,490 --> 00:01:55,660
some static
properties of the class.

42
00:01:55,800 --> 00:01:56,880
All right so with all the

43
00:01:57,030 --> 00:01:59,020
place let's run
some experiments.

44
00:01:59,430 --> 00:02:01,080
As navigate to the
coffee class ass

45
00:02:01,200 --> 00:02:03,608
enlist declare a
constructive there.

46
00:02:04,290 --> 00:02:05,130
Below the class.

47
00:02:05,550 --> 00:02:09,150
Let's declare a new coffee
with you you ID sea ice variable

48
00:02:09,300 --> 00:02:11,340
and make it equal
to with your you ID.

49
00:02:11,670 --> 00:02:13,124
Passing and coffee.

50
00:02:14,910 --> 00:02:16,510
Using this new class.

51
00:02:16,590 --> 00:02:20,310
That's instantiate a new coffee
with view ID sea ice instance

52
00:02:20,460 --> 00:02:23,020
in assign it to eight
new coffee variable.

53
00:02:24,030 --> 00:02:25,620
Now if we access coffee

54
00:02:26,010 --> 00:02:26,820
and hit dot

55
00:02:27,090 --> 00:02:29,050
will see to
available properties.

56
00:02:29,490 --> 00:02:30,750
The name property

57
00:02:30,881 --> 00:02:33,060
we created within
our coffee class itself

58
00:02:33,450 --> 00:02:34,590
and you ID

59
00:02:34,710 --> 00:02:36,340
which came from our mixon.

60
00:02:36,600 --> 00:02:39,820
Which we can see is now
easily available here as well.

61
00:02:40,080 --> 00:02:41,430
Just for demonstration purposes

62
00:02:41,550 --> 00:02:44,310
as navigate to the with
you i defunct and again

63
00:02:44,640 --> 00:02:46,230
and add a new
method they're named

64
00:02:46,470 --> 00:02:47,850
regenerate you you ID.

65
00:02:48,210 --> 00:02:51,400
The code for which can be found
below the course video as always.

66
00:02:51,480 --> 00:02:52,470
Let's save our changes.

67
00:02:52,890 --> 00:02:54,300
At back to the coffee file

68
00:02:54,420 --> 00:02:55,470
hit dot again

69
00:02:55,740 --> 00:02:59,950
we can see that are ID he now
includes that method as well fantastic.

70
00:03:00,360 --> 00:03:03,300
Hopefully you're starting to see the
power and potential so far with make sense.

71
00:03:03,870 --> 00:03:07,710
Now that we understand
the mixins concept we can

72
00:03:07,710 --> 00:03:09,430
look into it a bit more
ness j a specific use case.

73
00:03:09,540 --> 00:03:11,070
Now for demonstration purposes

74
00:03:11,370 --> 00:03:15,940
as generate a new pipe using the
nastiest seal i ain't caught entity exists.

75
00:03:16,920 --> 00:03:18,720
Let's open up this
newly generated pipe

76
00:03:19,140 --> 00:03:22,900
and renamed the class to
entity exists pipe sea eyes.

77
00:03:23,550 --> 00:03:23,910
Now.

78
00:03:24,420 --> 00:03:26,190
Let's wrap this
class with a function

79
00:03:26,370 --> 00:03:29,130
using the original entity
exists pipe as a name.

80
00:03:29,700 --> 00:03:32,010
And let's make sure to
remove the export keyword.

81
00:03:32,340 --> 00:03:34,560
From the entity exist
pipe sea ice class

82
00:03:34,830 --> 00:03:37,420
and move that export
to the outer function.

83
00:03:37,770 --> 00:03:39,460
Below the class declaration.

84
00:03:39,600 --> 00:03:42,790
Let's add a return statement
returning the inner class.

85
00:03:43,080 --> 00:03:44,310
And last but not least.

86
00:03:44,850 --> 00:03:48,690
As at the return type to our function so
the era we're seeing right now goes away.

87
00:03:49,230 --> 00:03:50,280
Setting it to type.

88
00:03:50,670 --> 00:03:52,270
Of pipe transform.

89
00:03:53,130 --> 00:03:54,700
So far so good.

90
00:03:54,870 --> 00:03:55,410
Next up

91
00:03:55,530 --> 00:03:59,310
let's add an input argument to our
function named entity sea ice of type

92
00:03:59,430 --> 00:04:00,430
type.

93
00:04:01,470 --> 00:04:02,370
Using this parameter

94
00:04:02,670 --> 00:04:06,480
let's inject the corresponding repository
provider into our entity exists pipe

95
00:04:06,630 --> 00:04:08,410
using the following syntax.

96
00:04:10,320 --> 00:04:13,140
Know that since we are not
using and r m in this lesson.

97
00:04:13,629 --> 00:04:15,780
Will just use this
inline random tight

98
00:04:15,900 --> 00:04:18,100
but generally in
your application.

99
00:04:18,150 --> 00:04:21,120
This would most likely represent
a repository provided by and r m.

100
00:04:21,420 --> 00:04:24,390
Whether it's type r m
mongoose micro or m

101
00:04:24,660 --> 00:04:25,950
prisma or something else.

102
00:04:26,430 --> 00:04:30,340
We're just keeping things simple to
focus on learning the main concept here.

103
00:04:30,510 --> 00:04:31,050
Lastly.

104
00:04:31,380 --> 00:04:36,220
Let's flag our transform method as a sink
and add the following instruction and side.

105
00:04:39,840 --> 00:04:43,800
Remember that this is all pseudo code
and our case where just assuming that and

106
00:04:43,800 --> 00:04:47,400
exists method is exposed by
and or m specific repository here.

107
00:04:47,765 --> 00:04:48,240
Hopefully

108
00:04:48,510 --> 00:04:51,100
you get the idea of what
we're trying to do either way.

109
00:04:51,390 --> 00:04:53,050
Now with everything in place.

110
00:04:53,104 --> 00:04:55,150
To navigate to our
coffees controller.

111
00:04:57,120 --> 00:04:58,860
If we look at the
update method there

112
00:04:59,160 --> 00:05:01,330
we could see that it
takes two parameters.

113
00:05:01,380 --> 00:05:03,300
ID of the coffee to be updated

114
00:05:03,660 --> 00:05:04,960
and the payload.

115
00:05:05,340 --> 00:05:09,390
Let's by this newly created
entity exist pipe to the ID puram

116
00:05:09,600 --> 00:05:11,070
and since it's a mixon now.

117
00:05:11,400 --> 00:05:14,770
You can pass the coffee energy
class as an input parameter.

118
00:05:16,140 --> 00:05:16,860
And voila

119
00:05:17,100 --> 00:05:20,970
we've managed to utilize
mixins to help us bro errors in

120
00:05:20,970 --> 00:05:23,350
a specific case where an
entity does or does not exist.

121
00:05:23,490 --> 00:05:25,350
This was all merely
for example sake

122
00:05:25,770 --> 00:05:29,190
but you can imagine how using
mixins might be very beneficial in certain

123
00:05:29,190 --> 00:05:32,650
circumstances you'll run into
in your future nest applications.

124
00:05:33,210 --> 00:05:34,080
Before we finish

125
00:05:34,260 --> 00:05:36,060
let's make sure we
comment that line out

126
00:05:36,180 --> 00:05:40,509
as it was all pseudo code since we
don't have an rm set up in our application.

