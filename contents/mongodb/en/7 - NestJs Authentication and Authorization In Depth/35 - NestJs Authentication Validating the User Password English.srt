1
00:00:03,700 --> 00:00:06,040
‫Hello, everyone, and welcome back.

2
00:00:06,040 --> 00:00:10,960
‫In this new lesson, we are going to finish the implementation of our authentication controller.

3
00:00:10,960 --> 00:00:17,380
‫We are going to finish here the implementation of login by validating the user password and by creating

4
00:00:17,380 --> 00:00:20,920
‫a Json web token, which is going to be our bearer token.

5
00:00:20,920 --> 00:00:27,100
‫So as the name indicates, anyone that can present to the server this token that we are about to emit

6
00:00:27,130 --> 00:00:30,580
‫will be able to prove its identity to the server.

7
00:00:30,580 --> 00:00:32,080
‫Let's see how this works.

8
00:00:32,080 --> 00:00:39,040
‫So in order to validate our plaintext password against the password hash that we have read here from

9
00:00:39,040 --> 00:00:45,310
‫the database, we are going to be using again this small package called password hash and salt.

10
00:00:45,310 --> 00:00:53,110
‫So the advantage of this package is that it uses only internal node APIs in its implementation.

11
00:00:53,110 --> 00:00:59,530
‫So this means that this will always work in any node version because this algorithm, for example,

12
00:00:59,530 --> 00:01:06,620
‫that is getting used by the package for generating the hash comes from the node engine itself and not

13
00:01:06,620 --> 00:01:08,450
‫from a third party package.

14
00:01:08,450 --> 00:01:15,530
‫So in order to avoid all installation issues, we have chosen to use a package that simply uses node

15
00:01:15,530 --> 00:01:16,640
‫internal modules.

16
00:01:16,640 --> 00:01:21,230
‫This way this will always work independently of the node version.

17
00:01:21,230 --> 00:01:27,980
‫Now, in order to be able to validate our password hash against a plain text password, we need to use

18
00:01:27,980 --> 00:01:33,710
‫here the verify against API from the password hash and salt package.

19
00:01:33,710 --> 00:01:37,130
‫So going back to our program, let's see how this works.

20
00:01:37,130 --> 00:01:44,090
‫The first thing that we need to do is here in our import clauses to go ahead and import the password,

21
00:01:44,120 --> 00:01:45,920
‫hash and salt package.

22
00:01:45,920 --> 00:01:50,750
‫With this package in place, we are now ready to validate the plain text password.

23
00:01:50,750 --> 00:01:56,330
‫So we are going to be using here the password function that we have imported from the password hash

24
00:01:56,330 --> 00:01:57,710
‫and salt package.

25
00:01:57,710 --> 00:02:01,520
‫We are going to be passing to this function, the plain text password.

26
00:02:01,520 --> 00:02:06,110
‫So the password, just like the user typed it in the password input form.

27
00:02:06,110 --> 00:02:10,120
‫And we are going to be calling here the verify against API.

28
00:02:10,340 --> 00:02:14,420
‫This API call is going to take a couple of parameters.

29
00:02:14,420 --> 00:02:21,170
‫So the first parameter that we are going to be passing is the user password hash coming from the database.

30
00:02:21,170 --> 00:02:25,280
‫And the second parameter that we are going to be passing is a callback.

31
00:02:25,280 --> 00:02:31,070
‫So this callback is going to be called whenever the verification of the password has completed.

32
00:02:31,070 --> 00:02:37,580
‫So the first parameter as usual in node callbacks is going to be an error if the error has occurred.

33
00:02:37,580 --> 00:02:44,450
‫And the second parameter is going to contain the information if the password has been correctly verified

34
00:02:44,450 --> 00:02:45,200
‫or not.

35
00:02:45,230 --> 00:02:49,700
‫Now let's first handle the case when the password was wrong.

36
00:02:49,700 --> 00:02:57,140
‫So if the password has not been verified, then in that case we need to immediately throw back to the

37
00:02:57,140 --> 00:03:01,640
‫user an unauthorized exception in a similar way to what we did here.

38
00:03:01,640 --> 00:03:05,110
‫Whenever the email was not found in our database.

39
00:03:05,120 --> 00:03:11,390
‫Now notice that at this point we need to return as the output of this method, a promise that should

40
00:03:11,390 --> 00:03:16,850
‫be successfully evaluated if the password is valid and we manage to create a Json web token.

41
00:03:16,850 --> 00:03:21,770
‫But it should also throw an error in case, for example, this password is wrong.

42
00:03:21,770 --> 00:03:28,460
‫Now, in this case, because this password package has a callback that cannot be easily converted to

43
00:03:28,460 --> 00:03:30,080
‫a promise based API.

44
00:03:30,290 --> 00:03:37,310
‫The best way to handle these cases is to create our own custom promise and return it here as the output

45
00:03:37,310 --> 00:03:38,270
‫of this method.

46
00:03:38,300 --> 00:03:44,000
‫So for that we are going to be using the Promise constructor, which is a very convenient way of creating

47
00:03:44,000 --> 00:03:45,140
‫a custom promise.

48
00:03:45,140 --> 00:03:49,100
‫So this constructor takes here a couple of standard parameters.

49
00:03:49,100 --> 00:03:55,220
‫One is the resolve function to be called whenever the promise is successfully evaluated and the reject

50
00:03:55,220 --> 00:03:59,360
‫function that should be called whenever the promise gets rejected.

51
00:03:59,360 --> 00:04:06,650
‫So here inside the body of the promise construct here we are then going to be calling here the password

52
00:04:06,650 --> 00:04:08,570
‫verify against call.

53
00:04:08,570 --> 00:04:15,170
‫So now all we need to do is to take this logic that verifies if the password is correct or not, and

54
00:04:15,170 --> 00:04:20,510
‫we are going to paste it in here inside the body of our custom promise.

55
00:04:20,510 --> 00:04:26,780
‫So here, if the password has not been verified, meaning that the password that the user typed on the

56
00:04:26,780 --> 00:04:34,010
‫login form is wrong and does not match the password stored on the database, then on that case we should

57
00:04:34,010 --> 00:04:42,470
‫reject this custom promise so we can do so by simply calling here reject and by passing the value emitted.

58
00:04:42,500 --> 00:04:49,430
‫So in our case, we want to add here as the rejection value, a new unauthorized exception.

59
00:04:49,430 --> 00:04:52,910
‫Now here we have verified that the password is correct.

60
00:04:52,910 --> 00:04:59,870
‫So at this point in the program, all we need to do is to create a Json web token that is going to uniquely

61
00:04:59,870 --> 00:05:00,590
‫identify these.

62
00:05:00,650 --> 00:05:01,180
‫Use it.

63
00:05:01,190 --> 00:05:04,670
‫So that's what we're going to be doing in our next lesson.

