1
00:00:03,430 --> 00:00:05,680
‫Hello, everyone, and welcome back.

2
00:00:05,680 --> 00:00:09,430
‫In this new lesson, we are going to implement our get user middleware.

3
00:00:09,430 --> 00:00:13,150
‫So this middleware is going to decode our Json web token.

4
00:00:13,150 --> 00:00:19,090
‫It's going to validate its signature and it's going to retrieve from it the user profile information

5
00:00:19,090 --> 00:00:23,350
‫and attach it to the ongoing Http request object.

6
00:00:23,350 --> 00:00:29,470
‫So in order to parse our Json web token, we are going to be needing the Json web token library that

7
00:00:29,470 --> 00:00:35,050
‫we have imported here and we are also going to be using here our Json web token secret.

8
00:00:35,080 --> 00:00:41,860
‫Now with these imports in place, we can now go ahead and grab the authentication Json web token from

9
00:00:41,860 --> 00:00:43,240
‫the request object.

10
00:00:43,240 --> 00:00:49,720
‫So the request object has here a headers property and we want to access the authorization header.

11
00:00:49,720 --> 00:00:56,680
‫If you remember, this is the header that our front end is using to send the Json web token back to

12
00:00:56,680 --> 00:00:57,580
‫the back end.

13
00:00:57,580 --> 00:01:05,000
‫Let's go ahead and assign this Json web token to a variable we are going to call it of JWT token.

14
00:01:05,000 --> 00:01:09,320
‫So now we have here a plain string containing our Json web token.

15
00:01:09,320 --> 00:01:14,450
‫Let's then go ahead and check if the Json web token is present or not.

16
00:01:14,450 --> 00:01:22,640
‫So if the Json web token is not present, then this means that this is an unauthenticated Http request.

17
00:01:22,670 --> 00:01:29,930
‫Now the question here is should we go ahead and deny access to the targeted endpoint here immediately

18
00:01:29,930 --> 00:01:31,730
‫at the level of the get user middleware?

19
00:01:31,760 --> 00:01:34,550
‫Or should we allow this request to go through?

20
00:01:34,550 --> 00:01:35,120
‫Now?

21
00:01:35,120 --> 00:01:42,050
‫The responsibility of the get user middleware class is only to fetch the user profile from the request

22
00:01:42,050 --> 00:01:43,340
‫if it's present.

23
00:01:43,340 --> 00:01:49,250
‫If that information is not present, we consider that this is an unauthenticated Http request and we

24
00:01:49,250 --> 00:01:55,130
‫are going to allow the request to go through this middleware later on during the processing of the request.

25
00:01:55,160 --> 00:02:01,190
‫We are then going to decide if the request should be allowed to reach the code endpoint or not.

26
00:02:01,190 --> 00:02:07,700
‫Right now we want to make sure that if there is no authentication Json web token, we are going to allow

27
00:02:07,700 --> 00:02:09,500
‫the request to go through.

28
00:02:09,500 --> 00:02:16,040
‫Let's then call next here, which means that the request is allowed to go through either to the endpoint

29
00:02:16,040 --> 00:02:21,680
‫or to the next middleware in the middleware chain and let's return from this method.

30
00:02:21,710 --> 00:02:27,860
‫So if the authentication Json web token is not filled in, this middleware is essentially going to be

31
00:02:27,860 --> 00:02:28,550
‫bypassed.

32
00:02:28,550 --> 00:02:32,840
‫And this point here of our code is never going to be reached.

33
00:02:32,870 --> 00:02:38,480
‫On the other hand, if the authentication Json web token is present, then this means that this is an

34
00:02:38,480 --> 00:02:39,710
‫authenticated request.

35
00:02:39,710 --> 00:02:45,020
‫So we want to try to get the user information from the Json web token.

36
00:02:45,020 --> 00:02:47,900
‫Let's then decode the Json web token.

37
00:02:47,900 --> 00:02:51,260
‫We are going to use the JWT library that we have imported.

38
00:02:51,260 --> 00:02:58,070
‫We are going to call here the method verify and we're going to pass it the token that we want to verify.

39
00:02:58,100 --> 00:03:04,220
‫So the verify method is going to check if the signature of the Json web token is valid.

40
00:03:04,220 --> 00:03:10,580
‫And for that we need to pass it the signing secret that we have imported here from another file.

41
00:03:10,580 --> 00:03:17,030
‫So the output of the verify method in case that the verification is successful and the signature is

42
00:03:17,030 --> 00:03:24,260
‫valid, the output is going to be the payload of the Json web token, which in the case of our authentication

43
00:03:24,260 --> 00:03:30,440
‫Json web token, it's going to be the user profile containing the user email and the user roles.

44
00:03:30,440 --> 00:03:33,350
‫For example, the user can be a student, an admin.

45
00:03:33,350 --> 00:03:34,250
‫ET cetera.

46
00:03:34,250 --> 00:03:41,800
‫So now we have here the user profile information so we can then now store it in the request object.

47
00:03:41,810 --> 00:03:44,930
‫Let's check if the user information is present.

48
00:03:44,930 --> 00:03:51,380
‫So if we have here some user information, we are going to add here some logging so that we can see

49
00:03:51,410 --> 00:03:53,510
‫on the server console what is going on.

50
00:03:53,510 --> 00:03:58,880
‫We are going to say that we found the user details in the Json web token and we are going to log here

51
00:03:58,880 --> 00:03:59,780
‫the details.

52
00:03:59,780 --> 00:04:06,590
‫And now we are simply going to attach the user profile to the request object we are going to use here

53
00:04:06,590 --> 00:04:08,450
‫the square brackets notation.

54
00:04:08,450 --> 00:04:14,240
‫We are going to be filling in the user property and we are going to assign it here, the payload of

55
00:04:14,240 --> 00:04:15,650
‫the Json web token.

56
00:04:15,650 --> 00:04:21,950
‫Now this is what happens if the decoding of the Json web token went through successfully.

57
00:04:21,950 --> 00:04:26,660
‫If by some reason an error occurs, then we are going to catch it here.

58
00:04:26,660 --> 00:04:34,400
‫Let's add here an error variable and let's add here some logging so that we can see in the console what

59
00:04:34,400 --> 00:04:35,150
‫went wrong.

60
00:04:35,150 --> 00:04:41,750
‫Now, with this code in place, we are sure that independently of the fact if the verification went

61
00:04:41,750 --> 00:04:47,650
‫through correctly or not, our middleware is not going to crash and we are not going to end up with

62
00:04:47,660 --> 00:04:49,670
‫a hanging Http request.

63
00:04:49,670 --> 00:04:56,240
‫So after this code here, we are going to be calling the next function so that we allow our request

64
00:04:56,240 --> 00:05:00,500
‫to go through in the middleware chain or to reach the end.

65
00:05:00,610 --> 00:05:02,380
‫Point that it was targeting.

66
00:05:02,380 --> 00:05:06,100
‫And with this we have completed the implementation of our middleware.

67
00:05:06,130 --> 00:05:11,590
‫Let's now switch here to a larger window, perform a login and see the middleware in action.

68
00:05:11,590 --> 00:05:16,480
‫We are going to go here to the login page and we're going to perform here a user login.

69
00:05:16,480 --> 00:05:18,790
‫Let's keep an eye here on the network tab.

70
00:05:18,790 --> 00:05:20,320
‫So we have hit login.

71
00:05:20,320 --> 00:05:27,250
‫We got back here a response from the login endpoint with a new authentication Json web token that we

72
00:05:27,250 --> 00:05:33,010
‫have sent back to the client in this new slash API slash courses rest call.

73
00:05:33,010 --> 00:05:36,580
‫We can see here the Json web token in the authorization header.

74
00:05:36,580 --> 00:05:44,170
‫Now switching back here to our ID, let's open here the server terminal and let's confirm that indeed

75
00:05:44,170 --> 00:05:51,010
‫we have here the logging in our get user middleware saying that we found the user details in the Json

76
00:05:51,010 --> 00:05:51,820
‫web token.

77
00:05:51,820 --> 00:05:58,600
‫We have found that the user that performed this Http request has this particular email and that it has

78
00:05:58,600 --> 00:06:00,680
‫the role of a student.

79
00:06:00,680 --> 00:06:08,030
‫So this is the logging statement that we can see here in the implementation of our get user middleware.

80
00:06:08,060 --> 00:06:11,870
‫As you can see, the Json web token was decoded correctly.

81
00:06:11,870 --> 00:06:18,050
‫So now that we have decoded the token and we have attached this information to the request, we can

82
00:06:18,050 --> 00:06:22,070
‫now use it to perform decisions in our backend.

83
00:06:22,100 --> 00:06:28,550
‫We can, for example, allow or deny access to a given endpoint depending on the presence of a user

84
00:06:28,550 --> 00:06:34,850
‫profile in order to allow or deny access to an endpoint, we are going to be introducing a new Nestjs

85
00:06:34,850 --> 00:06:35,480
‫concept.

86
00:06:35,480 --> 00:06:38,870
‫We are going to be talking about Nestjs guards.

