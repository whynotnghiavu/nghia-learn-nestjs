1
00:00:03,610 --> 00:00:05,980
‫Hello, everyone, and welcome back.

2
00:00:05,980 --> 00:00:11,410
‫In this new lesson, we are going to implement the delete Crud functionality for the courses entity

3
00:00:11,410 --> 00:00:13,480
‫in our Nestjs controller.

4
00:00:13,480 --> 00:00:19,540
‫So here in our user interface, whenever we click on the delete button of a given course, this should

5
00:00:19,540 --> 00:00:21,400
‫trigger a database delete.

6
00:00:21,430 --> 00:00:27,520
‫In order to do that, we are going to be dispatching an Http delete controller to the backend that we

7
00:00:27,520 --> 00:00:30,250
‫need to somehow handle here in our controller.

8
00:00:30,250 --> 00:00:36,880
‫So let's define here a new method, also an async method that we're going to be calling delete course.

9
00:00:36,880 --> 00:00:43,000
‫So we are going to be needing to annotate this method with the nestjs delete decorator.

10
00:00:43,000 --> 00:00:49,630
‫Let's now see what the Http delete request will look like when it's sent from the front end so we can

11
00:00:49,630 --> 00:00:52,930
‫find the logic that handles here our delete button.

12
00:00:52,930 --> 00:00:57,850
‫In the following component we are going to look for courses card list component.

13
00:00:57,850 --> 00:01:03,830
‫So here is where we are going to find the front end logic that handles the deletion of a course.

14
00:01:03,830 --> 00:01:10,850
‫And as we can see, this is simply calling the delete course method in our courses Http service.

15
00:01:10,880 --> 00:01:18,620
‫This is using the Http client in order to issue an Http delete to our back end to this particular URL

16
00:01:18,620 --> 00:01:21,530
‫slash api slash courses course ID.

17
00:01:21,530 --> 00:01:27,350
‫So this is the only thing that we need to grab from the request the course ID, let's then switch back

18
00:01:27,350 --> 00:01:34,970
‫here to our controller and add here like we did here for the case of the update course logic, a new

19
00:01:35,510 --> 00:01:42,410
‫variable that is going to grab the course ID and let's also inject it here as a string on the delete

20
00:01:42,410 --> 00:01:43,490
‫course method.

21
00:01:43,490 --> 00:01:47,390
‫Now let's implement the controller logic for the delete operation.

22
00:01:47,390 --> 00:01:52,850
‫We are going to add here some logging and we are going to just like before access here courses.

23
00:01:52,850 --> 00:01:59,630
‫DB And we are going to call a new method that we are about to create called delete course to delete

24
00:01:59,630 --> 00:02:00,320
‫course method.

25
00:02:00,320 --> 00:02:07,820
‫We simply need to pass the course ID Let's go ahead and define here the method with this signature.

26
00:02:07,820 --> 00:02:13,640
‫So this is going to take here only one variable named course ID just like before.

27
00:02:13,640 --> 00:02:18,830
‫We are going to be using Mongoose in order to perform the Delete we are going to access here the course

28
00:02:18,830 --> 00:02:23,390
‫model and we are going to call delete one to the delete one method.

29
00:02:23,390 --> 00:02:28,130
‫We are going to specify here what is the ID of the course that we want to delete.

30
00:02:28,130 --> 00:02:35,060
‫And let's specify here that the underscore ID property should have the course ID value that we got from

31
00:02:35,060 --> 00:02:36,470
‫the Http request.

32
00:02:36,470 --> 00:02:43,070
‫So with this we have completed here the implementation of our deletion and as usual, delete one is

33
00:02:43,070 --> 00:02:49,010
‫going to return a promise that will be successfully evaluated whenever the deletion occurs on the database.

34
00:02:49,010 --> 00:02:55,490
‫So that's what we want to return here as the output of our delete course controller method.

35
00:02:55,490 --> 00:02:59,330
‫Now an important detail, we are returning here, a promise.

36
00:02:59,330 --> 00:03:05,870
‫So we need to make sure that here in this call to delete one, we return the promise that Mongoose has

37
00:03:05,870 --> 00:03:06,530
‫created.

38
00:03:06,530 --> 00:03:12,230
‫Otherwise we would have been here in our controller, accidentally returning a promise that was not

39
00:03:12,230 --> 00:03:15,650
‫linked to the deletion of the entity from the database.

40
00:03:15,650 --> 00:03:19,520
‫So this way the deletion might not happen as we intended.

41
00:03:19,520 --> 00:03:23,570
‫And with this we are ready to try our Crud delete functionality.

42
00:03:23,570 --> 00:03:25,880
‫Let's switch here to a larger window.

43
00:03:25,880 --> 00:03:32,540
‫Let's open our application and here in our list of courses, let's select here a course to delete.

44
00:03:32,540 --> 00:03:36,080
‫Let's choose, for example, this one, the angular core deep dive.

45
00:03:36,080 --> 00:03:41,600
‫We are going to click here on Delete and let's keep an eye here on the network log of the dev tools.

46
00:03:41,600 --> 00:03:42,980
‫We're going to hit delete.

47
00:03:43,010 --> 00:03:49,700
‫We can see that the delete request has hit this endpoint slash API slash courses and here we have the

48
00:03:49,700 --> 00:03:56,690
‫course ID and we get here a new list of courses reloaded from the back end in the second get request.

49
00:03:56,690 --> 00:04:02,810
‫So if we now scroll down, we are going to see that the angular core deep dive course is no longer part

50
00:04:02,810 --> 00:04:03,590
‫of this list.

51
00:04:03,590 --> 00:04:05,660
‫It has been deleted in the database.

52
00:04:05,690 --> 00:04:13,070
‫If we refresh here in the MongoDB console, our list of courses and we searched through this list of

53
00:04:13,070 --> 00:04:18,680
‫courses, we are going to see that indeed the angular core deep dive course has been deleted as expected.

54
00:04:18,680 --> 00:04:24,200
‫Now, you might be wondering at this point in the course, what is the real difference between the controller

55
00:04:24,200 --> 00:04:26,480
‫class and the repository class?

56
00:04:26,480 --> 00:04:30,020
‫As many times here we are forwarding the parameters directly.

57
00:04:30,020 --> 00:04:35,360
‫Later on in the course, we are going to understand why we are going to be adding here some extra logic,

58
00:04:35,360 --> 00:04:41,900
‫such as validation of the input parameters, error handling that is not going to be part of the repository

59
00:04:41,930 --> 00:04:42,470
‫service.

60
00:04:42,470 --> 00:04:48,800
‫So the repository service only contains the database queries and data modification operations in the

61
00:04:48,800 --> 00:04:53,630
‫database that we want to be able to reuse on multiple parts of our backend.

62
00:04:53,630 --> 00:04:59,300
‫So let's then continue our Crud example and implement the final operation, which is going to be the

63
00:04:59,300 --> 00:05:00,680
‫create course and.

64
00:05:00,790 --> 00:05:01,330
‫Point.

