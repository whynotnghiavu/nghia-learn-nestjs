1
00:00:03,610 --> 00:00:05,950
‫Hello, everyone, and welcome back.

2
00:00:05,950 --> 00:00:12,250
‫In this new lesson, we are going to complete our complete grid example for the courses entity by implementing

3
00:00:12,250 --> 00:00:18,580
‫the last Crud operation that we haven't implemented yet, which is going to be the create course operation.

4
00:00:18,580 --> 00:00:21,850
‫So let's add here a new asynchronous method.

5
00:00:21,850 --> 00:00:24,100
‫We are going to call it create course.

6
00:00:24,100 --> 00:00:30,310
‫Let's add here some logging so that we can see on the console that the method is getting called and

7
00:00:30,310 --> 00:00:34,750
‫let's start the controller implementation of this Crud operation.

8
00:00:34,750 --> 00:00:40,900
‫So the first thing that we need to define is which type of Http call is going to trigger this method.

9
00:00:40,900 --> 00:00:47,680
‫And following typical rest conventions, we are going to assign this to an Http post request.

10
00:00:47,680 --> 00:00:54,190
‫So a post to slash API slash courses is going to trigger the create course method.

11
00:00:54,190 --> 00:00:56,740
‫Now let's see what we need in this method.

12
00:00:56,740 --> 00:01:02,810
‫From the Http request we are going to be needing here our course object.

13
00:01:02,810 --> 00:01:08,180
‫So all the properties that we are going to be setting here in the front end for the new course we need

14
00:01:08,180 --> 00:01:10,490
‫to receive here in a course variable.

15
00:01:10,490 --> 00:01:17,000
‫Now this is not going to be of type course because that would require us to define the ID of the course

16
00:01:17,000 --> 00:01:20,120
‫on the front end and we don't want to do that in this case.

17
00:01:20,120 --> 00:01:24,740
‫So instead we are going to be defining this as a partial course.

18
00:01:24,740 --> 00:01:27,680
‫And let's also define the return type of this method.

19
00:01:27,680 --> 00:01:33,860
‫So as usual, this is going to be returning a promise and the value emitted is going to be the course

20
00:01:33,860 --> 00:01:39,260
‫that was inserted in the database, including its identifier generated by MongoDB.

21
00:01:39,260 --> 00:01:41,690
‫So this will no longer be a partial course.

22
00:01:41,690 --> 00:01:44,330
‫It's going to be a full instance of a course.

23
00:01:44,330 --> 00:01:46,970
‫Let's now see how we are going to implement this.

24
00:01:47,000 --> 00:01:52,940
‫We are going to be calling our courses DB service and here we are going to be calling a new method that

25
00:01:52,940 --> 00:01:54,920
‫we are going to implement in a moment.

26
00:01:54,920 --> 00:01:57,200
‫This is going to be the Add course method.

27
00:01:57,200 --> 00:02:02,090
‫So here we are going to be passing the complete course that we have defined here.

28
00:02:02,090 --> 00:02:07,760
‫So to the Add course method, we are going to be passing the partial course that we have received here

29
00:02:07,760 --> 00:02:10,550
‫from the body of the Http request.

30
00:02:10,550 --> 00:02:17,600
‫So this needs that we need to annotate the course variable with the Add body decorator in order for

31
00:02:17,600 --> 00:02:22,610
‫nestjs to know that this contains the content of the Http body.

32
00:02:22,640 --> 00:02:26,510
‫Now Add course does not exist yet on our repository.

33
00:02:26,510 --> 00:02:28,940
‫Let's go ahead and define it now.

34
00:02:28,940 --> 00:02:35,360
‫We could insert a new entity in our database in a similar way to what we were doing here by calling

35
00:02:35,360 --> 00:02:36,350
‫course model.

36
00:02:36,350 --> 00:02:43,760
‫And from here we could call simply the Create method, pass it here, the course that we receive here.

37
00:02:43,760 --> 00:02:47,060
‫And this would take care of the insertion in the database.

38
00:02:47,060 --> 00:02:52,550
‫However, I'm going to take here the opportunity to show you a different way of using Mongoose.

39
00:02:52,550 --> 00:02:58,610
‫So we are going to be using the course model to create an in-memory object that is going to be linked

40
00:02:58,610 --> 00:03:01,370
‫by Mongoose to a database document.

41
00:03:01,370 --> 00:03:07,970
‫We are going to be defining here a new course object, and we are going to create it by calling here

42
00:03:07,970 --> 00:03:12,440
‫course model and by passing it here, the course data.

43
00:03:12,440 --> 00:03:18,080
‫So we have here the partial course data containing, for example, the title, the thumbnail, etcetera.

44
00:03:18,080 --> 00:03:25,370
‫And here we have created using the course model constructor function, a new instance of a course object

45
00:03:25,370 --> 00:03:32,270
‫that only exists for the moment in memory at the server and that it has not yet been saved to the database.

46
00:03:32,270 --> 00:03:37,340
‫So this new course object already has an ID, it already has a version timestamp.

47
00:03:37,340 --> 00:03:43,250
‫It corresponds to a MongoDB document that is ready to be saved on the database, but we have not saved

48
00:03:43,250 --> 00:03:44,360
‫it just yet.

49
00:03:44,360 --> 00:03:49,220
‫So we could use this object and link it, for example, to other objects.

50
00:03:49,220 --> 00:03:51,590
‫We could further modify it in memory.

51
00:03:51,590 --> 00:03:57,850
‫And when we are ready to save it to the database, we are going to be calling new course dot save.

52
00:03:57,860 --> 00:04:01,310
‫Now, the call to save is going to return us a promise.

53
00:04:01,310 --> 00:04:08,240
‫So we need to await for the promise to be resolved before proceeding with our Add course implementation.

54
00:04:08,240 --> 00:04:15,110
‫Let's annotate here, add course with the async keyword so that we can use the async await syntax.

55
00:04:15,110 --> 00:04:20,660
‫So here at this point we already have the new course document saved on the database.

56
00:04:20,660 --> 00:04:23,630
‫So now we need to return it here to the front end.

57
00:04:23,660 --> 00:04:28,400
‫Let's add here a type annotation and say that we are going to return here.

58
00:04:28,400 --> 00:04:30,230
‫A promise, of course.

59
00:04:30,230 --> 00:04:37,010
‫So the value here is going to be the full version of the course with its correct ID in order to obtain

60
00:04:37,010 --> 00:04:42,980
‫it here from the new course object that we have here in memory, we are going to be calling the two

61
00:04:42,980 --> 00:04:44,900
‫object Mongoose method.

62
00:04:44,900 --> 00:04:51,500
‫So this is going to convert this instance of the document in memory into an object that can be easily

63
00:04:51,500 --> 00:04:53,570
‫serialized back to the front end.

64
00:04:53,570 --> 00:05:00,110
‫Let's now return this plain object here as the output of this add course function.

65
00:05:00,110 --> 00:05:00,620
‫So we are.

66
00:05:00,690 --> 00:05:03,120
‫Turning here a plain value and not a promise.

67
00:05:03,120 --> 00:05:08,460
‫But as usual, the async await syntax is going to convert this into a promise for us.

68
00:05:08,490 --> 00:05:12,000
‫Now Mongoose has this notion of version tracking.

69
00:05:12,000 --> 00:05:17,370
‫So whenever we have an object that corresponds to a document on the database, Mongoose is going to

70
00:05:17,370 --> 00:05:18,090
‫keep track.

71
00:05:18,090 --> 00:05:24,750
‫If the version of the document in memory still matches the one from the database, and for that it's

72
00:05:24,750 --> 00:05:27,090
‫going to use an extra version property.

73
00:05:27,090 --> 00:05:33,390
‫So whenever we serialize here the course back to the front end, we want to send just the properties

74
00:05:33,390 --> 00:05:39,870
‫of the object and not any extra properties that only make sense to Mongoose because we are not using

75
00:05:39,870 --> 00:05:41,310
‫Mongoose on the front end.

76
00:05:41,340 --> 00:05:43,620
‫We are only using it on the back end.

77
00:05:43,650 --> 00:05:50,070
‫So here, in order to strip this extra version property from the serialized object, we are going to

78
00:05:50,070 --> 00:05:52,470
‫set here a configuration option.

79
00:05:52,470 --> 00:05:58,320
‫We are going to set the version key property to false, and this is going to make sure that to the back

80
00:05:58,320 --> 00:06:05,890
‫end we only send back the new version of the course as it exists on the database without any extra Mongoose

81
00:06:05,890 --> 00:06:07,240
‫specific properties.

82
00:06:07,270 --> 00:06:13,480
‫Now, going back here to our controller, we need to return this promise that we are getting back here

83
00:06:13,480 --> 00:06:21,370
‫from Add course to Nestjs so that Nestjs knows when the request is completed, the request will be completed

84
00:06:21,370 --> 00:06:27,790
‫when this promise gets evaluated successfully, let's now try out the new Create course functionality.

85
00:06:27,790 --> 00:06:32,410
‫We are going to switch here to a larger window and we're going to click here on the plus button.

86
00:06:32,410 --> 00:06:36,130
‫In order to create a new course, let's create here a new course.

87
00:06:36,130 --> 00:06:40,030
‫Then we are going to call it, for example, the angular testing course.

88
00:06:40,030 --> 00:06:43,300
‫We're going to add here a course test.

89
00:06:43,330 --> 00:06:46,480
‫Let's now define here the URL from the course.

90
00:06:46,480 --> 00:06:51,220
‫I'm going to paste in here a full URL to an image that I already have.

91
00:06:51,250 --> 00:06:55,150
‫You can use any link to any image that you have on the Internet.

92
00:06:55,150 --> 00:06:57,010
‫I'm going to select here a category.

93
00:06:57,010 --> 00:06:59,020
‫Let's select here beginner category.

94
00:06:59,020 --> 00:07:04,060
‫Let's turn a promotion on for this course and let's add here a description.

95
00:07:04,060 --> 00:07:07,600
‫I'm just going to add the same description as in the title.

96
00:07:07,600 --> 00:07:10,720
‫So let's now keep an eye here on the network tab.

97
00:07:10,720 --> 00:07:12,250
‫I'm going to click on Save.

98
00:07:12,280 --> 00:07:17,190
‫As you can see, an Http post request was issued against the backend.

99
00:07:17,230 --> 00:07:20,320
‫You can see that it's hitting slash API slash courses.

100
00:07:20,320 --> 00:07:25,450
‫And we can also see here the content of the body of the Http request.

101
00:07:25,480 --> 00:07:30,250
‫We can see that it contains the properties that we have defined but not the ID.

102
00:07:30,370 --> 00:07:36,940
‫So now as the response to this Http post request, we are going to get back here the new version of

103
00:07:36,940 --> 00:07:40,960
‫this object containing also the ID on the database.

104
00:07:40,960 --> 00:07:47,290
‫This means that if we now scroll down this list, we should see at the end appended a new version here

105
00:07:47,290 --> 00:07:48,610
‫of the testing course.

106
00:07:48,610 --> 00:07:53,470
‫So here it is, the version that we have just created using our front end.

107
00:07:53,470 --> 00:07:59,680
‫And with this we have completed the implementation of our Crud functionality in our courses controller

108
00:07:59,680 --> 00:08:03,460
‫endpoint, but our production functionality is going to be more than that.

109
00:08:03,490 --> 00:08:06,700
‫We need some error handling on these Http requests.

110
00:08:06,700 --> 00:08:12,370
‫We need to be able to validate some of the input parameters that are getting passed here to our controller

111
00:08:12,370 --> 00:08:17,830
‫and we need to make sure that we properly format the error response before sending it back to the front

112
00:08:17,830 --> 00:08:18,160
‫end.

113
00:08:18,160 --> 00:08:23,650
‫So in the next few lessons, we are going to be talking about error handling in Nestjs.

