1
00:00:03,700 --> 00:00:08,200
‫Hello, everyone, and welcome back to this new section on error handling.

2
00:00:08,200 --> 00:00:11,710
‫So how this error handling work in Nestjs?

3
00:00:11,740 --> 00:00:17,710
‫Let's take here an example for example of the update course method here in our courses controller.

4
00:00:17,710 --> 00:00:21,970
‫So the goal of this method is to update an existing course entity.

5
00:00:21,970 --> 00:00:27,460
‫As we can see, one of the parameters is the course ID identifying the entity that we want to update,

6
00:00:27,460 --> 00:00:31,060
‫and here we receive the properties that we want to modify.

7
00:00:31,090 --> 00:00:36,880
‫Now an important thing in the implementation of this update course method is to make sure that in this

8
00:00:36,880 --> 00:00:43,480
‫properties here of the course we are not receiving a new version of the course ID, so we don't want

9
00:00:43,480 --> 00:00:49,510
‫to accidentally overwrite the identifier of this entity on the database because then the course would

10
00:00:49,510 --> 00:00:56,470
‫become a completely new entity that might trigger data corruption problems in our application in case

11
00:00:56,470 --> 00:01:00,770
‫this ID was being used elsewhere to link to this particular course.

12
00:01:00,770 --> 00:01:03,830
‫So here we want to add some sort of validation.

13
00:01:03,830 --> 00:01:10,130
‫We want to make sure that these changes are not accidentally overwriting the identifier of the course.

14
00:01:10,130 --> 00:01:15,380
‫We might also want to add extra business validation rules such as, for example, the properties of

15
00:01:15,380 --> 00:01:17,840
‫a course should obey certain rules.

16
00:01:17,840 --> 00:01:18,650
‫Let's have a look.

17
00:01:18,650 --> 00:01:24,320
‫How could we trigger a validation error and send an appropriate response back to the client?

18
00:01:24,350 --> 00:01:31,280
‫Taking the example here of the update course method, we want to first check if the ID is being accidentally

19
00:01:31,280 --> 00:01:38,720
‫overwritten so we can do so by accessing here changes and making sure that the ID property is not filled

20
00:01:38,720 --> 00:01:38,990
‫in.

21
00:01:39,020 --> 00:01:43,100
‫If it is filled in, then we have here an error.

22
00:01:43,100 --> 00:01:49,310
‫We can throw an error here from a nestjs controller by using the Nestjs http exception.

23
00:01:49,310 --> 00:01:55,700
‫So let's go ahead and create here a new instance of this exception which should be imported from the

24
00:01:55,700 --> 00:01:57,830
‫Nestjs common package.

25
00:01:57,830 --> 00:02:01,610
‫Now to this exception, we need to pass two arguments.

26
00:02:01,610 --> 00:02:06,590
‫The first argument contains, for example, a message that we want to send back to the client.

27
00:02:06,590 --> 00:02:13,010
‫So let's add here, for example, the message can't update course ID and the second argument that we

28
00:02:13,010 --> 00:02:17,360
‫pass to Http exception is the status code that we want to send back.

29
00:02:17,360 --> 00:02:21,770
‫So in this case, we want to send back a 400 bad request.

30
00:02:21,800 --> 00:02:26,960
‫With this logic in place, if by accident we fill in this property, this error is going to be thrown

31
00:02:26,960 --> 00:02:29,630
‫and the update is not going to be performed.

32
00:02:29,630 --> 00:02:36,080
‫Now this error is going to be caught by a global default nestjs exception handler that is going to send

33
00:02:36,080 --> 00:02:38,240
‫us back a predefined response.

34
00:02:38,240 --> 00:02:42,680
‫We are going to see later on how to override that default behavior if we need to.

35
00:02:42,680 --> 00:02:46,550
‫Now, let's first test this simple error handling logic.

36
00:02:46,550 --> 00:02:50,150
‫In order to do that, we are going to need to form a bad request.

37
00:02:50,180 --> 00:02:54,800
‫Now, a simple way of forming a bad request is to use our application here.

38
00:02:54,800 --> 00:03:00,740
‫So let's go ahead and go to this dialog here, the Edit course dialog where we are trying to edit a

39
00:03:00,740 --> 00:03:05,930
‫course entity and let's add some logic that is going to corrupt our Http request.

40
00:03:05,960 --> 00:03:11,960
‫Let's say that accidentally here we had the bug and besides filling in here the multiple properties

41
00:03:11,960 --> 00:03:18,350
‫of the form, we accidentally also filled in here the underscore ID property, let's say with the value

42
00:03:18,380 --> 00:03:19,010
‫one.

43
00:03:19,010 --> 00:03:25,130
‫So any value that when checked here with this condition would end up throwing the exception.

44
00:03:25,130 --> 00:03:28,190
‫So the value one is a good example of that.

45
00:03:28,190 --> 00:03:32,900
‫Let's also add here a comment so that we don't forget to remove this later.

46
00:03:32,900 --> 00:03:35,930
‫Let's mention here that this is a simulated bug.

47
00:03:35,930 --> 00:03:39,920
‫Let's now try this malformed request here in a larger window.

48
00:03:39,920 --> 00:03:44,180
‫We are going to open here the edit course dialog and let's make here some changes.

49
00:03:44,180 --> 00:03:48,200
‫We are going to click on Save and we are going to keep an eye here on the network log.

50
00:03:48,200 --> 00:03:54,500
‫So if we now click Save indeed we get back here the status code bad request on the put call and here

51
00:03:54,500 --> 00:04:01,250
‫on the response we have our message can't update course ID status code 400 as expected.

52
00:04:01,250 --> 00:04:08,390
‫So as you can see our malformed request triggered here, our validation logic in our course controller.

53
00:04:08,390 --> 00:04:15,920
‫So throwing http exceptions from your controller is a good way of sending back to the client a specific

54
00:04:15,920 --> 00:04:18,860
‫status code and a specific error message.

55
00:04:18,860 --> 00:04:25,700
‫But even better than using directly the Http exception here in our controllers is to subclass it and

56
00:04:25,700 --> 00:04:28,190
‫create our own custom exceptions.

57
00:04:28,190 --> 00:04:31,160
‫For example, for reporting business errors.

58
00:04:31,160 --> 00:04:35,300
‫We are going to see later on in the course how to subclass Http exception.

59
00:04:35,300 --> 00:04:42,320
‫Right now, let's give a couple more examples available on the Nestjs common package of commonly needed

60
00:04:42,380 --> 00:04:43,910
‫Http exceptions.

61
00:04:43,910 --> 00:04:49,670
‫By going over the Nestjs documentation, we are going to see that we already have available all these

62
00:04:49,670 --> 00:04:56,330
‫subclasses of Http exception for common problems such as a bad request exception, which is our case.

63
00:04:56,360 --> 00:05:00,200
‫Unauthorized or not found exception for with an exception.

64
00:05:00,200 --> 00:05:00,680
‫ET cetera.

65
00:05:00,820 --> 00:05:08,620
‫So we already have all these exceptions that return the corresponding status code as per rest conventions.

66
00:05:08,620 --> 00:05:14,920
‫For example, throwing a not found exception is going to send back a 404 not found status code to the

67
00:05:14,920 --> 00:05:15,610
‫client.

68
00:05:15,640 --> 00:05:22,900
‫In the particular case of our existing business validation, what we need here is a bad request exception

69
00:05:22,900 --> 00:05:25,360
‫which comes from the Nestjs package.

70
00:05:25,360 --> 00:05:31,060
‫So this exception, because it models the bad request exception does not need here a status code.

71
00:05:31,060 --> 00:05:36,700
‫This is going to be automatically filled in with 400 and our code is a bit more readable.

72
00:05:36,700 --> 00:05:43,120
‫We know better what is happening here now that we know the basics of error handling with Nestjs, let's

73
00:05:43,120 --> 00:05:43,390
‫see.

74
00:05:43,390 --> 00:05:46,150
‫How can we customize our error response?

75
00:05:46,150 --> 00:05:46,720
‫Let's see.

76
00:05:46,720 --> 00:05:51,190
‫How can we specify different error handling for different types of exceptions?

77
00:05:51,190 --> 00:05:57,190
‫Let's add a fallback catch all exception handler and later on in the course, we are going to see how

78
00:05:57,190 --> 00:06:01,070
‫to use Nestjs to validate our input parameters.

79
00:06:01,070 --> 00:06:07,520
‫Checking, for example, if the values provided here are actually valid properties according to the

80
00:06:07,520 --> 00:06:09,260
‫definition of a course.

81
00:06:09,260 --> 00:06:14,630
‫So we will be able to check, for example, if sequence number is being filled in with a numeric field

82
00:06:14,640 --> 00:06:21,410
‫URL with the string et-cetera, we will be able to do full validation of this interface according to

83
00:06:21,410 --> 00:06:22,940
‫its type definitions.

84
00:06:22,940 --> 00:06:28,790
‫Before doing that, let's learn how to customize the error response sent to the client in the case of

85
00:06:28,790 --> 00:06:29,870
‫a particular error.

86
00:06:29,870 --> 00:06:32,060
‫For example an Http exception.

