1
00:00:03,520 --> 00:00:05,690
‫Hello, everyone, and welcome back.

2
00:00:05,710 --> 00:00:11,080
‫In this lesson, we are going to learn how to configure the response generated by the validation pipe.

3
00:00:11,080 --> 00:00:17,230
‫So the validation pipe is going to throw an error if some of the input parameters of the request are

4
00:00:17,230 --> 00:00:24,190
‫considered not valid by applying the class validator decorators to our input model, in this case the

5
00:00:24,190 --> 00:00:25,120
‫course class.

6
00:00:25,120 --> 00:00:31,810
‫So if, for example, the icon property is not a string, then we are going to be throwing a new error

7
00:00:31,810 --> 00:00:37,570
‫that this time around we want to catch and format properly before sending the response back to the front

8
00:00:37,570 --> 00:00:37,900
‫end.

9
00:00:37,900 --> 00:00:42,850
‫For that, the first thing that we are going to need is a new custom validation exception.

10
00:00:42,850 --> 00:00:48,760
‫Here in our filters folder, we are going to create a new file that we are going to call validation

11
00:00:48,760 --> 00:00:50,920
‫dot exception, dot ts.

12
00:00:50,920 --> 00:00:54,490
‫So inside it we are going to define our new exception.

13
00:00:54,490 --> 00:01:01,490
‫Let's start by defining simply a validation exception class and let's have it extend the existing bad

14
00:01:01,490 --> 00:01:04,100
‫request exception from Nestjs.

15
00:01:04,100 --> 00:01:08,690
‫So this bad request exception is an Http exception.

16
00:01:08,690 --> 00:01:12,170
‫Let's now add a constructor to our custom exception.

17
00:01:12,170 --> 00:01:17,570
‫We are going to start by calling the super constructor of Bad Request Exception, and we're going to

18
00:01:17,570 --> 00:01:22,700
‫add here a mandatory parameter which we are going to call validation errors.

19
00:01:22,700 --> 00:01:29,810
‫So one instance of a course class or any other model class in our application might have one or more

20
00:01:29,810 --> 00:01:35,510
‫validation errors and let's report them back to the front end as an array of strings.

21
00:01:35,510 --> 00:01:38,420
‫So one string per validation error.

22
00:01:38,420 --> 00:01:42,170
‫All we have to do now is to find a way to throw this exception.

23
00:01:42,170 --> 00:01:49,760
‫Whenever a validation error occurs, we can do so by going here to our main file and here in the configuration

24
00:01:49,760 --> 00:01:55,370
‫of the validation pipe, we are going to specify here a property called Exception Factory.

25
00:01:55,400 --> 00:02:01,640
‫Now this property is going to receive a function that is going to get triggered whenever a validation

26
00:02:01,730 --> 00:02:02,870
‫error occurs.

27
00:02:02,870 --> 00:02:08,990
‫So the function is going to have here an input argument which is going to be an array of validation

28
00:02:08,990 --> 00:02:09,650
‫errors.

29
00:02:09,650 --> 00:02:16,100
‫What we want to do now is to take the validation errors that were created whenever we were validating

30
00:02:16,100 --> 00:02:22,280
‫an instance of a course, for example, and we want to define a validation exception that contains these

31
00:02:22,280 --> 00:02:24,620
‫errors with a well formatted error message.

32
00:02:24,620 --> 00:02:30,380
‫And we want to return this as the output of the exception factory function.

33
00:02:30,380 --> 00:02:36,440
‫So the validation pipe is going to see that we have produced here a new validation exception and then

34
00:02:36,440 --> 00:02:37,880
‫it's going to throw it.

35
00:02:37,910 --> 00:02:42,080
‫Now we are going to need to catch this exception later on with the filter.

36
00:02:42,080 --> 00:02:44,630
‫Right now, let's build the exception.

37
00:02:44,630 --> 00:02:49,640
‫We are going to define here a new property called Messages that is going to be derived here from the

38
00:02:49,640 --> 00:02:50,300
‫errors.

39
00:02:50,300 --> 00:02:53,180
‫Let's map each error into a string.

40
00:02:53,180 --> 00:03:00,350
‫Then let's take the error and let's build here a custom string using the template literal syntax.

41
00:03:00,350 --> 00:03:03,110
‫So let's mark first here in our string.

42
00:03:03,110 --> 00:03:06,230
‫What is the property to which the error belongs?

43
00:03:06,230 --> 00:03:12,800
‫So let's call here error dot property and let's say that this property has the wrong value and let's

44
00:03:12,800 --> 00:03:19,070
‫place in here the wrong value so that we know exactly what we need to change in our front end.

45
00:03:19,070 --> 00:03:26,540
‫Let's add here a comma and here we are going to be adding the complete error message that we got from

46
00:03:26,540 --> 00:03:28,760
‫applying each of the decorators.

47
00:03:28,760 --> 00:03:33,860
‫We can obtain this information by accessing error dot constraints.

48
00:03:33,860 --> 00:03:38,480
‫So for one, given property we might have several validation issues.

49
00:03:38,480 --> 00:03:44,600
‫For example, a value might not be a string and it might not follow a certain format such as, for example,

50
00:03:44,630 --> 00:03:46,640
‫being an email address.

51
00:03:46,640 --> 00:03:52,910
‫So we are going to take here our multiple error constraints and we are going to join them all in a single

52
00:03:52,910 --> 00:03:53,480
‫string.

53
00:03:53,480 --> 00:03:56,660
‫Let's then apply here object dot values.

54
00:03:56,660 --> 00:04:03,890
‫Let's get the values out of the constraints property and let's join all the constraint messages, for

55
00:04:03,890 --> 00:04:05,350
‫example, with a comma.

56
00:04:05,360 --> 00:04:11,960
‫Now that we have created here a properly formatted validation exception and we had the validation pipe

57
00:04:11,960 --> 00:04:17,360
‫through it, we now just need to catch it and properly format our error response.

58
00:04:17,360 --> 00:04:21,080
‫So for that, as usual, we are going to be creating here a filter.

59
00:04:21,080 --> 00:04:26,900
‫Let's create here a new file that we are going to call validation dot filter, dot ts.

60
00:04:26,900 --> 00:04:29,900
‫So inside it we are going to be defining our filter.

61
00:04:29,900 --> 00:04:34,310
‫Let's go ahead and define here a class with the validation filter name.

62
00:04:34,310 --> 00:04:39,350
‫And as usual, let's implement here the exception filter interface.

63
00:04:39,380 --> 00:04:43,010
‫This interface has one method, which is the catch method.

64
00:04:43,010 --> 00:04:49,130
‫So here we are going to be receiving a validation exception that we have just defined and we are going

65
00:04:49,130 --> 00:04:50,630
‫to be using here arguments.

66
00:04:50,630 --> 00:04:53,930
‫Host In order to produce our Http response.

67
00:04:53,930 --> 00:05:00,470
‫Let's start by grabbing here the Http context and with the context, we are also going to grab the.

68
00:05:01,110 --> 00:05:02,550
‫Response itself.

69
00:05:02,550 --> 00:05:06,000
‫Let's now build the response that we want to return.

70
00:05:06,000 --> 00:05:13,320
‫So let's return response dot status and we want to use here status 400 bad request.

71
00:05:13,350 --> 00:05:16,020
‫We want to send back a Json payload.

72
00:05:16,020 --> 00:05:18,240
‫Let's add here the payload body.

73
00:05:18,240 --> 00:05:20,850
‫We're going to add here the status code.

74
00:05:20,850 --> 00:05:27,930
‫Let's say it's 400 bad request and let's also add the property created by so that we can clearly see

75
00:05:27,930 --> 00:05:30,150
‫where this exception is coming from.

76
00:05:30,150 --> 00:05:32,940
‫This is coming from the validation filter.

77
00:05:32,940 --> 00:05:39,660
‫Let's now add here a new property called validation errors, and this is going to contain the exception

78
00:05:39,660 --> 00:05:44,550
‫validation errors array containing all the validation errors that were found.

79
00:05:44,580 --> 00:05:50,970
‫Now let's annotate this class with the catch decorator and we're going to say that this exception filter

80
00:05:50,970 --> 00:05:54,060
‫should be used for validation exceptions only.

81
00:05:54,060 --> 00:05:59,250
‫Let's now take the validation filter and let's configure it here in our main method.

82
00:05:59,250 --> 00:06:05,590
‫As we have mentioned before, in the filter configuration order here on use, global filters is important.

83
00:06:05,590 --> 00:06:08,920
‫It should be from the most generic to the most specific.

84
00:06:08,920 --> 00:06:15,850
‫So our validation filter is handling validation exceptions, which are subclasses of Http exceptions.

85
00:06:15,850 --> 00:06:17,890
‫So it's a more specific filter.

86
00:06:17,890 --> 00:06:22,270
‫Let's then add it here at the end of our array.

87
00:06:22,270 --> 00:06:27,940
‫So with this we are going to make sure that whenever a validation exception gets thrown, that it's

88
00:06:27,940 --> 00:06:32,950
‫the validation filter that is going to get triggered and not the exception filter.

89
00:06:32,950 --> 00:06:38,530
‫Let's now, before trying this out, complete here, the implementation here of the exception factory

90
00:06:38,530 --> 00:06:39,130
‫function.

91
00:06:39,130 --> 00:06:44,530
‫So we have defined here the messages property, but we did not create our exception.

92
00:06:44,530 --> 00:06:50,080
‫Let's create here a new validation exception and let's pass it in the constructor.

93
00:06:50,080 --> 00:06:53,680
‫The messages containing the multiple validation errors.

94
00:06:53,680 --> 00:06:58,660
‫Let's now try out our error handling solution here using the Restlet client.

95
00:06:58,660 --> 00:07:00,220
‫Let's submit this payload.

96
00:07:00,220 --> 00:07:03,310
‫So let's remember that there are two errors here.

97
00:07:03,310 --> 00:07:06,850
‫One in the sequential number field and one in the promotion field.

98
00:07:06,850 --> 00:07:08,110
‫Let's click send.

99
00:07:08,110 --> 00:07:14,800
‫So again, we got a 400 bad request, but this time around we got here a response created by the validation

100
00:07:14,800 --> 00:07:15,400
‫filter.

101
00:07:15,400 --> 00:07:20,710
‫And as we can see here, we got two validation errors we have here that the sequential number has a

102
00:07:20,710 --> 00:07:23,980
‫wrong value and the value happens to be error.

103
00:07:23,980 --> 00:07:25,360
‫As we have seen here.

104
00:07:25,360 --> 00:07:30,940
‫We have here the validation message must be numeric and something similar here for the promo field.

105
00:07:30,940 --> 00:07:33,220
‫That must be a boolean value.

106
00:07:33,220 --> 00:07:40,570
‫So as you can see, everything is working as expected and we are having our input course validated according

107
00:07:40,600 --> 00:07:43,990
‫to the content of this class validator decorators.

108
00:07:43,990 --> 00:07:48,910
‫Let's now see what would happen if we would switch here the order of the filters.

109
00:07:48,910 --> 00:07:54,580
‫So instead of applying here, the validation filter at the end, let's say that we would apply it here

110
00:07:54,580 --> 00:07:57,310
‫right after the fallback exception filter.

111
00:07:57,310 --> 00:08:03,340
‫So if we now try out this new version of our backend, we are going to submit the same request.

112
00:08:03,370 --> 00:08:09,700
‫We can see that we still got a custom error reply, but this time around the http exception filter was

113
00:08:09,700 --> 00:08:14,320
‫triggered and not the validation specific validation filter.

114
00:08:14,320 --> 00:08:18,130
‫So as you can see, the order of the filters is important.

115
00:08:18,160 --> 00:08:23,050
‫We really need to configure them from the most generic to the most specific.

116
00:08:23,050 --> 00:08:29,050
‫In the case of our application, the validation filter is more specific than the exception filter,

117
00:08:29,050 --> 00:08:31,030
‫so it should come after it.

118
00:08:31,060 --> 00:08:33,280
‫Here on this configuration array.

119
00:08:33,280 --> 00:08:36,910
‫And with this we have completed our error handling section.

120
00:08:36,910 --> 00:08:42,760
‫Now, before moving on to more advanced concepts such as authentication, authorization guards.

121
00:08:42,760 --> 00:08:43,510
‫ET cetera.

122
00:08:43,540 --> 00:08:49,030
‫Let's take a couple of practice lessons to apply the concepts that we have learned so far.

123
00:08:49,030 --> 00:08:52,450
‫We are going to be building a new screen in our application.

124
00:08:52,450 --> 00:08:58,330
‫It's going to be the View course screen where we are going to do a couple of extra requests to our backend,

125
00:08:58,330 --> 00:09:03,700
‫and along the way we are going to learn a couple of extra features of Nestjs.

126
00:09:03,730 --> 00:09:08,110
‫We are also going to learn how to create a one to many relation in Mongoose.

127
00:09:08,110 --> 00:09:11,290
‫So this is coming right up in the next few lessons.

