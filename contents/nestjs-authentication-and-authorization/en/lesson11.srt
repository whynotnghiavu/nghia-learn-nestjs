1
00:00:01,170 --> 00:00:02,310
A refresh token

2
00:00:02,520 --> 00:00:05,670
is a special token used to
obtain new access tokens.

3
00:00:06,090 --> 00:00:10,470
This allows us to
have short lived access

4
00:00:10,470 --> 00:00:10,980
tokens without forcing
users to manually log in

5
00:00:11,250 --> 00:00:13,810
every time the original
access token expires.

6
00:00:14,160 --> 00:00:16,090
Once the access token expires.

7
00:00:16,200 --> 00:00:18,300
And applications can
use a refresh token.

8
00:00:18,630 --> 00:00:21,570
Who refresh ag a
regenerate or retrieve

9
00:00:21,870 --> 00:00:24,700
the new access token
behind the scenes.

10
00:00:24,960 --> 00:00:29,700
Refresh tokens should be returned alongside
the access and or ID tokens as a part of

11
00:00:29,700 --> 00:00:33,400
a user's initial authentication
and authorization flow.

12
00:00:33,510 --> 00:00:34,230
After that

13
00:00:34,410 --> 00:00:37,320
applications must then
securely store refresh tokens.

14
00:00:37,830 --> 00:00:41,310
You can think of a refresh token
as if it were a users credentials set

15
00:00:41,610 --> 00:00:43,751
as it does let them
re authenticate.

16
00:00:44,100 --> 00:00:44,760
Enough theory.

17
00:00:45,120 --> 00:00:49,420
Let's switch over to r i d e and begin
implementing this refresh token functionality.

18
00:00:49,920 --> 00:00:52,050
First let's open
up our dot e n v file

19
00:00:52,320 --> 00:00:54,180
to declare a new
environment variable

20
00:00:54,390 --> 00:00:55,950
at specifies the lifetime

21
00:00:56,190 --> 00:00:57,240
or time to live

22
00:00:57,390 --> 00:00:58,800
for our refresh tokens.

23
00:00:59,220 --> 00:01:01,890
Let's use eighty six town
than four hundred as the value.

24
00:01:02,220 --> 00:01:04,590
Which represents twenty
four hours or one day

25
00:01:04,800 --> 00:01:06,100
but in milliseconds.

26
00:01:06,270 --> 00:01:06,810
Next

27
00:01:07,080 --> 00:01:09,270
let's move to
the jwt config file

28
00:01:09,510 --> 00:01:12,090
and add a new refresh
token t t l property

29
00:01:12,210 --> 00:01:15,820
following the same naming
convention we did with our access token.

30
00:01:15,870 --> 00:01:19,620
Were passing a fallback
default value here just in

31
00:01:19,650 --> 00:01:20,970
case the environment
variable isn't set but i do really

32
00:01:21,240 --> 00:01:24,060
you should have schema
validation future turned on instead.

33
00:01:24,420 --> 00:01:26,770
The the fundamental
course for more information.

34
00:01:26,880 --> 00:01:27,240
Great.

35
00:01:27,660 --> 00:01:31,750
Let's make sure we save our changes
and navigate to our authentication service.

36
00:01:32,262 --> 00:01:36,070
Make things simpler let's
refactor the token signing logic.

37
00:01:36,330 --> 00:01:38,670
And let's extract extracted
to a separate method.

38
00:01:39,240 --> 00:01:39,930
On the method

39
00:01:40,140 --> 00:01:41,800
sign to token.

40
00:01:45,930 --> 00:01:48,210
We're gonna need a bit
more here to get what we want.

41
00:01:48,780 --> 00:01:50,890
Let's add a few
things to our method.

42
00:01:51,060 --> 00:01:52,739
First let's start
by modifying the

43
00:01:52,950 --> 00:01:54,150
generated method signature

44
00:01:54,480 --> 00:01:56,050
and at three parameters.

45
00:01:56,610 --> 00:01:58,230
User ID of type number

46
00:01:58,530 --> 00:01:59,820
which is our user ID.

47
00:02:00,240 --> 00:02:01,170
Expires in

48
00:02:01,320 --> 00:02:03,420
which represents the
to an expiration time.

49
00:02:03,990 --> 00:02:08,140
This'll be different depending on whether
regenerate and access or refresh token.

50
00:02:08,970 --> 00:02:09,750
And lastly

51
00:02:09,900 --> 00:02:10,440
payload.

52
00:02:10,830 --> 00:02:14,520
Which is an additional set of properties
to be signed an embedded in the token

53
00:02:14,760 --> 00:02:15,690
of type t.

54
00:02:16,020 --> 00:02:18,510
Which will be our type
argument that we can pass down

55
00:02:18,660 --> 00:02:20,140
via a generic.

56
00:02:20,460 --> 00:02:22,080
With our method
signature and place

57
00:02:22,230 --> 00:02:25,890
let's make use of these
do parameters and update

58
00:02:25,890 --> 00:02:26,890
everything in our
method body to use them.

59
00:02:34,110 --> 00:02:34,530
Great

60
00:02:34,830 --> 00:02:35,490
lastly

61
00:02:35,670 --> 00:02:39,450
let's update the method usage in our sign
in method above making sure we're passing

62
00:02:39,450 --> 00:02:42,030
down the generic of
partial active user data

63
00:02:42,450 --> 00:02:45,520
and then passing down
the three parameters to it.

64
00:02:49,800 --> 00:02:50,730
As we can see.

65
00:02:51,030 --> 00:02:54,750
We now have the generic
sign token method available

66
00:02:54,750 --> 00:02:56,170
that we can use to
generate our refresh token.

67
00:02:56,460 --> 00:02:56,970
Now

68
00:02:57,090 --> 00:03:00,810
we need to use the promise dot all
to generate both tokens and parallel

69
00:03:01,110 --> 00:03:04,210
which will save us some time
and give us better performance.

70
00:03:04,620 --> 00:03:08,800
Oh let's first convert this chunk
to use the promise that all format.

71
00:03:13,440 --> 00:03:14,010
And then

72
00:03:14,310 --> 00:03:17,800
let's add the refresh token
generation logic here as well.

73
00:03:20,190 --> 00:03:21,190
Perfect.

74
00:03:21,510 --> 00:03:22,170
Lastly

75
00:03:22,350 --> 00:03:26,430
we just have to add the
refresh token property

76
00:03:26,430 --> 00:03:26,940
to the object returned
from this sign and method

77
00:03:27,120 --> 00:03:28,900
and we should be all set.

78
00:03:29,550 --> 00:03:31,080
Let's make sure to
save our changes

79
00:03:31,380 --> 00:03:32,400
at ever do insomnia

80
00:03:32,520 --> 00:03:35,770
and call the sign in and
point to test everything out.

81
00:03:36,930 --> 00:03:37,740
As we can see.

82
00:03:38,190 --> 00:03:42,450
Alongside our access token we received
the newly added refresh token great

83
00:03:42,810 --> 00:03:43,230
but

84
00:03:43,530 --> 00:03:44,250
how can we use it.

85
00:03:44,820 --> 00:03:45,300
Well

86
00:03:45,510 --> 00:03:47,710
there are two viable approaches.

87
00:03:48,180 --> 00:03:49,170
In the first approach

88
00:03:49,290 --> 00:03:53,250
we could modify the
existing sign in and point to

89
00:03:53,251 --> 00:03:54,090
accept additional
properties in the request body

90
00:03:54,390 --> 00:03:55,680
respectively Grant.

91
00:03:56,040 --> 00:04:00,010
Which in decatur what strategy
we want to use token or credentials.

92
00:04:00,150 --> 00:04:01,320
In the second approach

93
00:04:01,590 --> 00:04:05,400
we could simply expose a new one point
that validates the incoming refresh token

94
00:04:05,670 --> 00:04:09,130
in generates access and
refreshed oh compares for us.

95
00:04:09,210 --> 00:04:10,290
For simplicity's sake

96
00:04:10,590 --> 00:04:11,940
will choose the second approach

97
00:04:12,180 --> 00:04:16,030
but just know that there are other
options available to achieve all of this.

98
00:04:16,080 --> 00:04:19,830
Okay so so first inside the i
am authentication d t o folder.

99
00:04:20,280 --> 00:04:25,030
Let's add a new file in name
it refresh dash token dot d t o.

100
00:04:25,410 --> 00:04:26,340
Inside of this file.

101
00:04:26,670 --> 00:04:28,440
Let's add a simple detail class

102
00:04:28,680 --> 00:04:31,150
and call it refresh token dt oh.

103
00:04:31,620 --> 00:04:33,690
Let's annotate the
refresh token property

104
00:04:33,960 --> 00:04:35,850
with the is not empty decorator

105
00:04:36,150 --> 00:04:38,680
from the key class
dash validator package.

106
00:04:39,540 --> 00:04:40,680
With this in place

107
00:04:40,860 --> 00:04:43,200
let's navigate to our
authentication controller

108
00:04:43,380 --> 00:04:46,810
and add their corresponding
refresh tokens post endpoint.

109
00:04:49,620 --> 00:04:51,510
Similar to our sign an endpoint

110
00:04:51,660 --> 00:04:55,890
be annotated it with the
http decorator to instruct

111
00:04:55,930 --> 00:04:57,150
a framework that in case
of a successful response.

112
00:04:57,480 --> 00:04:59,608
The okay status
should be used as a.

113
00:04:59,970 --> 00:05:01,123
Two hundred.

114
00:05:01,710 --> 00:05:03,090
Let's copy what we have here.

115
00:05:03,450 --> 00:05:07,350
Open of the authentication service and
paste it they're removing all of the https

116
00:05:07,359 --> 00:05:09,960
specific annotations
in flagging this method

117
00:05:10,170 --> 00:05:11,470
as a sink.

118
00:05:17,250 --> 00:05:19,560
Inside our method
here let's first verify

119
00:05:19,800 --> 00:05:21,730
the incoming refresh token.

120
00:05:25,380 --> 00:05:30,660
Next let's use the sub
which represents the user

121
00:05:30,660 --> 00:05:31,720
ID to retrieve the user
entity from the database.

122
00:05:32,790 --> 00:05:34,380
Once we have the user instance

123
00:05:34,500 --> 00:05:36,600
let's scroll up a little
to the sign in method

124
00:05:36,810 --> 00:05:39,240
as we could reuse the
tokens generation logic

125
00:05:39,510 --> 00:05:39,870
but

126
00:05:40,080 --> 00:05:41,940
we want to avoid
copying coat over

127
00:05:42,240 --> 00:05:43,560
but let's refactor this method

128
00:05:43,890 --> 00:05:47,080
and extract these lines
to a dedicated method.

129
00:05:48,330 --> 00:05:49,410
Let's call this new method

130
00:05:49,560 --> 00:05:51,070
generate tokens.

131
00:05:51,990 --> 00:05:53,010
Before we proceed

132
00:05:53,310 --> 00:05:55,320
let's make sure to label
this method as public

133
00:05:55,500 --> 00:05:57,670
as will need it
in future lessons.

134
00:05:58,050 --> 00:05:59,460
With our new method in place

135
00:05:59,730 --> 00:06:01,710
we can now use the
generate tokens method

136
00:06:01,860 --> 00:06:04,660
in our newly defined
refreshed tokens method.

137
00:06:10,170 --> 00:06:10,830
Lastly

138
00:06:11,040 --> 00:06:13,500
let's wrap everything
up in a try catch block

139
00:06:13,620 --> 00:06:16,920
and in case any error
occurs be it user does not exist

140
00:06:17,100 --> 00:06:19,590
refresh token is
invalid or expired etc.

141
00:06:20,010 --> 00:06:22,799
Will make sure we throw the
unauthorized exception error.

142
00:06:23,310 --> 00:06:24,310
Perfect.

143
00:06:24,510 --> 00:06:25,560
Let's save our changes as

144
00:06:25,740 --> 00:06:27,400
and head back to insomnia.

145
00:06:27,780 --> 00:06:31,200
Let's copy the refresh token
we received a few minutes ago

146
00:06:31,440 --> 00:06:35,280
in hit the authentication slash
refresh dashed tokens and point

147
00:06:35,700 --> 00:06:37,410
to retrieve a new
pair of tokens.

148
00:06:37,830 --> 00:06:39,300
Passing in the refresh token.

149
00:06:39,630 --> 00:06:41,412
As the request body.

150
00:06:46,290 --> 00:06:47,160
And voila.

151
00:06:47,490 --> 00:06:51,030
We have successfully regenerated
are tokens using the refresh token.

152
00:06:51,510 --> 00:06:52,410
As we can see.

153
00:06:52,740 --> 00:06:56,160
Users will now have the ability
to re authenticate themselves

154
00:06:56,340 --> 00:06:57,450
be a refresh tokens.

155
00:06:57,870 --> 00:06:59,310
All while keeping
our application

156
00:06:59,490 --> 00:07:00,450
fairly secure.

157
00:07:00,780 --> 00:07:04,840
Who do are access tokens
have in short detail or time to live.

