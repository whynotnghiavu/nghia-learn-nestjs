1
00:00:00,870 --> 00:00:02,310
Two factor authentication

2
00:00:02,430 --> 00:00:03,330
or to f a.

3
00:00:03,690 --> 00:00:08,670
Is the process of requiring a user to verify
their identity in to unique ways before

4
00:00:08,670 --> 00:00:11,051
they are granted
access to a system.

5
00:00:11,100 --> 00:00:11,757
To f a

6
00:00:12,030 --> 00:00:13,260
extends this paradigm

7
00:00:13,440 --> 00:00:16,690
by adding an additional step
to the authentication process.

8
00:00:16,770 --> 00:00:18,600
Typically requiring
the user to enter

9
00:00:18,780 --> 00:00:21,420
a one time token that
is dynamically generated

10
00:00:21,690 --> 00:00:23,070
and delivered through a method

11
00:00:23,250 --> 00:00:24,810
that only the user can access.

12
00:00:25,170 --> 00:00:25,410
Via.

13
00:00:25,740 --> 00:00:29,440
Google authenticator sms
and many other options.

14
00:00:29,910 --> 00:00:31,740
To f a protects against phishing

15
00:00:31,860 --> 00:00:36,870
social engineering and
password brute force attacks in

16
00:00:36,900 --> 00:00:38,530
is a vital part of most secure
authentication systems.

17
00:00:38,940 --> 00:00:39,780
Before we start.

18
00:00:40,140 --> 00:00:44,020
Let's install a few required dependencies
that will need before going forward.

19
00:00:44,160 --> 00:00:45,120
O t p lib

20
00:00:45,240 --> 00:00:48,810
is a javascript one time
password or odp library

21
00:00:48,960 --> 00:00:51,580
for one time pass
regeneration and verification.

22
00:00:52,050 --> 00:00:55,590
It's compatible with
the Google authenticator

23
00:00:55,590 --> 00:00:56,590
application that will
use in this lesson.

24
00:00:56,910 --> 00:00:59,310
The qr code package is a qr code

25
00:00:59,430 --> 00:01:01,270
two d barcode generator.

26
00:01:01,440 --> 00:01:04,890
Will be continually
ahead as we already have

27
00:01:04,890 --> 00:01:05,280
these installed but if
you're following along

28
00:01:05,490 --> 00:01:08,350
just pause the video and come
back when everything's finished.

29
00:01:09,090 --> 00:01:13,470
With everything installed
let's generate an ot

30
00:01:13,475 --> 00:01:14,340
p authentication service
using the nes jsc ally.

31
00:01:14,730 --> 00:01:17,950
Where will store most
of our odp business logic.

32
00:01:18,270 --> 00:01:20,160
Before we start
implementing our service.

33
00:01:20,580 --> 00:01:22,260
Let's open up our dot e m d file

34
00:01:22,560 --> 00:01:24,900
and declare a new environment
variable they're called

35
00:01:25,110 --> 00:01:26,610
t f a underscore app

36
00:01:26,790 --> 00:01:28,247
underscore name.

37
00:01:28,920 --> 00:01:29,700
In this variable

38
00:01:29,850 --> 00:01:32,490
will store the to factor
auth application name

39
00:01:32,730 --> 00:01:36,540
it will just call hours
off dash playground

40
00:01:36,540 --> 00:01:37,540
but feel free to name
it whatever you'd like.

41
00:01:38,490 --> 00:01:40,240
Now onto our service.

42
00:01:40,290 --> 00:01:43,660
Let's start things off by injecting to
dependencies and our constructor.

43
00:01:44,010 --> 00:01:47,880
Will use config service to retrieve that
to f a app name environment parable

44
00:01:48,240 --> 00:01:52,860
and use a repository to enable two-factor
authentication upon successful generation

45
00:01:53,010 --> 00:01:54,580
of a qr code.

46
00:01:55,590 --> 00:01:56,700
All right so first

47
00:01:56,850 --> 00:01:59,500
let's declare a
generate secret method.

48
00:01:59,940 --> 00:02:00,660
Each user

49
00:02:00,840 --> 00:02:03,780
must have a unique secret
key so inside this method

50
00:02:03,990 --> 00:02:07,390
let's generate one
using the o t p lib library.

51
00:02:08,340 --> 00:02:12,870
Let's make sure we import the authenticator
object from the ot p lib package

52
00:02:13,290 --> 00:02:16,210
and call the generate
secret method on it.

53
00:02:16,320 --> 00:02:16,950
Next up.

54
00:02:17,430 --> 00:02:22,020
Let's first retrieve the
application name using

55
00:02:22,020 --> 00:02:22,470
the config service that
get or throw method.

56
00:02:22,980 --> 00:02:24,839
And then generate a you are i

57
00:02:25,110 --> 00:02:28,420
using the authenticator
he you are a method.

58
00:02:29,580 --> 00:02:30,760
And lastly.

59
00:02:30,930 --> 00:02:32,580
Let's return both the you are i

60
00:02:32,700 --> 00:02:34,930
and secret from this method.

61
00:02:35,700 --> 00:02:36,270
Also.

62
00:02:36,690 --> 00:02:41,490
Wanted a method that verifies user provided
code or token from the authentication

63
00:02:41,490 --> 00:02:44,410
application in our case
Google authenticator.

64
00:02:44,670 --> 00:02:45,630
So let's define the

65
00:02:45,870 --> 00:02:47,160
verify code method.

66
00:02:47,550 --> 00:02:49,860
Which also uses
authenticator from oh t

67
00:02:50,070 --> 00:02:50,460
lib

68
00:02:50,790 --> 00:02:54,010
and this time calling
the verified method on it.

69
00:02:54,270 --> 00:02:55,320
Before you move further.

70
00:02:55,650 --> 00:02:59,910
What's navigate to our
user entity and add two

71
00:02:59,910 --> 00:03:01,300
columns here that will
need for our to factor needs.

72
00:03:01,590 --> 00:03:05,070
First we need a column
that determines whether two

73
00:03:05,070 --> 00:03:06,420
factor authentication has
been enabled for a given user

74
00:03:06,720 --> 00:03:09,310
let's make sure to
set the default to false.

75
00:03:09,900 --> 00:03:10,830
For the second column.

76
00:03:11,160 --> 00:03:13,530
As great a column
named tf a secret

77
00:03:13,800 --> 00:03:17,710
which will use to store a user's
two factor authentication secret.

78
00:03:18,270 --> 00:03:21,910
With all that set up back to r
o t p authentication service.

79
00:03:22,020 --> 00:03:25,890
Let's add the last method
we need their which

80
00:03:25,920 --> 00:03:27,460
enables two factor
authentication forgiven user.

81
00:03:27,960 --> 00:03:30,270
Know that we left a
comment here that ideally

82
00:03:30,540 --> 00:03:34,780
we would want to encrypt the
secret instead of storing it in plain text.

83
00:03:34,950 --> 00:03:37,830
But also know that we wouldn't
be able to use hashing here

84
00:03:38,010 --> 00:03:42,340
as the original secret is required
to verify the users provided coat.

85
00:03:42,900 --> 00:03:43,470
All right

86
00:03:43,800 --> 00:03:46,170
but this service in place
and ready to be used.

87
00:03:46,682 --> 00:03:48,540
To navigate to the
authentication controller

88
00:03:48,810 --> 00:03:51,820
and add a new one point there
so we can access everything.

89
00:03:55,500 --> 00:03:56,220
This endpoint

90
00:03:56,370 --> 00:04:00,570
will return a user
specific qr code to be

91
00:04:00,570 --> 00:04:01,570
scanned by the users
authenticator application.

92
00:04:02,130 --> 00:04:02,970
To achieve this.

93
00:04:03,390 --> 00:04:08,533
When easy access the native express js
response object the other rez decorator.

94
00:04:09,180 --> 00:04:12,390
Also note that this method is
annotated with the hoth decorator

95
00:04:12,540 --> 00:04:15,060
tour earning on bear
authentication for this endpoint

96
00:04:15,360 --> 00:04:19,360
as other routes registered in
this controller our public by the fall.

97
00:04:19,740 --> 00:04:20,670
Inside this method.

98
00:04:21,120 --> 00:04:23,730
As first generate the
secret for the active user.

99
00:04:24,150 --> 00:04:27,910
Using the generate secret method
we created just a moment ago.

100
00:04:34,500 --> 00:04:34,980
Next.

101
00:04:35,460 --> 00:04:36,754
Let's unable to f a.

102
00:04:37,170 --> 00:04:38,970
Using the active user email

103
00:04:39,240 --> 00:04:43,390
and a secret we just generated
making sure to oh wait the results.

104
00:04:43,950 --> 00:04:45,100
And lastly.

105
00:04:45,180 --> 00:04:47,310
A said the response
type two p n g

106
00:04:47,580 --> 00:04:53,020
as will be returning a qr code image a return
the generated qr code back to the user.

107
00:05:00,750 --> 00:05:05,640
Note that we imported the to filestream
helper function from the qr code library

108
00:05:05,820 --> 00:05:08,830
which rights to qr
code image to a stream.

109
00:05:09,690 --> 00:05:11,260
Let's save our changes.

110
00:05:11,310 --> 00:05:15,570
Had ever do insomnia
and log in again just to

111
00:05:15,570 --> 00:05:16,570
make sure we're not
using an expired token.

112
00:05:20,640 --> 00:05:21,150
Now.

113
00:05:21,570 --> 00:05:26,190
Let's try to hit our newly
created authentication

114
00:05:26,190 --> 00:05:26,520
slashed to f a slash
generate and point

115
00:05:26,820 --> 00:05:28,600
to see if everything works.

116
00:05:42,720 --> 00:05:43,410
An excellent.

117
00:05:43,770 --> 00:05:47,410
We can see we got that qr
code image back in the response.

118
00:05:47,610 --> 00:05:49,320
That we can now scan or qr code

119
00:05:49,620 --> 00:05:51,750
with our Google
authenticator application

120
00:05:51,930 --> 00:05:53,500
on our mobile device.

121
00:05:54,120 --> 00:05:56,430
All right so with our
qr code generated

122
00:05:56,700 --> 00:06:01,440
we need to update the sign and flown
out to require a use or to pass the t o tp.

123
00:06:01,830 --> 00:06:03,870
Or time based one time password

124
00:06:04,140 --> 00:06:08,770
in this case our Google authenticator
code alongside their email and password.

125
00:06:09,060 --> 00:06:09,870
Will to navigate

126
00:06:10,110 --> 00:06:11,850
to the sign in detail class

127
00:06:12,210 --> 00:06:15,030
and at a new field
they're named tf a code.

128
00:06:15,480 --> 00:06:16,930
Of type string.

129
00:06:18,060 --> 00:06:19,350
Will flag as optional

130
00:06:19,590 --> 00:06:22,350
as as required only
for users that have to f a

131
00:06:22,500 --> 00:06:23,830
turned on.

132
00:06:24,000 --> 00:06:26,340
Now let's open up our
authentication service

133
00:06:26,490 --> 00:06:27,390
and inject the oh.

134
00:06:27,930 --> 00:06:31,780
Authentication service as will
need it for validating tokens.

135
00:06:33,270 --> 00:06:35,250
Let's scroll down
to the sign in method

136
00:06:35,700 --> 00:06:38,820
and a just before regenerate
access and refresh tokens

137
00:06:39,120 --> 00:06:40,320
let's add a new condition.

138
00:06:40,680 --> 00:06:42,570
Checking if tfl is enabled.

139
00:06:42,930 --> 00:06:44,410
With a given user.

140
00:06:45,150 --> 00:06:45,960
And if so

141
00:06:46,140 --> 00:06:48,480
let's verify the code
and thrown an exception

142
00:06:48,630 --> 00:06:49,930
if it's invalid.

143
00:06:50,460 --> 00:06:51,460
Great.

144
00:06:51,840 --> 00:06:53,400
Let's make sure we
save our changes.

145
00:06:53,820 --> 00:06:57,100
Had ever do insomnia and
try to log in one more time.

146
00:06:59,220 --> 00:07:01,560
Since our user
has two f a enabled

147
00:07:01,830 --> 00:07:05,790
since we generated a qr code by
hitting the to f a slash January endpoint.

148
00:07:06,240 --> 00:07:07,170
We received an error

149
00:07:07,470 --> 00:07:10,630
invalid to f a code just
as we should expect.

150
00:07:10,830 --> 00:07:12,510
So let's update our request body

151
00:07:12,840 --> 00:07:16,290
and past the appropriate
tf a code that you can

152
00:07:16,290 --> 00:07:17,830
retrieve from your Google
authenticator application.

153
00:07:17,910 --> 00:07:19,450
On your mobile device.

154
00:07:19,530 --> 00:07:23,010
Notice will of course be
different than what we're

155
00:07:23,010 --> 00:07:24,760
entering here at the very
moment of this record it.

156
00:07:24,930 --> 00:07:25,770
If we had sent

157
00:07:25,980 --> 00:07:28,510
you'll see that we
successfully logged in.

158
00:07:28,620 --> 00:07:32,580
So in this lesson we've
done everything we need

159
00:07:32,580 --> 00:07:33,580
to set up to f a within
our future applications.

160
00:07:33,750 --> 00:07:36,880
Bringing our log in
security to the next level.

