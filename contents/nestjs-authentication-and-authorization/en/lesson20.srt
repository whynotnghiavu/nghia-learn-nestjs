1
00:00:00,960 --> 00:00:01,650
Passport

2
00:00:01,830 --> 00:00:05,400
is the most popular know js
authentication library out there.

3
00:00:05,820 --> 00:00:09,300
It is well known by
the community and

4
00:00:09,300 --> 00:00:10,300
successfully used in many
production applications.

5
00:00:10,620 --> 00:00:11,220
Passport

6
00:00:11,430 --> 00:00:16,210
has a rich ecosystem of strategies to
implement various authentication mechanisms.

7
00:00:16,440 --> 00:00:17,700
While simple in concept.

8
00:00:18,090 --> 00:00:21,960
The set of passport
strategies use used for

9
00:00:21,960 --> 00:00:22,960
them as large and
presents a lot of variety.

10
00:00:23,190 --> 00:00:26,700
Passport abstracts these varied
steps into a standard pattern.

11
00:00:27,030 --> 00:00:28,770
In the nastiest passport module.

12
00:00:29,070 --> 00:00:31,170
Wraps and standardize
is this pattern

13
00:00:31,380 --> 00:00:33,550
into familiar nest constructs.

14
00:00:33,780 --> 00:00:37,140
So far throughout this entire course
extension we have implemented

15
00:00:37,260 --> 00:00:39,720
everything by ourselves
without using passport

16
00:00:39,960 --> 00:00:43,380
just the show you that even though passport
is great to years and super popular.

17
00:00:43,710 --> 00:00:46,890
You can build a fully fledged
flexible authentication system

18
00:00:47,100 --> 00:00:49,000
without using it as well.

19
00:00:49,500 --> 00:00:50,280
In this lesson

20
00:00:50,580 --> 00:00:54,270
will show you how you
could integrate passport

21
00:00:54,270 --> 00:00:54,990
with nest which might
be useful for situations

22
00:00:55,260 --> 00:00:57,540
where you don't need
that absolute full control.

23
00:00:57,870 --> 00:01:00,390
Like all the custom things
we've gone through this course.

24
00:01:00,810 --> 00:01:01,380
Also.

25
00:01:01,770 --> 00:01:03,720
Just to mix things
up a little bit more

26
00:01:03,990 --> 00:01:06,240
instead of using
jwt for authentication

27
00:01:06,510 --> 00:01:08,770
will be using
server-side sessions.

28
00:01:08,850 --> 00:01:12,390
Which is another great
option for authentication that

29
00:01:12,390 --> 00:01:14,230
may make sense and some
applications and circumstances.

30
00:01:15,390 --> 00:01:16,260
A session

31
00:01:16,440 --> 00:01:20,920
allows web apps to persist data
about the current user between requests.

32
00:01:21,180 --> 00:01:23,730
The mechanism we used to
accomplish this is a cookie.

33
00:01:24,060 --> 00:01:28,080
Which allows the server
to create small blocks of

34
00:01:28,080 --> 00:01:30,130
contextual data placed in
the user's browser or device.

35
00:01:30,780 --> 00:01:34,020
So what that means in the big
picture is that when a user logs in

36
00:01:34,260 --> 00:01:37,170
regenerate a sec the ID
and send it back to the user.

37
00:01:37,500 --> 00:01:41,950
Expecting that it will be sent back to
us in subsequent requests as a cookie.

38
00:01:42,120 --> 00:01:43,290
On the a p i sighed

39
00:01:43,530 --> 00:01:46,243
we can then compared
the received ID aka

40
00:01:46,350 --> 00:01:47,070
session ID

41
00:01:47,310 --> 00:01:49,570
with the ID we have
stored in memory.

42
00:01:50,310 --> 00:01:53,070
The issue with this approach
is that it's fully stateful.

43
00:01:53,430 --> 00:01:55,920
If you have a load
balancer in front of your a p i.

44
00:01:56,250 --> 00:01:59,970
The user may authenticate through
the first instance or node and then access

45
00:01:59,970 --> 00:02:02,320
resources through
another instance.

46
00:02:02,370 --> 00:02:03,090
In this case

47
00:02:03,330 --> 00:02:05,130
the server won't
recognize the user

48
00:02:05,610 --> 00:02:06,600
to solve this problem

49
00:02:06,750 --> 00:02:09,480
we typically use a database
for storing session ids

50
00:02:09,660 --> 00:02:10,320
most often

51
00:02:10,440 --> 00:02:11,740
read us.

52
00:02:12,270 --> 00:02:13,530
All right so before we start

53
00:02:13,740 --> 00:02:16,950
let's open up our terminals and
install a few dependencies passport.

54
00:02:17,280 --> 00:02:18,390
Nest j s passport

55
00:02:18,630 --> 00:02:20,440
and express session.

56
00:02:20,760 --> 00:02:23,100
Let's also install their
corresponding type definitions

57
00:02:23,200 --> 00:02:25,630
make sure we save them
as depth dependencies.

58
00:02:26,490 --> 00:02:28,320
Once the installation
process is complete.

59
00:02:28,770 --> 00:02:30,240
Let's open a bar e n v file

60
00:02:30,570 --> 00:02:34,265
and add a new environment
variable for hour session secret.

61
00:02:35,280 --> 00:02:39,100
We need a secret to encrypt
and decrypt hour session ids.

62
00:02:39,570 --> 00:02:40,140
Next up.

63
00:02:40,500 --> 00:02:42,270
Let's open up her
i am module file

64
00:02:42,510 --> 00:02:44,730
and add to imports
for express session

65
00:02:44,850 --> 00:02:46,030
and passport.

66
00:02:47,220 --> 00:02:48,150
With those in place.

67
00:02:48,480 --> 00:02:50,670
Let's scroll down to
our i am module class

68
00:02:51,030 --> 00:02:54,010
and make and implement
the nest module interface.

69
00:02:56,610 --> 00:02:59,610
This interface requires us to
provide a consumer method

70
00:02:59,760 --> 00:03:01,200
that takes one input argument.

71
00:03:01,500 --> 00:03:02,610
Middleware consumer.

72
00:03:02,970 --> 00:03:05,380
Which lets us register
middleware functions.

73
00:03:05,850 --> 00:03:06,270
Here.

74
00:03:06,810 --> 00:03:10,240
Let's register a few passport
related middleware functions.

75
00:03:12,180 --> 00:03:15,360
Note that the order in which
middleware is placed is very important

76
00:03:15,480 --> 00:03:17,980
as they get ran
one after another.

77
00:03:18,420 --> 00:03:20,340
With our middleware
functions registered

78
00:03:20,460 --> 00:03:24,900
let's open up our terminals
and generate a new session

79
00:03:24,900 --> 00:03:26,649
authentication service
using the nastiest July.

80
00:03:27,420 --> 00:03:29,730
We could have instead
modified the existing

81
00:03:29,940 --> 00:03:34,390
authentication service that currently
implements Jada beauty based authentication.

82
00:03:34,770 --> 00:03:38,140
But since we don't want to confuse
you and mixed these two concepts.

83
00:03:38,190 --> 00:03:40,150
Were deciding to
keep them separate.

84
00:03:40,380 --> 00:03:44,290
Next let's generate a dedicated
session authentication controller.

85
00:03:46,380 --> 00:03:46,770
Great.

86
00:03:47,310 --> 00:03:48,780
With both files place

87
00:03:49,050 --> 00:03:51,780
let's navigate two hour
session authentication service

88
00:03:52,170 --> 00:03:55,390
and start by injecting to
providers into the constructed.

89
00:03:55,710 --> 00:03:57,010
User repository

90
00:03:57,150 --> 00:03:58,840
and are hashing service.

91
00:03:59,400 --> 00:04:00,660
Now in the service

92
00:04:00,840 --> 00:04:02,430
will implement just one method

93
00:04:02,550 --> 00:04:03,270
sign in.

94
00:04:03,660 --> 00:04:07,080
Which will actually look
just like are so sign a method

95
00:04:07,080 --> 00:04:08,340
in our authentication service
we created a while back.

96
00:04:08,910 --> 00:04:09,690
To let's go ahead

97
00:04:09,930 --> 00:04:11,340
and copy that method over

98
00:04:11,640 --> 00:04:13,480
and replace a few things.

99
00:04:21,570 --> 00:04:24,630
Let's start by removing the two
factor authentication code here

100
00:04:24,810 --> 00:04:28,000
just to make the authentication
float easier to comprehend.

101
00:04:28,320 --> 00:04:31,200
And instead of generating
tokens upon successful login.

102
00:04:31,620 --> 00:04:33,240
Let's just returned
the user energy.

103
00:04:33,720 --> 00:04:37,120
The code here can be found
below the course video as always.

104
00:04:37,410 --> 00:04:41,560
Next up let's move on to our
session authentication controller class.

105
00:04:41,700 --> 00:04:42,120
First

106
00:04:42,240 --> 00:04:45,630
let's decorated with the auth
decorator passing and auth type none

107
00:04:45,990 --> 00:04:49,540
to make sure all routes declared
here in this controller our public.

108
00:04:50,430 --> 00:04:50,910
Next

109
00:04:51,030 --> 00:04:55,360
let's inject the session authentication
service using the standard approach.

110
00:04:56,340 --> 00:04:57,120
And lastly

111
00:04:57,270 --> 00:04:58,740
let's add a sign in method

112
00:04:58,890 --> 00:05:02,310
that once again will
be similar to our sign in

113
00:05:02,310 --> 00:05:03,970
method from our previous
authentication controller.

114
00:05:07,470 --> 00:05:08,430
One different here

115
00:05:08,610 --> 00:05:12,700
is that we're going to use the request
log in method provided by passport.

116
00:05:12,900 --> 00:05:15,450
Passing the user energy
as an input argument.

117
00:05:15,930 --> 00:05:18,580
Which will log this
specific user in.

118
00:05:19,230 --> 00:05:22,380
You may have noticed that we
are using promise of i hear as well

119
00:05:22,560 --> 00:05:24,210
as the original log in method

120
00:05:24,450 --> 00:05:26,190
implements a callback style

121
00:05:26,461 --> 00:05:27,570
and promise of i

122
00:05:27,720 --> 00:05:30,850
helps convert callback
a p eyes into a promise.

123
00:05:31,170 --> 00:05:33,360
Passports request logged method.

124
00:05:33,780 --> 00:05:35,610
Requires us to
provide logic for.

125
00:05:35,910 --> 00:05:37,260
Serializing the user

126
00:05:37,440 --> 00:05:39,070
and d serializing.

127
00:05:39,390 --> 00:05:40,890
So let's get that logic setup.

128
00:05:41,310 --> 00:05:43,921
Open up our terminals and
generate a new class with the.

129
00:05:44,327 --> 00:05:44,970
A seal i

130
00:05:45,270 --> 00:05:47,026
called user serializer

131
00:05:47,310 --> 00:05:49,280
and put it within
a new serializer

132
00:05:49,381 --> 00:05:49,890
folder.

133
00:05:50,250 --> 00:05:52,630
Or can place all of
our related larger.

134
00:05:52,980 --> 00:05:55,350
Let's navigate to this
newly generated class

135
00:05:55,471 --> 00:05:59,940
and make it extend
the passport serializer

136
00:05:59,940 --> 00:06:00,940
class from the nastiest
lush passport package.

137
00:06:03,840 --> 00:06:06,790
Inside this class let's
declare to methods.

138
00:06:07,080 --> 00:06:08,220
Serialize user

139
00:06:08,400 --> 00:06:12,870
which takes the user entity object that
we pass into the request log in method

140
00:06:13,200 --> 00:06:15,390
and maps it to the
active user data payload

141
00:06:15,570 --> 00:06:17,500
we've seen in previous lessons.

142
00:06:18,572 --> 00:06:18,752
The

143
00:06:18,987 --> 00:06:20,700
serialized user method here

144
00:06:20,820 --> 00:06:23,430
simply passes the d
serialized payload up.

145
00:06:24,030 --> 00:06:27,150
Know that we could possibly
use the user repository here

146
00:06:27,390 --> 00:06:30,420
to retrieve the user entity
based on the active user data.

147
00:06:31,020 --> 00:06:35,010
But since this method is
executed on every request

148
00:06:35,010 --> 00:06:36,300
this would most certainly
have performance implications

149
00:06:36,540 --> 00:06:39,429
so be mindful of doing
something like that in the the future.

150
00:06:40,200 --> 00:06:41,550
Now let's save our changes.

151
00:06:41,910 --> 00:06:43,080
Open up our terminals

152
00:06:43,230 --> 00:06:44,910
in generate one remaining class

153
00:06:45,060 --> 00:06:46,630
a session guard.

154
00:06:46,980 --> 00:06:51,090
Once created what's
navigate to this class and add

155
00:06:51,090 --> 00:06:51,930
the following lines to
our can activate method.

156
00:06:52,470 --> 00:06:53,550
Where all we need to do

157
00:06:53,790 --> 00:06:55,350
is grab the current request

158
00:06:55,560 --> 00:06:59,670
in return request that is authenticated
method result from passport art.

159
00:07:00,030 --> 00:07:01,260
Which returns a boolean.

160
00:07:01,680 --> 00:07:04,620
Letting us know whether the
current user is authenticated are not.

161
00:07:05,070 --> 00:07:06,820
Nice and simple right.

162
00:07:06,930 --> 00:07:08,340
With everything
we've done so far

163
00:07:08,550 --> 00:07:12,190
our session based authentication
is now fully functioning.

164
00:07:12,600 --> 00:07:14,160
So to test everything out

165
00:07:14,460 --> 00:07:17,010
let's switch to our session
authentication controller

166
00:07:17,130 --> 00:07:20,160
and add a random route there
for demonstration Peru offices

167
00:07:20,460 --> 00:07:23,050
and protected with
our new session guard.

168
00:07:25,200 --> 00:07:27,030
Now let's make sure
to save our changes.

169
00:07:27,420 --> 00:07:29,040
In before we test our endpoints

170
00:07:29,220 --> 00:07:33,250
let's make sure we register
our user serializer as a provider.

171
00:07:33,690 --> 00:07:36,610
Of navigate to r i
am module real quick.

172
00:07:36,690 --> 00:07:41,260
Add the user serializer class to the
providers array and save our changes.

173
00:07:44,700 --> 00:07:45,120
Great.

174
00:07:45,720 --> 00:07:47,310
Now let's head over to insomnia

175
00:07:47,490 --> 00:07:51,780
and start by calling the session dash
authentication slush sign in post endpoint.

176
00:07:52,140 --> 00:07:54,120
Making sure to pass
in our credentials.

177
00:07:54,480 --> 00:07:55,500
In the request body

178
00:07:55,710 --> 00:07:58,300
just like we do with jwt
based authentication.

179
00:07:59,730 --> 00:08:03,900
As we can see we received a two hundred
ok so everything worked and we were able to

180
00:08:03,900 --> 00:08:06,880
sign in and have a
session created great.

181
00:08:07,290 --> 00:08:08,820
Now if we click
on the cookies tab

182
00:08:09,120 --> 00:08:11,769
will see our
session ID in there.

183
00:08:12,930 --> 00:08:13,440
Now.

184
00:08:13,800 --> 00:08:16,680
Let's hit our random and point
protected by our session guard

185
00:08:16,890 --> 00:08:20,010
that should say hello
followed by our user email.

186
00:08:20,340 --> 00:08:22,810
If everything works properly
and were authenticated.

187
00:08:23,160 --> 00:08:26,010
And voila as we can see
we got a two hundred okay

188
00:08:26,370 --> 00:08:27,780
and were able to see hello

189
00:08:28,020 --> 00:08:30,030
user one at ness js dot com

190
00:08:30,270 --> 00:08:34,150
which is our current email that
we signed into our system fantastic.

191
00:08:35,040 --> 00:08:37,080
As we mentioned at the
beginning of this lesson

192
00:08:37,350 --> 00:08:39,390
session ids are kept in memory.

193
00:08:39,720 --> 00:08:41,280
So in real world systems.

194
00:08:41,580 --> 00:08:45,250
We typically use an external
database to keep track of sessions.

195
00:08:45,390 --> 00:08:47,220
Another important
problem to remember

196
00:08:47,520 --> 00:08:49,650
is that every time
you reboot your e poi

197
00:08:49,860 --> 00:08:51,450
meaning stop or started.

198
00:08:51,960 --> 00:08:53,970
Pushed new changes
or anything like that.

199
00:08:54,510 --> 00:08:58,030
All sessions will be lost and
everyone will be logged out.

200
00:08:59,010 --> 00:09:00,420
For demonstration purposes.

201
00:09:00,810 --> 00:09:04,740
Will use read us as is
pretty simple to set up

202
00:09:04,742 --> 00:09:05,460
plus we already have
configured in her application

203
00:09:05,760 --> 00:09:08,790
since we used red us for
refresh tokens in previous lessons

204
00:09:09,150 --> 00:09:09,450
but

205
00:09:09,720 --> 00:09:12,960
you could use any database of
your choice to soar session data.

206
00:09:13,350 --> 00:09:14,980
Read us is fantastic.

207
00:09:15,150 --> 00:09:18,720
As it's very lightweight
an extremely fast so it's

208
00:09:18,720 --> 00:09:20,140
without a doubt an
excellent of option for this.

209
00:09:20,340 --> 00:09:21,000
So first

210
00:09:21,300 --> 00:09:24,900
let's install a few required dependencies
that we will need before going forward.

211
00:09:25,350 --> 00:09:26,070
Connect dash

212
00:09:26,280 --> 00:09:26,520
us

213
00:09:26,790 --> 00:09:28,960
and the type definitions for.

214
00:09:32,790 --> 00:09:34,860
Once the installation
process is complete.

215
00:09:35,250 --> 00:09:37,290
Let's navigate to
r i am module file

216
00:09:37,470 --> 00:09:39,690
scrawled of the top and
add the following import

217
00:09:39,990 --> 00:09:41,160
importing star

218
00:09:41,400 --> 00:09:45,130
as create read a store
from connect dash read us.

219
00:09:45,390 --> 00:09:47,190
Next onto the configure method.

220
00:09:47,730 --> 00:09:48,120
Here

221
00:09:48,360 --> 00:09:50,130
let's create a
reddish your class

222
00:09:50,340 --> 00:09:54,160
passing down the session package
reference as an input parameter.

223
00:09:54,750 --> 00:09:55,440
And next

224
00:09:55,740 --> 00:09:59,580
what's up the the configuration we passed
two hour session middleware adding one

225
00:09:59,580 --> 00:10:01,780
additional property
called store.

226
00:10:02,220 --> 00:10:03,990
And let's make sure
to import read is here

227
00:10:04,110 --> 00:10:04,830
from Iowa

228
00:10:05,070 --> 00:10:05,370
us

229
00:10:05,790 --> 00:10:07,150
and that's it.

230
00:10:07,518 --> 00:10:12,478
Few steps we just leveled up our session
authentication system to use read us.

231
00:10:13,038 --> 00:10:14,808
Everything should
work just the same

232
00:10:14,988 --> 00:10:17,672
but now if we stop and
restart your application.

233
00:10:17,748 --> 00:10:19,788
Will see that we are
still in fact logged in

234
00:10:20,028 --> 00:10:22,458
and able to hit that guarded
and point we created.

235
00:10:22,908 --> 00:10:23,448
For fun.

236
00:10:23,778 --> 00:10:27,588
Look into your read estate
a base annual even be able

237
00:10:27,588 --> 00:10:29,160
to see the key values
for your sessions and side.

238
00:10:29,838 --> 00:10:33,708
So we've gone through
a lot in this lesson

239
00:10:33,708 --> 00:10:34,708
showcasing just how
easy it is to use passport.

240
00:10:34,938 --> 00:10:39,528
Password does give away some of our control
since we don't have absolute manual control

241
00:10:39,768 --> 00:10:43,318
over every little thing in the
authentication process of our applications

242
00:10:43,698 --> 00:10:46,618
but it does make a lot
of things easier for us.

243
00:10:46,878 --> 00:10:49,278
Note that using passport
with Jada beauties

244
00:10:49,428 --> 00:10:51,318
is very similar to
what we've done here.

245
00:10:51,768 --> 00:10:54,708
We won't be showcasing
that in this course

246
00:10:54,708 --> 00:10:55,458
but if you're interested
in that specifically

247
00:10:55,698 --> 00:10:57,318
we covered in great detail

248
00:10:57,498 --> 00:10:58,218
in the official

249
00:10:58,466 --> 00:10:59,762
j js documentations.

250
00:11:00,138 --> 00:11:02,938
You can find a link to that
below the course video.

251
00:11:02,988 --> 00:11:04,558
Thanks again for watching.

