1
00:00:01,170 --> 00:00:01,950
A claim

2
00:00:02,250 --> 00:00:05,070
is a name value pair that
represents what the subject

3
00:00:05,190 --> 00:00:07,260
can do not what the subject is.

4
00:00:07,740 --> 00:00:10,330
When implementing
claims based authorization.

5
00:00:10,500 --> 00:00:13,710
Instead of defining a set of roles
that can be assigned to users.

6
00:00:14,130 --> 00:00:15,840
We define multiple permissions

7
00:00:16,170 --> 00:00:20,410
and then have the ability to Grant
those permissions to individual users.

8
00:00:20,760 --> 00:00:22,170
In our application so far.

9
00:00:22,590 --> 00:00:25,170
We assumed that only
users with the admiral

10
00:00:25,290 --> 00:00:27,815
can create update
and delete coffees.

11
00:00:27,930 --> 00:00:32,340
Claims based authorization comes in
handy when we need more granular control

12
00:00:32,520 --> 00:00:33,390
and for example

13
00:00:33,660 --> 00:00:36,720
one specific users to be able
to create and update coffees

14
00:00:36,990 --> 00:00:42,250
but only one specific supervisor user
has the capable city of deleting coffers.

15
00:00:42,360 --> 00:00:45,420
Thought switch to r i d e
an start by creating a new

16
00:00:45,540 --> 00:00:47,340
coffees that permission that t

17
00:00:47,490 --> 00:00:49,660
file in the copies directory.

18
00:00:50,100 --> 00:00:51,000
Inside this file

19
00:00:51,270 --> 00:00:54,900
let's create an enum representing
all coffee related permissions

20
00:00:55,080 --> 00:00:55,920
can find the code

21
00:00:56,070 --> 00:00:57,820
below the course video.

22
00:00:58,380 --> 00:00:59,850
Note once again at typically

23
00:01:00,150 --> 00:01:03,580
you'd store these permissions
in a dedicated database table.

24
00:01:03,630 --> 00:01:05,070
Okay so let's save our changes

25
00:01:05,370 --> 00:01:08,440
and navigate to the i
am authorization director.

26
00:01:08,640 --> 00:01:09,000
Here.

27
00:01:09,480 --> 00:01:12,700
Let's create another file
called permission dot type.

28
00:01:13,080 --> 00:01:13,890
In in this file.

29
00:01:14,220 --> 00:01:16,260
Let's declare the
permission constant

30
00:01:16,410 --> 00:01:18,970
and make it equal
to an empty object.

31
00:01:20,280 --> 00:01:21,180
Inside this object.

32
00:01:21,510 --> 00:01:25,320
Let's use the spread
operator on our coffees

33
00:01:25,320 --> 00:01:26,430
permission enum making
all the permissions available

34
00:01:26,730 --> 00:01:28,540
in the permission constance.

35
00:01:29,970 --> 00:01:34,110
Let's also export the
permission type here so we can

36
00:01:34,110 --> 00:01:35,350
use it as an input argument
type of our decorator.

37
00:01:35,520 --> 00:01:36,030
Now.

38
00:01:36,360 --> 00:01:39,750
Let's implement the permissions decorator
that indicates which permissions are

39
00:01:39,753 --> 00:01:43,120
required in order to access
an annotated endpoint.

40
00:01:43,710 --> 00:01:46,710
As we've already created a
few decorators in this course.

41
00:01:47,100 --> 00:01:50,070
Will be following the same syntax
decree are permissions decorator.

42
00:01:50,490 --> 00:01:51,720
You can find the code here

43
00:01:51,990 --> 00:01:53,530
although the course video.

44
00:01:54,301 --> 00:01:54,780
Perfect.

45
00:01:55,230 --> 00:01:55,710
Now.

46
00:01:56,040 --> 00:01:58,181
Let's create our
permissions guard.

47
00:02:03,360 --> 00:02:04,950
And just like our roles guard.

48
00:02:05,280 --> 00:02:08,760
It's almost identical so we won't need
to look at everything line by line again

49
00:02:08,910 --> 00:02:10,950
but note that the only
main difference here

50
00:02:11,220 --> 00:02:13,080
are that were grabbing
the permissions key.

51
00:02:13,620 --> 00:02:17,740
And checking the user's permissions
against what was passed into the decorator.

52
00:02:17,790 --> 00:02:21,120
One other important though thing
that's different and permissions check here

53
00:02:21,360 --> 00:02:22,440
compared to our roles guard.

54
00:02:22,800 --> 00:02:24,780
Is that instead of
using the some method.

55
00:02:25,140 --> 00:02:26,250
We want to use every.

56
00:02:26,580 --> 00:02:29,850
Which make sure that the user
has all required permissions assigned

57
00:02:29,970 --> 00:02:30,930
not just one of 'em.

58
00:02:31,710 --> 00:02:32,250
Also

59
00:02:32,460 --> 00:02:36,450
since users can have multiple
permissions instead of using triple eagles

60
00:02:36,750 --> 00:02:38,730
were using the dot
includes method here

61
00:02:39,120 --> 00:02:40,420
and that's it.

62
00:02:40,710 --> 00:02:42,300
With our permissions
garden place.

63
00:02:42,660 --> 00:02:47,100
Let's now open up the i
am module and temporarily

64
00:02:47,100 --> 00:02:47,940
replaced the roles guard
with our permissions guard

65
00:02:48,150 --> 00:02:50,950
just to keep things simple
for the sake of this lesson.

66
00:02:54,780 --> 00:02:55,260
All right.

67
00:02:55,740 --> 00:02:59,940
Now the only remaining
step is for us to add the

68
00:02:59,940 --> 00:03:00,930
missing permissions
column to our users entity.

69
00:03:01,260 --> 00:03:04,900
Let's open it up and at it right
below the existing roles column.

70
00:03:09,660 --> 00:03:10,050
Note.

71
00:03:10,410 --> 00:03:14,370
As we've already mentioned before in a real
world application you would likely have a

72
00:03:14,370 --> 00:03:16,530
dedicated permissions
table where you'd store

73
00:03:16,650 --> 00:03:18,120
apps specific permissions.

74
00:03:18,480 --> 00:03:19,050
Also

75
00:03:19,350 --> 00:03:22,140
instead of storing users
permissions in a jaison column.

76
00:03:22,500 --> 00:03:24,420
There would be a many
to many relationship

77
00:03:24,600 --> 00:03:26,730
between the users a
and the permissions table.

78
00:03:27,300 --> 00:03:29,040
Just as we mentioned
in the last lesson

79
00:03:29,310 --> 00:03:33,420
if you'd like to practice go ahead and
create the entity controllers relations etc

80
00:03:33,600 --> 00:03:35,370
to establish all
of this if you'd like.

81
00:03:36,030 --> 00:03:40,900
Another common approach for permissions
is to tie permissions to roles themselves.

82
00:03:41,070 --> 00:03:42,570
That's a slightly
different technique

83
00:03:42,780 --> 00:03:44,860
and requires a
different configuration

84
00:03:45,000 --> 00:03:47,440
but might be a better
for for certain systems.

85
00:03:47,520 --> 00:03:48,900
In this different approach

86
00:03:49,200 --> 00:03:53,370
you could keep using the role-based access
control implementation with the roles guard

87
00:03:53,850 --> 00:03:57,390
and each role would have to
specify etc permissions tied to it.

88
00:03:58,200 --> 00:03:59,070
Back to our code.

89
00:03:59,400 --> 00:04:01,860
As you can see in the comment
above the permissions column.

90
00:04:02,370 --> 00:04:04,740
Having this column in
combination with a role.

91
00:04:05,070 --> 00:04:06,090
Does not make sense yeah.

92
00:04:06,450 --> 00:04:11,140
We use both in this course
just to showcase two different

93
00:04:11,220 --> 00:04:12,450
approaches to authorization
but in your application

94
00:04:12,750 --> 00:04:13,500
you should decide

95
00:04:13,620 --> 00:04:15,730
which approach you'll take.

96
00:04:15,810 --> 00:04:17,010
Okay so next up.

97
00:04:17,520 --> 00:04:20,040
Let's open up our
active user data interface

98
00:04:20,280 --> 00:04:23,770
and add the corresponding
permission field there as well.

99
00:04:26,640 --> 00:04:27,900
And last but not least.

100
00:04:28,291 --> 00:04:30,750
Need to open up our
authentication service again

101
00:04:30,930 --> 00:04:33,000
and make sure we
include the permissions field

102
00:04:33,300 --> 00:04:35,560
and he signed a sink token.

103
00:04:36,690 --> 00:04:37,080
Note

104
00:04:37,320 --> 00:04:39,760
that once again
this is far from ideal.

105
00:04:39,840 --> 00:04:44,519
Embedding a large
array of strings into our

106
00:04:44,520 --> 00:04:44,940
token will lead to a long
non lightweight token.

107
00:04:45,420 --> 00:04:47,080
In a real world application.

108
00:04:47,130 --> 00:04:49,330
Where you store
permissions in the database.

109
00:04:49,410 --> 00:04:51,960
We should only include an
array of ids here and said.

110
00:04:52,530 --> 00:04:53,190
Moreover

111
00:04:53,370 --> 00:04:55,890
if you expect a lot of
permissions in your system

112
00:04:56,160 --> 00:04:58,260
perhaps https you should
embedded in the token at all.

113
00:04:58,980 --> 00:05:00,030
In most cases.

114
00:05:00,450 --> 00:05:04,110
It wouldn't have these stored
in a database and we would

115
00:05:04,140 --> 00:05:06,400
retrieve these permissions
on each action or request.

116
00:05:06,900 --> 00:05:10,710
All right with this
commonplace let's save our

117
00:05:10,710 --> 00:05:11,640
changes open up the
coffee's controller file

118
00:05:12,120 --> 00:05:15,420
and instead of using the roles
decorator on top of our create method.

119
00:05:15,810 --> 00:05:17,430
Let's use permissions
now instead.

120
00:05:17,910 --> 00:05:20,100
Passing permission
dot create coffee

121
00:05:20,280 --> 00:05:21,850
as an input argument.

122
00:05:22,500 --> 00:05:24,010
Let's save our changes.

123
00:05:24,210 --> 00:05:25,290
Had ever to insomnia

124
00:05:25,530 --> 00:05:29,530
and start things off by first
retrieving a new access token.

125
00:05:31,410 --> 00:05:32,670
Once we get the response

126
00:05:32,940 --> 00:05:36,960
let's up the our authorization header
again with the newly received access token

127
00:05:37,260 --> 00:05:39,480
and hit the post
slash coffees on-point

128
00:05:39,780 --> 00:05:41,560
just like in the last lesson.

129
00:05:42,540 --> 00:05:43,540
Great.

130
00:05:43,830 --> 00:05:46,410
We received a four
three forbidden error

131
00:05:46,560 --> 00:05:50,726
just as we should expect
since our user does

132
00:05:50,726 --> 00:05:50,910
not have any permissions
assigned to it yet.

133
00:05:51,630 --> 00:05:52,470
To fixed us up.

134
00:05:53,100 --> 00:05:54,600
Let's switch back to r ID e

135
00:05:54,870 --> 00:05:56,010
open up our terminals

136
00:05:56,310 --> 00:06:00,120
and using the rebel
again let's add the create

137
00:06:00,120 --> 00:06:01,120
underscore coffee
permission to our user.

138
00:06:01,290 --> 00:06:05,250
Note if you're getting any errors like
property permissions was not found in user.

139
00:06:05,670 --> 00:06:07,410
You may need to
restart your rebel session

140
00:06:07,620 --> 00:06:07,980
meaning

141
00:06:08,190 --> 00:06:10,540
close the window
and run it again.

142
00:06:11,100 --> 00:06:12,750
Let's get the user repository

143
00:06:12,930 --> 00:06:14,910
update user one
an ad permissions

144
00:06:15,210 --> 00:06:16,500
rate underscore coffee to it.

145
00:06:17,370 --> 00:06:17,730
Right.

146
00:06:18,240 --> 00:06:19,840
Now back to insomnia.

147
00:06:20,100 --> 00:06:24,240
Let's retrieve a new
token again making sure

148
00:06:24,270 --> 00:06:25,420
these updated permissions
are embedded in it.

149
00:06:25,680 --> 00:06:26,820
Let's grab the token.

150
00:06:27,180 --> 00:06:31,590
An update that authorization
header one last time

151
00:06:31,650 --> 00:06:32,980
and had the coffee's
post and point once again.

152
00:06:33,930 --> 00:06:35,580
We'll see that vala it works.

153
00:06:35,970 --> 00:06:39,700
Are permission system is all
set up and working properly.

154
00:06:39,930 --> 00:06:41,850
So as we've
mentioned in this lesson.

155
00:06:42,180 --> 00:06:46,420
There's a lot of different techniques and
approaches to claim based authorization

156
00:06:46,560 --> 00:06:48,700
and role-based access control.

157
00:06:48,810 --> 00:06:49,650
Here in this lesson

158
00:06:49,950 --> 00:06:54,210
we have both as we built on top of the
same project we used in the previous lesson

159
00:06:54,600 --> 00:06:54,930
but

160
00:06:55,230 --> 00:06:57,070
in a real world application.

161
00:06:57,150 --> 00:06:58,530
Will likely just need one

162
00:06:58,800 --> 00:07:02,520
or a slightly different combination
like we mentioned briefly a moment ago

163
00:07:02,820 --> 00:07:04,290
where permissions are associated

164
00:07:04,500 --> 00:07:05,580
with roles themselves

165
00:07:05,820 --> 00:07:07,810
and not users directly.

